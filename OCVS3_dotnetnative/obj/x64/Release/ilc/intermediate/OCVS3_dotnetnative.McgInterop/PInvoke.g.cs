#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The 'McgInterop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace McgInterop
{
	/// <summary>
	/// P/Invoke class for module 'OpenCvSharpExtern'
	/// </summary>
	public unsafe static partial class OpenCvSharpExtern
	{
		// Signature, bgsegm_createBackgroundSubtractorMOG, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_createBackgroundSubtractorMOG")]
		public static global::System.IntPtr bgsegm_createBackgroundSubtractorMOG(
					int history, 
					int nmixtures, 
					double backgroundRatio, 
					double noiseSigma)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_createBackgroundSubtractorMOG(
								history, 
								nmixtures, 
								backgroundRatio, 
								noiseSigma
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_Ptr_BackgroundSubtractorMOG_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_Ptr_BackgroundSubtractorMOG_delete")]
		public static void bgsegm_Ptr_BackgroundSubtractorMOG_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_Ptr_BackgroundSubtractorMOG_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_Ptr_BackgroundSubtractorMOG_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_Ptr_BackgroundSubtractorMOG_get")]
		public static global::System.IntPtr bgsegm_Ptr_BackgroundSubtractorMOG_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_Ptr_BackgroundSubtractorMOG_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_getHistory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_getHistory")]
		public static int bgsegm_BackgroundSubtractorMOG_getHistory(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_getHistory(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_setHistory, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_setHistory")]
		public static void bgsegm_BackgroundSubtractorMOG_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_setHistory(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_getNMixtures, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_getNMixtures")]
		public static int bgsegm_BackgroundSubtractorMOG_getNMixtures(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_getNMixtures(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_setNMixtures, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_setNMixtures")]
		public static void bgsegm_BackgroundSubtractorMOG_setNMixtures(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_setNMixtures(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_getBackgroundRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_getBackgroundRatio")]
		public static double bgsegm_BackgroundSubtractorMOG_getBackgroundRatio(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_getBackgroundRatio(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_setBackgroundRatio, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_setBackgroundRatio")]
		public static void bgsegm_BackgroundSubtractorMOG_setBackgroundRatio(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_setBackgroundRatio(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_getNoiseSigma, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_getNoiseSigma")]
		public static double bgsegm_BackgroundSubtractorMOG_getNoiseSigma(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_getNoiseSigma(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorMOG_setNoiseSigma, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorMOG_setNoiseSigma")]
		public static void bgsegm_BackgroundSubtractorMOG_setNoiseSigma(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorMOG_setNoiseSigma(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_createBackgroundSubtractorGMG, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_createBackgroundSubtractorGMG")]
		public static global::System.IntPtr bgsegm_createBackgroundSubtractorGMG(
					int initializationFrames, 
					double decisionThreshold)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_createBackgroundSubtractorGMG(
								initializationFrames, 
								decisionThreshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_Ptr_BackgroundSubtractorGMG_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_Ptr_BackgroundSubtractorGMG_delete")]
		public static void bgsegm_Ptr_BackgroundSubtractorGMG_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_Ptr_BackgroundSubtractorGMG_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_Ptr_BackgroundSubtractorGMG_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_Ptr_BackgroundSubtractorGMG_get")]
		public static global::System.IntPtr bgsegm_Ptr_BackgroundSubtractorGMG_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_Ptr_BackgroundSubtractorGMG_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getMaxFeatures, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getMaxFeatures")]
		public static int bgsegm_BackgroundSubtractorGMG_getMaxFeatures(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getMaxFeatures(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setMaxFeatures, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setMaxFeatures")]
		public static void bgsegm_BackgroundSubtractorGMG_setMaxFeatures(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setMaxFeatures(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate")]
		public static double bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate")]
		public static void bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getNumFrames, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getNumFrames")]
		public static int bgsegm_BackgroundSubtractorGMG_getNumFrames(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getNumFrames(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setNumFrames, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setNumFrames")]
		public static void bgsegm_BackgroundSubtractorGMG_setNumFrames(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setNumFrames(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getQuantizationLevels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getQuantizationLevels")]
		public static int bgsegm_BackgroundSubtractorGMG_getQuantizationLevels(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getQuantizationLevels(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setQuantizationLevels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setQuantizationLevels")]
		public static void bgsegm_BackgroundSubtractorGMG_setQuantizationLevels(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setQuantizationLevels(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getBackgroundPrior, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getBackgroundPrior")]
		public static double bgsegm_BackgroundSubtractorGMG_getBackgroundPrior(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getBackgroundPrior(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setBackgroundPrior, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setBackgroundPrior")]
		public static void bgsegm_BackgroundSubtractorGMG_setBackgroundPrior(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setBackgroundPrior(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getSmoothingRadius, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getSmoothingRadius")]
		public static int bgsegm_BackgroundSubtractorGMG_getSmoothingRadius(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getSmoothingRadius(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setSmoothingRadius, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setSmoothingRadius")]
		public static void bgsegm_BackgroundSubtractorGMG_setSmoothingRadius(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setSmoothingRadius(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getDecisionThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getDecisionThreshold")]
		public static double bgsegm_BackgroundSubtractorGMG_getDecisionThreshold(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getDecisionThreshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setDecisionThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setDecisionThreshold")]
		public static void bgsegm_BackgroundSubtractorGMG_setDecisionThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setDecisionThreshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel")]
		public static int bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel")]
		public static void bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getMinVal, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getMinVal")]
		public static double bgsegm_BackgroundSubtractorGMG_getMinVal(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getMinVal(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setMinVal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setMinVal")]
		public static void bgsegm_BackgroundSubtractorGMG_setMinVal(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setMinVal(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_getMaxVal, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_getMaxVal")]
		public static double bgsegm_BackgroundSubtractorGMG_getMaxVal(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_getMaxVal(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, bgsegm_BackgroundSubtractorGMG_setMaxVal, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "bgsegm_BackgroundSubtractorGMG_setMaxVal")]
		public static void bgsegm_BackgroundSubtractorGMG_setMaxVal(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.bgsegm_BackgroundSubtractorGMG_setMaxVal(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_Index_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_new")]
		public static global::System.IntPtr flann_Index_new(
					global::System.IntPtr features, 
					global::System.IntPtr @params, 
					int distType)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_new(
								features, 
								@params, 
								distType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_Index_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_delete")]
		public static void flann_Index_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_Index_knnSearch1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_knnSearch1")]
		public static void flann_Index_knnSearch1(
					global::System.IntPtr obj, 
					float[] queries, 
					int queriesLength, 
					int[] indices, 
					float[] dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			// Setup
			float* unsafe_queries;
			int* unsafe_indices;
			float* unsafe_dists;
			// Marshalling
			fixed (float* pinned_queries = global::McgInterop.McgCoreHelpers.GetArrayForCompat(queries))
			{
				unsafe_queries = (float*)pinned_queries;
				fixed (int* pinned_indices = global::McgInterop.McgCoreHelpers.GetArrayForCompat(indices))
				{
					unsafe_indices = (int*)pinned_indices;
					fixed (float* pinned_dists = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dists))
					{
						unsafe_dists = (float*)pinned_dists;
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_knnSearch1(
											obj, 
											unsafe_queries, 
											queriesLength, 
											unsafe_indices, 
											unsafe_dists, 
											knn, 
											@params
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
		}

		// Signature, flann_Index_knnSearch2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_knnSearch2")]
		public static void flann_Index_knnSearch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					global::System.IntPtr indices, 
					global::System.IntPtr dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_knnSearch2(
								obj, 
								queries, 
								indices, 
								dists, 
								knn, 
								@params
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_Index_knnSearch3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_knnSearch3")]
		public static void flann_Index_knnSearch3(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					int[] indices, 
					float[] dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			// Setup
			int* unsafe_indices;
			float* unsafe_dists;
			// Marshalling
			fixed (int* pinned_indices = global::McgInterop.McgCoreHelpers.GetArrayForCompat(indices))
			{
				unsafe_indices = (int*)pinned_indices;
				fixed (float* pinned_dists = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dists))
				{
					unsafe_dists = (float*)pinned_dists;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_knnSearch3(
										obj, 
										queries, 
										unsafe_indices, 
										unsafe_dists, 
										knn, 
										@params
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, flann_Index_radiusSearch1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_radiusSearch1")]
		public static void flann_Index_radiusSearch1(
					global::System.IntPtr obj, 
					float[] queries, 
					int queriesLength, 
					int[] indices, 
					int indicesLength, 
					float[] dists, 
					int dists_length, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			// Setup
			float* unsafe_queries;
			int* unsafe_indices;
			float* unsafe_dists;
			// Marshalling
			fixed (float* pinned_queries = global::McgInterop.McgCoreHelpers.GetArrayForCompat(queries))
			{
				unsafe_queries = (float*)pinned_queries;
				fixed (int* pinned_indices = global::McgInterop.McgCoreHelpers.GetArrayForCompat(indices))
				{
					unsafe_indices = (int*)pinned_indices;
					fixed (float* pinned_dists = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dists))
					{
						unsafe_dists = (float*)pinned_dists;
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_radiusSearch1(
											obj, 
											unsafe_queries, 
											queriesLength, 
											unsafe_indices, 
											indicesLength, 
											unsafe_dists, 
											dists_length, 
											radius, 
											maxResults, 
											@params
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
		}

		// Signature, flann_Index_radiusSearch2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_radiusSearch2")]
		public static void flann_Index_radiusSearch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					global::System.IntPtr indices, 
					global::System.IntPtr dists, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_radiusSearch2(
								obj, 
								queries, 
								indices, 
								dists, 
								radius, 
								maxResults, 
								@params
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_Index_radiusSearch3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_radiusSearch3")]
		public static void flann_Index_radiusSearch3(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					int[] indices, 
					int indicesLength, 
					float[] dists, 
					int distsLength, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			// Setup
			int* unsafe_indices;
			float* unsafe_dists;
			// Marshalling
			fixed (int* pinned_indices = global::McgInterop.McgCoreHelpers.GetArrayForCompat(indices))
			{
				unsafe_indices = (int*)pinned_indices;
				fixed (float* pinned_dists = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dists))
				{
					unsafe_dists = (float*)pinned_dists;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_radiusSearch3(
										obj, 
										queries, 
										unsafe_indices, 
										indicesLength, 
										unsafe_dists, 
										distsLength, 
										radius, 
										maxResults, 
										@params
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, flann_Index_save, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_Index_save")]
		public static void flann_Index_save(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_Index_save(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, flann_IndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_new")]
		public static global::System.IntPtr flann_IndexParams_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_IndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_delete")]
		public static void flann_IndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_IndexParams_getString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_getString")]
		public static void flann_IndexParams_getString(
					global::System.IntPtr obj, 
					string key, 
					string defaultVal, 
					global::System.Text.StringBuilder result)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			byte* unsafe_defaultVal = default(byte*);
			byte* unsafe_result = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				unsafe_defaultVal = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(defaultVal, false, true);
				if (result == null)
					unsafe_result = null;
				else
				{
					unsafe_result = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(result.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_result == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_result != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										result, 
										unsafe_result, 
										false, 
										true
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_getString(
									obj, 
									unsafe_key, 
									unsafe_defaultVal, 
									unsafe_result
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (result != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_result, 
										result
									);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_defaultVal);
				if (unsafe_result != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_result);
			}
		}

		// Signature, flann_IndexParams_getInt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_getInt")]
		public static int flann_IndexParams_getInt(
					global::System.IntPtr obj, 
					string key, 
					int defaultVal)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_getInt(
									obj, 
									unsafe_key, 
									defaultVal
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_getDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_getDouble")]
		public static double flann_IndexParams_getDouble(
					global::System.IntPtr obj, 
					string key, 
					double defaultVal)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			double unsafe___value;
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_getDouble(
									obj, 
									unsafe_key, 
									defaultVal
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_setString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setString")]
		public static void flann_IndexParams_setString(
					global::System.IntPtr obj, 
					string key, 
					string value)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			byte* unsafe_value = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setString(
									obj, 
									unsafe_key, 
									unsafe_value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, flann_IndexParams_setInt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setInt")]
		public static void flann_IndexParams_setInt(
					global::System.IntPtr obj, 
					string key, 
					int value)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setInt(
									obj, 
									unsafe_key, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_setDouble, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setDouble")]
		public static void flann_IndexParams_setDouble(
					global::System.IntPtr obj, 
					string key, 
					double value)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setDouble(
									obj, 
									unsafe_key, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_setFloat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setFloat")]
		public static void flann_IndexParams_setFloat(
					global::System.IntPtr obj, 
					string key, 
					float value)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setFloat(
									obj, 
									unsafe_key, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_setBool, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setBool")]
		public static void flann_IndexParams_setBool(
					global::System.IntPtr obj, 
					string key, 
					int value)
		{
			// Setup
			byte* unsafe_key = default(byte*);
			try
			{
				// Marshalling
				unsafe_key = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(key, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setBool(
									obj, 
									unsafe_key, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_key);
			}
		}

		// Signature, flann_IndexParams_setAlgorithm, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_IndexParams_setAlgorithm")]
		public static void flann_IndexParams_setAlgorithm(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_IndexParams_setAlgorithm(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_LinearIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_LinearIndexParams_new")]
		public static global::System.IntPtr flann_LinearIndexParams_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_LinearIndexParams_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_LinearIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_LinearIndexParams_delete")]
		public static void flann_LinearIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_LinearIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_KDTreeIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_KDTreeIndexParams_new")]
		public static global::System.IntPtr flann_KDTreeIndexParams_new(int trees)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_KDTreeIndexParams_new(trees);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_KDTreeIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_KDTreeIndexParams_delete")]
		public static void flann_KDTreeIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_KDTreeIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_KMeansIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] OpenCvSharp_Flann_FlannCentersInit__OpenCvSharp__FlannCentersInit__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_KMeansIndexParams_new")]
		public static global::System.IntPtr flann_KMeansIndexParams_new(
					int branching, 
					int iterations, 
					global::OpenCvSharp.Flann.FlannCentersInit__OpenCvSharp centers_init, 
					float cb_index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_KMeansIndexParams_new(
								branching, 
								iterations, 
								centers_init, 
								cb_index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_KMeansIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_KMeansIndexParams_delete")]
		public static void flann_KMeansIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_KMeansIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_CompositeIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] OpenCvSharp_Flann_FlannCentersInit__OpenCvSharp__FlannCentersInit__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_CompositeIndexParams_new")]
		public static global::System.IntPtr flann_CompositeIndexParams_new(
					int trees, 
					int branching, 
					int iterations, 
					global::OpenCvSharp.Flann.FlannCentersInit__OpenCvSharp centers_init, 
					float cb_index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_CompositeIndexParams_new(
								trees, 
								branching, 
								iterations, 
								centers_init, 
								cb_index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_CompositeIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_CompositeIndexParams_delete")]
		public static void flann_CompositeIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_CompositeIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_AutotunedIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_AutotunedIndexParams_new")]
		public static global::System.IntPtr flann_AutotunedIndexParams_new(
					float targetPrecision, 
					float build_weight, 
					float memory_weight, 
					float sample_fraction)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_AutotunedIndexParams_new(
								targetPrecision, 
								build_weight, 
								memory_weight, 
								sample_fraction
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_AutotunedIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_AutotunedIndexParams_delete")]
		public static void flann_AutotunedIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_AutotunedIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_SavedIndexParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_SavedIndexParams_new")]
		public static global::System.IntPtr flann_SavedIndexParams_new(string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_SavedIndexParams_new(unsafe_filename);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, flann_SavedIndexParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_SavedIndexParams_delete")]
		public static void flann_SavedIndexParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_SavedIndexParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, flann_SearchParams_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_SearchParams_new")]
		public static global::System.IntPtr flann_SearchParams_new(
					int checks, 
					float eps, 
					int sorted)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.flann_SearchParams_new(
								checks, 
								eps, 
								sorted
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, flann_SearchParams_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "flann_SearchParams_delete")]
		public static void flann_SearchParams_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.flann_SearchParams_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, highgui_namedWindow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_namedWindow")]
		public static void highgui_namedWindow(
					string winname, 
					int flags)
		{
			// Setup
			byte* unsafe_winname = default(byte*);
			try
			{
				// Marshalling
				unsafe_winname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winname, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_namedWindow(
									unsafe_winname, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winname);
			}
		}

		// Signature, highgui_destroyWindow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_destroyWindow")]
		public static void highgui_destroyWindow(string winName)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_destroyWindow(unsafe_winName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_destroyAllWindows, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_destroyAllWindows")]
		public static void highgui_destroyAllWindows()
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_destroyAllWindows();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, highgui_imshow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_imshow")]
		public static void highgui_imshow(
					string winname, 
					global::System.IntPtr mat)
		{
			// Setup
			byte* unsafe_winname = default(byte*);
			try
			{
				// Marshalling
				unsafe_winname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winname, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_imshow(
									unsafe_winname, 
									mat
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winname);
			}
		}

		// Signature, highgui_startWindowThread, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_startWindowThread")]
		public static int highgui_startWindowThread()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_startWindowThread();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, highgui_waitKey, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_waitKey")]
		public static int highgui_waitKey(int delay)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_waitKey(delay);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, highgui_resizeWindow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_resizeWindow")]
		public static void highgui_resizeWindow(
					string winName, 
					int width, 
					int height)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_resizeWindow(
									unsafe_winName, 
									width, 
									height
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_moveWindow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_moveWindow")]
		public static void highgui_moveWindow(
					string winName, 
					int x, 
					int y)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_moveWindow(
									unsafe_winName, 
									x, 
									y
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_setWindowProperty, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_setWindowProperty")]
		public static void highgui_setWindowProperty(
					string winName, 
					int propId, 
					double propValue)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_setWindowProperty(
									unsafe_winName, 
									propId, 
									propValue
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_setWindowTitle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_setWindowTitle")]
		public static void highgui_setWindowTitle(
					string winname, 
					string title)
		{
			// Setup
			byte* unsafe_winname = default(byte*);
			byte* unsafe_title = default(byte*);
			try
			{
				// Marshalling
				unsafe_winname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winname, false, true);
				unsafe_title = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(title, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_setWindowTitle(
									unsafe_winname, 
									unsafe_title
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winname);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_title);
			}
		}

		// Signature, highgui_getWindowProperty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_getWindowProperty")]
		public static double highgui_getWindowProperty(
					string winName, 
					int propId)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			double unsafe___value;
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_getWindowProperty(
									unsafe_winName, 
									propId
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_setMouseCallback, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_CvMouseCallback__OpenCvSharp__OpenCvSharp__CvMouseCallback__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_setMouseCallback")]
		public static void highgui_setMouseCallback(
					string winName, 
					global::OpenCvSharp.CvMouseCallback__OpenCvSharp onMouse, 
					global::System.IntPtr userData)
		{
			// Setup
			byte* unsafe_winName = default(byte*);
			void* unsafe_onMouse = default(void*);
			try
			{
				// Marshalling
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				unsafe_onMouse = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.CvMouseCallback,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099"), 
									onMouse
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_setMouseCallback(
									unsafe_winName, 
									unsafe_onMouse, 
									userData
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
				global::System.GC.KeepAlive(onMouse);
			}
		}

		// Signature, highgui_createTrackbar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_createTrackbar")]
		public static int highgui_createTrackbar(
					string trackbarName, 
					string winName, 
					ref int value, 
					int count, 
					global::System.IntPtr onChange, 
					global::System.IntPtr userData)
		{
			// Setup
			byte* unsafe_trackbarName = default(byte*);
			byte* unsafe_winName = default(byte*);
			int unsafe_value;
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_trackbarName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(trackbarName, false, true);
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				unsafe_value = value;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_createTrackbar(
									unsafe_trackbarName, 
									unsafe_winName, 
									&(unsafe_value), 
									count, 
									onChange, 
									userData
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				value = unsafe_value;
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_trackbarName);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_getTrackbarPos, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_getTrackbarPos")]
		public static int highgui_getTrackbarPos(
					string trackbarName, 
					string winName)
		{
			// Setup
			byte* unsafe_trackbarName = default(byte*);
			byte* unsafe_winName = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_trackbarName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(trackbarName, false, true);
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_getTrackbarPos(
									unsafe_trackbarName, 
									unsafe_winName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_trackbarName);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_setTrackbarPos, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_setTrackbarPos")]
		public static void highgui_setTrackbarPos(
					string trackbarName, 
					string winName, 
					int pos)
		{
			// Setup
			byte* unsafe_trackbarName = default(byte*);
			byte* unsafe_winName = default(byte*);
			try
			{
				// Marshalling
				unsafe_trackbarName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(trackbarName, false, true);
				unsafe_winName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(winName, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_setTrackbarPos(
									unsafe_trackbarName, 
									unsafe_winName, 
									pos
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_trackbarName);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_winName);
			}
		}

		// Signature, highgui_createButton, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "highgui_createButton")]
		public static int highgui_createButton(
					string barName, 
					global::System.IntPtr onChange, 
					global::System.IntPtr userdata, 
					int type, 
					int initialButtonState)
		{
			// Setup
			byte* unsafe_barName = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_barName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(barName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.highgui_createButton(
									unsafe_barName, 
									onChange, 
									userdata, 
									type, 
									initialButtonState
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_barName);
			}
		}

		// Signature, imgcodecs_imread, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imread")]
		public static global::System.IntPtr imgcodecs_imread(
					string filename, 
					int flags)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imread(
									unsafe_filename, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, imgcodecs_imreadmulti, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imreadmulti")]
		public static int imgcodecs_imreadmulti(
					string filename, 
					global::System.IntPtr mats, 
					int flags)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imreadmulti(
									unsafe_filename, 
									mats, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, imgcodecs_imwrite, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imwrite")]
		public static int imgcodecs_imwrite(
					string filename, 
					global::System.IntPtr img, 
					int[] @params, 
					int paramsLength)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int* unsafe_params;
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				fixed (int* pinned_params = global::McgInterop.McgCoreHelpers.GetArrayForCompat(@params))
				{
					unsafe_params = (int*)pinned_params;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imwrite(
										unsafe_filename, 
										img, 
										unsafe_params, 
										paramsLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, imgcodecs_imdecode_Mat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imdecode_Mat")]
		public static global::System.IntPtr imgcodecs_imdecode_Mat(
					global::System.IntPtr buf, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imdecode_Mat(
								buf, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgcodecs_imdecode_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imdecode_vector")]
		public static global::System.IntPtr imgcodecs_imdecode_vector(
					byte[] buf, 
					global::System.IntPtr bufLength, 
					int flags)
		{
			// Setup
			byte* unsafe_buf;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_buf = global::McgInterop.McgCoreHelpers.GetArrayForCompat(buf))
			{
				unsafe_buf = (byte*)pinned_buf;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imdecode_vector(
									unsafe_buf, 
									bufLength, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, imgcodecs_imdecode_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imdecode_InputArray")]
		public static global::System.IntPtr imgcodecs_imdecode_InputArray(
					global::System.IntPtr buf, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imdecode_InputArray(
								buf, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgcodecs_imencode_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_imencode_vector")]
		public static int imgcodecs_imencode_vector(
					string ext, 
					global::System.IntPtr img, 
					global::System.IntPtr buf, 
					int[] @params, 
					int paramsLength)
		{
			// Setup
			byte* unsafe_ext = default(byte*);
			int* unsafe_params;
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_ext = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(ext, false, true);
				fixed (int* pinned_params = global::McgInterop.McgCoreHelpers.GetArrayForCompat(@params))
				{
					unsafe_params = (int*)pinned_params;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_imencode_vector(
										unsafe_ext, 
										img, 
										buf, 
										unsafe_params, 
										paramsLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_ext);
			}
		}

		// Signature, imgcodecs_cvConvertImage_CvArr, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_cvConvertImage_CvArr")]
		public static void imgcodecs_cvConvertImage_CvArr(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_cvConvertImage_CvArr(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgcodecs_cvConvertImage_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_cvConvertImage_Mat")]
		public static void imgcodecs_cvConvertImage_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_cvConvertImage_Mat(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgcodecs_cvHaveImageReader, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_cvHaveImageReader")]
		public static int imgcodecs_cvHaveImageReader(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_cvHaveImageReader(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, imgcodecs_cvHaveImageWriter, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgcodecs_cvHaveImageWriter")]
		public static int imgcodecs_cvHaveImageWriter(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgcodecs_cvHaveImageWriter(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, objdetect_LatentSvmDetector_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_new")]
		public static global::System.IntPtr objdetect_LatentSvmDetector_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_LatentSvmDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_delete")]
		public static void objdetect_LatentSvmDetector_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_LatentSvmDetector_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_clear")]
		public static void objdetect_LatentSvmDetector_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_LatentSvmDetector_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_empty")]
		public static int objdetect_LatentSvmDetector_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_LatentSvmDetector_load, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_load")]
		public static int objdetect_LatentSvmDetector_load(
					global::System.IntPtr obj, 
					global::System.IntPtr[] fileNames, 
					int fileNamesLength, 
					global::System.IntPtr[] classNames, 
					int classNamesLength)
		{
			// Setup
			global::System.IntPtr* unsafe_fileNames;
			global::System.IntPtr* unsafe_classNames;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_fileNames = global::McgInterop.McgCoreHelpers.GetArrayForCompat(fileNames))
			{
				unsafe_fileNames = (global::System.IntPtr*)pinned_fileNames;
				fixed (global::System.IntPtr* pinned_classNames = global::McgInterop.McgCoreHelpers.GetArrayForCompat(classNames))
				{
					unsafe_classNames = (global::System.IntPtr*)pinned_classNames;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_load(
										obj, 
										unsafe_fileNames, 
										fileNamesLength, 
										unsafe_classNames, 
										classNamesLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_LatentSvmDetector_detect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_detect")]
		public static void objdetect_LatentSvmDetector_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectDetections, 
					float overlapThreshold, 
					int numThreads)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_detect(
								obj, 
								image, 
								objectDetections, 
								overlapThreshold, 
								numThreads
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_LatentSvmDetector_getClassNames, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_getClassNames")]
		public static void objdetect_LatentSvmDetector_getClassNames(
					global::System.IntPtr obj, 
					global::System.IntPtr outValues)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_getClassNames(
								obj, 
								outValues
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_LatentSvmDetector_getClassCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_LatentSvmDetector_getClassCount")]
		public static global::System.IntPtr objdetect_LatentSvmDetector_getClassCount(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_LatentSvmDetector_getClassCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_CascadeClassifier_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_new")]
		public static global::System.IntPtr objdetect_CascadeClassifier_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_CascadeClassifier_newFromFile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_newFromFile")]
		public static global::System.IntPtr objdetect_CascadeClassifier_newFromFile(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_newFromFile(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, objdetect_CascadeClassifier_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_delete")]
		public static void objdetect_CascadeClassifier_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_CascadeClassifier_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_empty")]
		public static int objdetect_CascadeClassifier_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_CascadeClassifier_load, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_load")]
		public static int objdetect_CascadeClassifier_load(
					global::System.IntPtr obj, 
					string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_load(
									obj, 
									unsafe_fileName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, objdetect_CascadeClassifier_detectMultiScale1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_detectMultiScale1")]
		public static void objdetect_CascadeClassifier_detectMultiScale1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objects, 
					double scaleFactor, 
					int minNeighbors, 
					int flags, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					global::OpenCvSharp.Size__OpenCvSharp maxSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_detectMultiScale1(
								obj, 
								image, 
								objects, 
								scaleFactor, 
								minNeighbors, 
								flags, 
								minSize, 
								maxSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_CascadeClassifier_detectMultiScale2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_detectMultiScale2")]
		public static void objdetect_CascadeClassifier_detectMultiScale2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objects, 
					global::System.IntPtr rejectLevels, 
					global::System.IntPtr levelWeights, 
					double scaleFactor, 
					int minNeighbors, 
					int flags, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					global::OpenCvSharp.Size__OpenCvSharp maxSize, 
					int outputRejectLevels)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_detectMultiScale2(
								obj, 
								image, 
								objects, 
								rejectLevels, 
								levelWeights, 
								scaleFactor, 
								minNeighbors, 
								flags, 
								minSize, 
								maxSize, 
								outputRejectLevels
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_CascadeClassifier_isOldFormatCascade, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_isOldFormatCascade")]
		public static int objdetect_CascadeClassifier_isOldFormatCascade(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_isOldFormatCascade(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_CascadeClassifier_getOriginalWindowSize, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_getOriginalWindowSize")]
		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_CascadeClassifier_getOriginalWindowSize(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_getOriginalWindowSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_CascadeClassifier_getFeatureType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_CascadeClassifier_getFeatureType")]
		public static int objdetect_CascadeClassifier_getFeatureType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_CascadeClassifier_getFeatureType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_sizeof, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_sizeof")]
		public static int objdetect_HOGDescriptor_sizeof()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_sizeof();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_new1")]
		public static global::System.IntPtr objdetect_HOGDescriptor_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] OpenCvSharp_HistogramNormType__OpenCvSharp__HistogramNormType__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_new2")]
		public static global::System.IntPtr objdetect_HOGDescriptor_new2(
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					global::OpenCvSharp.Size__OpenCvSharp blockSize, 
					global::OpenCvSharp.Size__OpenCvSharp blockStride, 
					global::OpenCvSharp.Size__OpenCvSharp cellSize, 
					int nbins, 
					int derivAperture, 
					double winSigma, 
					global::OpenCvSharp.HistogramNormType__OpenCvSharp histogramNormType, 
					double l2HysThreshold, 
					int gammaCorrection, 
					int nlevels)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_new2(
								winSize, 
								blockSize, 
								blockStride, 
								cellSize, 
								nbins, 
								derivAperture, 
								winSigma, 
								histogramNormType, 
								l2HysThreshold, 
								gammaCorrection, 
								nlevels
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_new3")]
		public static global::System.IntPtr objdetect_HOGDescriptor_new3(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_new3(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, objdetect_HOGDescriptor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_delete")]
		public static void objdetect_HOGDescriptor_delete(global::System.IntPtr self)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_delete(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_getDescriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_getDescriptorSize")]
		public static global::System.IntPtr objdetect_HOGDescriptor_getDescriptorSize(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_getDescriptorSize(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_checkDetectorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_checkDetectorSize")]
		public static int objdetect_HOGDescriptor_checkDetectorSize(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_checkDetectorSize(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_getWinSigma, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_getWinSigma")]
		public static double objdetect_HOGDescriptor_getWinSigma(global::System.IntPtr self)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_getWinSigma(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_setSVMDetector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_setSVMDetector")]
		public static void objdetect_HOGDescriptor_setSVMDetector(
					global::System.IntPtr self, 
					global::System.IntPtr svmdetector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_setSVMDetector(
								self, 
								svmdetector
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_load, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_load")]
		public static bool objdetect_HOGDescriptor_load(
					global::System.IntPtr self, 
					string filename, 
					string objname)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			byte* unsafe_objname = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				unsafe_objname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(objname, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_load(
									self, 
									unsafe_filename, 
									unsafe_objname
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value != 0;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_objname);
			}
		}

		// Signature, objdetect_HOGDescriptor_save, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_save")]
		public static void objdetect_HOGDescriptor_save(
					global::System.IntPtr self, 
					string filename, 
					string objname)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			byte* unsafe_objname = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, false, true);
				unsafe_objname = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(objname, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_save(
									self, 
									unsafe_filename, 
									unsafe_objname
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_objname);
			}
		}

		// Signature, objdetect_HOGDescriptor_compute, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_compute")]
		public static void objdetect_HOGDescriptor_compute(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr descriptors, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp[] locations, 
					int locationsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_locations = default(global::OpenCvSharp.Point__OpenCvSharp*);
			try
			{
				// Marshalling
				if (locations == null)
					unsafe_locations = null;
				else
				{
					if (locations != null)
						unsafe_locations = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(locations.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (locations != null)
						for (uint mcgIdx = 0; (mcgIdx < locations.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp locations
							unsafe_locations[mcgIdx] = locations[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_compute(
									self, 
									img, 
									descriptors, 
									winStride, 
									padding, 
									unsafe_locations, 
									locationsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_locations);
			}
		}

		// Signature, objdetect_HOGDescriptor_detect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detect")]
		public static void objdetect_HOGDescriptor_detect(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp[] searchLocations, 
					int searchLocationsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_searchLocations = default(global::OpenCvSharp.Point__OpenCvSharp*);
			try
			{
				// Marshalling
				if (searchLocations == null)
					unsafe_searchLocations = null;
				else
				{
					if (searchLocations != null)
						unsafe_searchLocations = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(searchLocations.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (searchLocations != null)
						for (uint mcgIdx = 0; (mcgIdx < searchLocations.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp searchLocations
							unsafe_searchLocations[mcgIdx] = searchLocations[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detect(
									self, 
									img, 
									foundLocations, 
									hitThreshold, 
									winStride, 
									padding, 
									unsafe_searchLocations, 
									searchLocationsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_searchLocations);
			}
		}

		// Signature, objdetect_HOGDescriptor_detect__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detect")]
		public static void objdetect_HOGDescriptor_detect__0(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr weights, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp[] searchLocations, 
					int searchLocationsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_searchLocations = default(global::OpenCvSharp.Point__OpenCvSharp*);
			try
			{
				// Marshalling
				if (searchLocations == null)
					unsafe_searchLocations = null;
				else
				{
					if (searchLocations != null)
						unsafe_searchLocations = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(searchLocations.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (searchLocations != null)
						for (uint mcgIdx = 0; (mcgIdx < searchLocations.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp searchLocations
							unsafe_searchLocations[mcgIdx] = searchLocations[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detect__0(
									self, 
									img, 
									foundLocations, 
									weights, 
									hitThreshold, 
									winStride, 
									padding, 
									unsafe_searchLocations, 
									searchLocationsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_searchLocations);
			}
		}

		// Signature, objdetect_HOGDescriptor_detectMultiScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detectMultiScale")]
		public static void objdetect_HOGDescriptor_detectMultiScale(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int groupThreshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detectMultiScale(
								self, 
								img, 
								foundLocations, 
								hitThreshold, 
								winStride, 
								padding, 
								scale, 
								groupThreshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_detectMultiScale__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detectMultiScale")]
		public static void objdetect_HOGDescriptor_detectMultiScale__0(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr foundWeights, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int groupThreshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detectMultiScale__0(
								self, 
								img, 
								foundLocations, 
								foundWeights, 
								hitThreshold, 
								winStride, 
								padding, 
								scale, 
								groupThreshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_computeGradient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_computeGradient")]
		public static void objdetect_HOGDescriptor_computeGradient(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr grad, 
					global::System.IntPtr angleOfs, 
					global::OpenCvSharp.Size__OpenCvSharp paddingTL, 
					global::OpenCvSharp.Size__OpenCvSharp paddingBR)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_computeGradient(
								self, 
								img, 
								grad, 
								angleOfs, 
								paddingTL, 
								paddingBR
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_detectROI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detectROI")]
		public static void objdetect_HOGDescriptor_detectROI(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp[] locations, 
					int locationsLength, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr confidences, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_locations = default(global::OpenCvSharp.Point__OpenCvSharp*);
			try
			{
				// Marshalling
				if (locations == null)
					unsafe_locations = null;
				else
				{
					if (locations != null)
						unsafe_locations = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(locations.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (locations != null)
						for (uint mcgIdx = 0; (mcgIdx < locations.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp locations
							unsafe_locations[mcgIdx] = locations[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detectROI(
									obj, 
									img, 
									unsafe_locations, 
									locationsLength, 
									foundLocations, 
									confidences, 
									hitThreshold, 
									winStride, 
									padding
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_locations);
			}
		}

		// Signature, objdetect_HOGDescriptor_detectMultiScaleROI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_detectMultiScaleROI")]
		public static void objdetect_HOGDescriptor_detectMultiScaleROI(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr roiScales, 
					global::System.IntPtr roiLocations, 
					global::System.IntPtr roiConfidences, 
					double hitThreshold, 
					int groupThreshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_detectMultiScaleROI(
								obj, 
								img, 
								foundLocations, 
								roiScales, 
								roiLocations, 
								roiConfidences, 
								hitThreshold, 
								groupThreshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_readALTModel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_readALTModel")]
		public static void objdetect_HOGDescriptor_readALTModel(
					global::System.IntPtr obj, 
					string modelfile)
		{
			// Setup
			byte* unsafe_modelfile = default(byte*);
			try
			{
				// Marshalling
				unsafe_modelfile = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(modelfile, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_readALTModel(
									obj, 
									unsafe_modelfile
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_modelfile);
			}
		}

		// Signature, objdetect_HOGDescriptor_groupRectangles, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_groupRectangles")]
		public static void objdetect_HOGDescriptor_groupRectangles(
					global::System.IntPtr obj, 
					global::System.IntPtr rectList, 
					global::System.IntPtr weights, 
					int groupThreshold, 
					double eps)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_groupRectangles(
								obj, 
								rectList, 
								weights, 
								groupThreshold, 
								eps
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_winSize_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_winSize_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_winSize_get(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_winSize_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_blockSize_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_blockSize_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_blockSize_get(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_blockSize_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_blockStride_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_blockStride_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_blockStride_get(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_blockStride_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_cellSize_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_cellSize_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_cellSize_get(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_cellSize_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_nbins_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_nbins_get")]
		public static int objdetect_HOGDescriptor_nbins_get(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_nbins_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_derivAperture_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_derivAperture_get")]
		public static int objdetect_HOGDescriptor_derivAperture_get(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_derivAperture_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_winSigma_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_winSigma_get")]
		public static double objdetect_HOGDescriptor_winSigma_get(global::System.IntPtr self)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_winSigma_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_histogramNormType_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_histogramNormType_get")]
		public static int objdetect_HOGDescriptor_histogramNormType_get(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_histogramNormType_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_L2HysThreshold_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_L2HysThreshold_get")]
		public static double objdetect_HOGDescriptor_L2HysThreshold_get(global::System.IntPtr self)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_L2HysThreshold_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_gammaCorrection_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_gammaCorrection_get")]
		public static int objdetect_HOGDescriptor_gammaCorrection_get(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_gammaCorrection_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_nlevels_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_nlevels_get")]
		public static int objdetect_HOGDescriptor_nlevels_get(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_nlevels_get(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, objdetect_HOGDescriptor_winSize_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_winSize_set")]
		public static void objdetect_HOGDescriptor_winSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_winSize_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_blockSize_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_blockSize_set")]
		public static void objdetect_HOGDescriptor_blockSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_blockSize_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_blockStride_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_blockStride_set")]
		public static void objdetect_HOGDescriptor_blockStride_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_blockStride_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_cellSize_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_cellSize_set")]
		public static void objdetect_HOGDescriptor_cellSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_cellSize_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_nbins_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_nbins_set")]
		public static void objdetect_HOGDescriptor_nbins_set(
					global::System.IntPtr self, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_nbins_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_derivAperture_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_derivAperture_set")]
		public static void objdetect_HOGDescriptor_derivAperture_set(
					global::System.IntPtr self, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_derivAperture_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_winSigma_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_winSigma_set")]
		public static void objdetect_HOGDescriptor_winSigma_set(
					global::System.IntPtr self, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_winSigma_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_histogramNormType_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_histogramNormType_set")]
		public static void objdetect_HOGDescriptor_histogramNormType_set(
					global::System.IntPtr self, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_histogramNormType_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_L2HysThreshold_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_L2HysThreshold_set")]
		public static void objdetect_HOGDescriptor_L2HysThreshold_set(
					global::System.IntPtr self, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_L2HysThreshold_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_gammaCorrection_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_gammaCorrection_set")]
		public static void objdetect_HOGDescriptor_gammaCorrection_set(
					global::System.IntPtr self, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_gammaCorrection_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_HOGDescriptor_nlevels_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_HOGDescriptor_nlevels_set")]
		public static void objdetect_HOGDescriptor_nlevels_set(
					global::System.IntPtr self, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_HOGDescriptor_nlevels_set(
								self, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_groupRectangles1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_groupRectangles1")]
		public static void objdetect_groupRectangles1(
					global::System.IntPtr rectList, 
					int groupThreshold, 
					double eps)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_groupRectangles1(
								rectList, 
								groupThreshold, 
								eps
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_groupRectangles2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_groupRectangles2")]
		public static void objdetect_groupRectangles2(
					global::System.IntPtr rectList, 
					global::System.IntPtr weights, 
					int groupThreshold, 
					double eps)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_groupRectangles2(
								rectList, 
								weights, 
								groupThreshold, 
								eps
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_groupRectangles3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_groupRectangles3")]
		public static void objdetect_groupRectangles3(
					global::System.IntPtr rectList, 
					int groupThreshold, 
					double eps, 
					global::System.IntPtr weights, 
					global::System.IntPtr levelWeights)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_groupRectangles3(
								rectList, 
								groupThreshold, 
								eps, 
								weights, 
								levelWeights
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_groupRectangles4, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_groupRectangles4")]
		public static void objdetect_groupRectangles4(
					global::System.IntPtr rectList, 
					global::System.IntPtr rejectLevels, 
					global::System.IntPtr levelWeights, 
					int groupThreshold, 
					double eps)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_groupRectangles4(
								rectList, 
								rejectLevels, 
								levelWeights, 
								groupThreshold, 
								eps
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, objdetect_groupRectangles_meanshift, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "objdetect_groupRectangles_meanshift")]
		public static void objdetect_groupRectangles_meanshift(
					global::System.IntPtr rectList, 
					global::System.IntPtr foundWeights, 
					global::System.IntPtr foundScales, 
					double detectThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winDetSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.objdetect_groupRectangles_meanshift(
								rectList, 
								foundWeights, 
								foundScales, 
								detectThreshold, 
								winDetSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, optflow_motempl_updateMotionHistory, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_motempl_updateMotionHistory")]
		public static void optflow_motempl_updateMotionHistory(
					global::System.IntPtr silhouette, 
					global::System.IntPtr mhi, 
					double timestamp, 
					double duration)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_motempl_updateMotionHistory(
								silhouette, 
								mhi, 
								timestamp, 
								duration
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, optflow_motempl_calcMotionGradient, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_motempl_calcMotionGradient")]
		public static void optflow_motempl_calcMotionGradient(
					global::System.IntPtr mhi, 
					global::System.IntPtr mask, 
					global::System.IntPtr orientation, 
					double delta1, 
					double delta2, 
					int apertureSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_motempl_calcMotionGradient(
								mhi, 
								mask, 
								orientation, 
								delta1, 
								delta2, 
								apertureSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, optflow_motempl_calcGlobalOrientation, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_motempl_calcGlobalOrientation")]
		public static double optflow_motempl_calcGlobalOrientation(
					global::System.IntPtr orientation, 
					global::System.IntPtr mask, 
					global::System.IntPtr mhi, 
					double timestamp, 
					double duration)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_motempl_calcGlobalOrientation(
								orientation, 
								mask, 
								mhi, 
								timestamp, 
								duration
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, optflow_motempl_segmentMotion, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_motempl_segmentMotion")]
		public static void optflow_motempl_segmentMotion(
					global::System.IntPtr mhi, 
					global::System.IntPtr segmask, 
					global::System.IntPtr boundingRects, 
					double timestamp, 
					double segThresh)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_motempl_segmentMotion(
								mhi, 
								segmask, 
								boundingRects, 
								timestamp, 
								segThresh
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, optflow_calcOpticalFlowSF1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_calcOpticalFlowSF1")]
		public static void optflow_calcOpticalFlowSF1(
					global::System.IntPtr from, 
					global::System.IntPtr to, 
					global::System.IntPtr flow, 
					int layers, 
					int averagingBlockSize, 
					int maxFlow)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_calcOpticalFlowSF1(
								from, 
								to, 
								flow, 
								layers, 
								averagingBlockSize, 
								maxFlow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, optflow_calcOpticalFlowSF2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "optflow_calcOpticalFlowSF2")]
		public static void optflow_calcOpticalFlowSF2(
					global::System.IntPtr from, 
					global::System.IntPtr to, 
					global::System.IntPtr flow, 
					int layers, 
					int averagingBlockSize, 
					int maxFlow, 
					double sigmaDist, 
					double sigmaColor, 
					int postprocessWindow, 
					double sigmaDistFix, 
					double sigmaColorFix, 
					double occThr, 
					int upscaleAveragingRadius, 
					double upscaleSigmaDist, 
					double upscaleSigmaColor, 
					double speedUpThr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.optflow_calcOpticalFlowSF2(
								from, 
								to, 
								flow, 
								layers, 
								averagingBlockSize, 
								maxFlow, 
								sigmaDist, 
								sigmaColor, 
								postprocessWindow, 
								sigmaDistFix, 
								sigmaColorFix, 
								occThr, 
								upscaleAveragingRadius, 
								upscaleSigmaDist, 
								upscaleSigmaColor, 
								speedUpThr
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_uchar_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_new1")]
		public static global::System.IntPtr vector_uchar_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_uchar_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_new2")]
		public static global::System.IntPtr vector_uchar_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_uchar_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_new3")]
		public static global::System.IntPtr vector_uchar_new3(
					byte[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			byte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (byte*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_uchar_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_getSize")]
		public static global::System.IntPtr vector_uchar_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_uchar_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_getPointer")]
		public static global::System.IntPtr vector_uchar_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_uchar_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_uchar_copy")]
		public static void vector_vector_uchar_copy(
					global::System.IntPtr vector, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_uchar_copy(
								vector, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_uchar_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_uchar_delete")]
		public static void vector_uchar_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_uchar_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_char_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_new1")]
		public static global::System.IntPtr vector_char_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_char_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_new2")]
		public static global::System.IntPtr vector_char_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_char_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_sbyte__char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_new3")]
		public static global::System.IntPtr vector_char_new3(
					sbyte[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			sbyte* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (sbyte* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (sbyte*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_char_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_getSize")]
		public static global::System.IntPtr vector_char_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_char_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_getPointer")]
		public static global::System.IntPtr vector_char_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_char_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_char_copy")]
		public static void vector_vector_char_copy(
					global::System.IntPtr vector, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_char_copy(
								vector, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_char_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_char_delete")]
		public static void vector_char_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_char_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_int32_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_new1")]
		public static global::System.IntPtr vector_int32_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_int32_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_new2")]
		public static global::System.IntPtr vector_int32_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_int32_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_new3")]
		public static global::System.IntPtr vector_int32_new3(
					int[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			int* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (int*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_int32_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_getSize")]
		public static global::System.IntPtr vector_int32_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_int32_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_getPointer")]
		public static global::System.IntPtr vector_int32_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_int32_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_int32_delete")]
		public static void vector_int32_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_int32_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_float_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_new1")]
		public static global::System.IntPtr vector_float_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_float_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_new2")]
		public static global::System.IntPtr vector_float_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_float_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_new3")]
		public static global::System.IntPtr vector_float_new3(
					float[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			float* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (float* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (float*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_float_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_getSize")]
		public static global::System.IntPtr vector_float_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_float_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_getPointer")]
		public static global::System.IntPtr vector_float_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_float_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_float_delete")]
		public static void vector_float_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_float_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_double_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_new1")]
		public static global::System.IntPtr vector_double_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_double_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_new2")]
		public static global::System.IntPtr vector_double_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_double_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_new3")]
		public static global::System.IntPtr vector_double_new3(
					double[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			double* unsafe_data;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (double* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (double*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_double_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_getSize")]
		public static global::System.IntPtr vector_double_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_double_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_getPointer")]
		public static global::System.IntPtr vector_double_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_double_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_double_delete")]
		public static void vector_double_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_double_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec2f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_new1")]
		public static global::System.IntPtr vector_Vec2f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec2f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_new2")]
		public static global::System.IntPtr vector_Vec2f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec2f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_new3")]
		public static global::System.IntPtr vector_Vec2f_new3(
					global::OpenCvSharp.Vec2f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec2f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec2f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec2f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec2f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_getSize")]
		public static global::System.IntPtr vector_Vec2f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec2f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_getPointer")]
		public static global::System.IntPtr vector_Vec2f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec2f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec2f_delete")]
		public static void vector_Vec2f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec2f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec3f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_new1")]
		public static global::System.IntPtr vector_Vec3f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec3f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_new2")]
		public static global::System.IntPtr vector_Vec3f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec3f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_new3")]
		public static global::System.IntPtr vector_Vec3f_new3(
					global::OpenCvSharp.Vec3f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec3f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec3f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec3f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec3f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_getSize")]
		public static global::System.IntPtr vector_Vec3f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec3f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_getPointer")]
		public static global::System.IntPtr vector_Vec3f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec3f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec3f_delete")]
		public static void vector_Vec3f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec3f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec4f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_new1")]
		public static global::System.IntPtr vector_Vec4f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_new2")]
		public static global::System.IntPtr vector_Vec4f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_new3")]
		public static global::System.IntPtr vector_Vec4f_new3(
					global::OpenCvSharp.Vec4f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec4f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_getSize")]
		public static global::System.IntPtr vector_Vec4f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_getPointer")]
		public static global::System.IntPtr vector_Vec4f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4f_delete")]
		public static void vector_Vec4f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec4i_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_new1")]
		public static global::System.IntPtr vector_Vec4i_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4i_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_new2")]
		public static global::System.IntPtr vector_Vec4i_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4i_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_new3")]
		public static global::System.IntPtr vector_Vec4i_new3(
					global::OpenCvSharp.Vec4i__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec4i_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_getSize")]
		public static global::System.IntPtr vector_Vec4i_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4i_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_getPointer")]
		public static global::System.IntPtr vector_Vec4i_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec4i_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec4i_delete")]
		public static void vector_Vec4i_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec4i_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec6f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_new1")]
		public static global::System.IntPtr vector_Vec6f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_new2")]
		public static global::System.IntPtr vector_Vec6f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_new3")]
		public static global::System.IntPtr vector_Vec6f_new3(
					global::OpenCvSharp.Vec6f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec6f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec6f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec6f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec6f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec6f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_getSize")]
		public static global::System.IntPtr vector_Vec6f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_getPointer")]
		public static global::System.IntPtr vector_Vec6f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6f_delete")]
		public static void vector_Vec6f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Vec6d_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_new1")]
		public static global::System.IntPtr vector_Vec6d_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6d_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_new2")]
		public static global::System.IntPtr vector_Vec6d_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6d_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6d__OpenCvSharp__OpenCvSharp__Vec6d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_new3")]
		public static global::System.IntPtr vector_Vec6d_new3(
					global::OpenCvSharp.Vec6d__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Vec6d__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Vec6d__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Vec6d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Vec6d__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6d__OpenCvSharp__OpenCvSharp__Vec6d__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Vec6d_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_getSize")]
		public static global::System.IntPtr vector_Vec6d_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6d_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_getPointer")]
		public static global::System.IntPtr vector_Vec6d_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Vec6d_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Vec6d_delete")]
		public static void vector_Vec6d_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Vec6d_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Point2i_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_new1")]
		public static global::System.IntPtr vector_Point2i_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2i_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_new2")]
		public static global::System.IntPtr vector_Point2i_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2i_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_new3")]
		public static global::System.IntPtr vector_Point2i_new3(
					global::OpenCvSharp.Point__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Point2i_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_getSize")]
		public static global::System.IntPtr vector_Point2i_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2i_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_getPointer")]
		public static global::System.IntPtr vector_Point2i_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2i_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2i_delete")]
		public static void vector_Point2i_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2i_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Point2f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_new1")]
		public static global::System.IntPtr vector_Point2f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_new2")]
		public static global::System.IntPtr vector_Point2f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_new3")]
		public static global::System.IntPtr vector_Point2f_new3(
					global::OpenCvSharp.Point2f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Point2f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_getSize")]
		public static global::System.IntPtr vector_Point2f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_getPointer")]
		public static global::System.IntPtr vector_Point2f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point2f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point2f_delete")]
		public static void vector_Point2f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point2f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Point3f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_new1")]
		public static global::System.IntPtr vector_Point3f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point3f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_new2")]
		public static global::System.IntPtr vector_Point3f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point3f_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_new3")]
		public static global::System.IntPtr vector_Point3f_new3(
					global::OpenCvSharp.Point3f__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Point3f_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_getSize")]
		public static global::System.IntPtr vector_Point3f_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point3f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_getPointer")]
		public static global::System.IntPtr vector_Point3f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Point3f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Point3f_delete")]
		public static void vector_Point3f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Point3f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Rect_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_new1")]
		public static global::System.IntPtr vector_Rect_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Rect_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_new2")]
		public static global::System.IntPtr vector_Rect_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Rect_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_new3")]
		public static global::System.IntPtr vector_Rect_new3(
					global::OpenCvSharp.Rect__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.Rect__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.Rect__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.Rect__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_Rect_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_getSize")]
		public static global::System.IntPtr vector_Rect_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Rect_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_getPointer")]
		public static global::System.IntPtr vector_Rect_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Rect_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Rect_delete")]
		public static void vector_Rect_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Rect_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_KeyPoint_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_new1")]
		public static global::System.IntPtr vector_KeyPoint_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_KeyPoint_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_new2")]
		public static global::System.IntPtr vector_KeyPoint_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_KeyPoint_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_new3")]
		public static global::System.IntPtr vector_KeyPoint_new3(
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_KeyPoint_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_getSize")]
		public static global::System.IntPtr vector_KeyPoint_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_KeyPoint_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_getPointer")]
		public static global::System.IntPtr vector_KeyPoint_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_KeyPoint_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_KeyPoint_delete")]
		public static void vector_KeyPoint_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_KeyPoint_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_DMatch_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_new1")]
		public static global::System.IntPtr vector_DMatch_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DMatch_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_new2")]
		public static global::System.IntPtr vector_DMatch_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DMatch_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_DMatch__OpenCvSharp__OpenCvSharp__DMatch__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_new3")]
		public static global::System.IntPtr vector_DMatch_new3(
					global::OpenCvSharp.DMatch__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.DMatch__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.DMatch__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.DMatch__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.DMatch__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_DMatch__OpenCvSharp__OpenCvSharp__DMatch__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_DMatch_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_getSize")]
		public static global::System.IntPtr vector_DMatch_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DMatch_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_getPointer")]
		public static global::System.IntPtr vector_DMatch_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DMatch_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DMatch_delete")]
		public static void vector_DMatch_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DMatch_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_int_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_new1")]
		public static global::System.IntPtr vector_vector_int_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_int_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_new2")]
		public static global::System.IntPtr vector_vector_int_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_int_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_getSize1")]
		public static global::System.IntPtr vector_vector_int_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_int_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_getSize2")]
		public static void vector_vector_int_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_int_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_getPointer")]
		public static global::System.IntPtr vector_vector_int_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_int_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_copy")]
		public static void vector_vector_int_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_int_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_int_delete")]
		public static void vector_vector_int_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_int_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_float_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_new1")]
		public static global::System.IntPtr vector_vector_float_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_float_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_new2")]
		public static global::System.IntPtr vector_vector_float_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_float_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_getSize1")]
		public static global::System.IntPtr vector_vector_float_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_float_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_getSize2")]
		public static void vector_vector_float_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_float_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_getPointer")]
		public static global::System.IntPtr vector_vector_float_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_float_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_copy")]
		public static void vector_vector_float_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_float_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_float_delete")]
		public static void vector_vector_float_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_float_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_double_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_new1")]
		public static global::System.IntPtr vector_vector_double_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_double_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_new2")]
		public static global::System.IntPtr vector_vector_double_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_double_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_getSize1")]
		public static global::System.IntPtr vector_vector_double_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_double_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_getSize2")]
		public static void vector_vector_double_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_double_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_getPointer")]
		public static global::System.IntPtr vector_vector_double_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_double_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_copy")]
		public static void vector_vector_double_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_double_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_double_delete")]
		public static void vector_vector_double_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_double_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_KeyPoint_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_new1")]
		public static global::System.IntPtr vector_vector_KeyPoint_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_KeyPoint_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_new2")]
		public static global::System.IntPtr vector_vector_KeyPoint_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_KeyPoint_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_new3")]
		public static global::System.IntPtr vector_vector_KeyPoint_new3(
					global::System.IntPtr[] values, 
					int size1, 
					int[] size2)
		{
			// Setup
			global::System.IntPtr* unsafe_values;
			int* unsafe_size2;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_values = global::McgInterop.McgCoreHelpers.GetArrayForCompat(values))
			{
				unsafe_values = (global::System.IntPtr*)pinned_values;
				fixed (int* pinned_size2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size2))
				{
					unsafe_size2 = (int*)pinned_size2;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_new3(
										unsafe_values, 
										size1, 
										unsafe_size2
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_KeyPoint_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_getSize1")]
		public static global::System.IntPtr vector_vector_KeyPoint_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_KeyPoint_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_getSize2")]
		public static void vector_vector_KeyPoint_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_KeyPoint_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_getPointer")]
		public static global::System.IntPtr vector_vector_KeyPoint_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_KeyPoint_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_copy")]
		public static void vector_vector_KeyPoint_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_KeyPoint_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_KeyPoint_delete")]
		public static void vector_vector_KeyPoint_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_KeyPoint_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_DMatch_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_new1")]
		public static global::System.IntPtr vector_vector_DMatch_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_DMatch_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_new2")]
		public static global::System.IntPtr vector_vector_DMatch_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_DMatch_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_getSize1")]
		public static global::System.IntPtr vector_vector_DMatch_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_DMatch_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_getSize2")]
		public static void vector_vector_DMatch_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_DMatch_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_getPointer")]
		public static global::System.IntPtr vector_vector_DMatch_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_DMatch_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_copy")]
		public static void vector_vector_DMatch_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_DMatch_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_DMatch_delete")]
		public static void vector_vector_DMatch_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_DMatch_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_Point_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_new1")]
		public static global::System.IntPtr vector_vector_Point_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_new2")]
		public static global::System.IntPtr vector_vector_Point_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_getSize1")]
		public static global::System.IntPtr vector_vector_Point_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_getSize2")]
		public static void vector_vector_Point_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_Point_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_getPointer")]
		public static global::System.IntPtr vector_vector_Point_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_copy")]
		public static void vector_vector_Point_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_Point_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point_delete")]
		public static void vector_vector_Point_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_vector_Point2f_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_new1")]
		public static global::System.IntPtr vector_vector_Point2f_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point2f_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_new2")]
		public static global::System.IntPtr vector_vector_Point2f_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point2f_getSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_getSize1")]
		public static global::System.IntPtr vector_vector_Point2f_getSize1(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_getSize1(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point2f_getSize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_getSize2")]
		public static void vector_vector_Point2f_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr[] size)
		{
			// Setup
			global::System.IntPtr* unsafe_size;
			// Marshalling
			fixed (global::System.IntPtr* pinned_size = global::McgInterop.McgCoreHelpers.GetArrayForCompat(size))
			{
				unsafe_size = (global::System.IntPtr*)pinned_size;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_getSize2(
									vector, 
									unsafe_size
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_Point2f_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_getPointer")]
		public static global::System.IntPtr vector_vector_Point2f_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_vector_Point2f_copy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_copy")]
		public static void vector_vector_Point2f_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr[] dst)
		{
			// Setup
			global::System.IntPtr* unsafe_dst;
			// Marshalling
			fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
			{
				unsafe_dst = (global::System.IntPtr*)pinned_dst;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_copy(
									vec, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_vector_Point2f_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_vector_Point2f_delete")]
		public static void vector_vector_Point2f_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_vector_Point2f_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_string_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_new1")]
		public static global::System.IntPtr vector_string_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_string_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_new2")]
		public static global::System.IntPtr vector_string_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_string_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_getSize")]
		public static global::System.IntPtr vector_string_getSize(global::System.IntPtr vec)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_getSize(vec);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_string_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_getPointer")]
		public static global::System.IntPtr vector_string_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_string_elemAt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] sbyte___ptrchar *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_elemAt")]
		public static sbyte* vector_string_elemAt(
					global::System.IntPtr vector, 
					int i)
		{
			// Setup
			sbyte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (sbyte*)global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_elemAt(
								vector, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (sbyte*)unsafe___value;
		}

		// Signature, vector_string_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_string_delete")]
		public static void vector_string_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_string_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Mat_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_new1")]
		public static global::System.IntPtr vector_Mat_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Mat_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_new2")]
		public static global::System.IntPtr vector_Mat_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Mat_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_new3")]
		public static global::System.IntPtr vector_Mat_new3(
					global::System.IntPtr data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_new3(
								data, 
								dataLength
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Mat_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_getSize")]
		public static global::System.IntPtr vector_Mat_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Mat_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_getPointer")]
		public static global::System.IntPtr vector_Mat_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_Mat_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_delete")]
		public static void vector_Mat_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_Mat_assignToArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_assignToArray")]
		public static void vector_Mat_assignToArray(
					global::System.IntPtr vector, 
					global::System.IntPtr[] arr)
		{
			// Setup
			global::System.IntPtr* unsafe_arr;
			// Marshalling
			fixed (global::System.IntPtr* pinned_arr = global::McgInterop.McgCoreHelpers.GetArrayForCompat(arr))
			{
				unsafe_arr = (global::System.IntPtr*)pinned_arr;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_assignToArray(
									vector, 
									unsafe_arr
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, vector_Mat_addref, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_Mat_addref")]
		public static void vector_Mat_addref(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_Mat_addref(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_DTrees_Node_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_new1")]
		public static global::System.IntPtr vector_DTrees_Node_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Node_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_new2")]
		public static global::System.IntPtr vector_DTrees_Node_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Node_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_ML_DTrees_Node__OpenCvSharp__OpenCvSharp_ML__DTrees_Node__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_new3")]
		public static global::System.IntPtr vector_DTrees_Node_new3(
					global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_ML_DTrees_Node__OpenCvSharp__OpenCvSharp_ML__DTrees_Node__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_DTrees_Node_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_getSize")]
		public static global::System.IntPtr vector_DTrees_Node_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Node_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_getPointer")]
		public static global::System.IntPtr vector_DTrees_Node_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Node_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Node_delete")]
		public static void vector_DTrees_Node_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Node_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, vector_DTrees_Split_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_new1")]
		public static global::System.IntPtr vector_DTrees_Split_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Split_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_new2")]
		public static global::System.IntPtr vector_DTrees_Split_new2(global::System.IntPtr size)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_new2(size);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Split_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_ML_DTrees_Split__OpenCvSharp__OpenCvSharp_ML__DTrees_Split__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_new3")]
		public static global::System.IntPtr vector_DTrees_Split_new3(
					global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp[] data, 
					global::System.IntPtr dataLength)
		{
			// Setup
			global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp* unsafe_data = default(global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (data == null)
					unsafe_data = null;
				else
				{
					if (data != null)
						unsafe_data = (global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(data.Length * sizeof(global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp))));
					if (data != null)
						for (uint mcgIdx = 0; (mcgIdx < data.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_ML_DTrees_Split__OpenCvSharp__OpenCvSharp_ML__DTrees_Split__OpenCvSharp data
							unsafe_data[mcgIdx] = data[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_new3(
									unsafe_data, 
									dataLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_data);
			}
		}

		// Signature, vector_DTrees_Split_getSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_getSize")]
		public static global::System.IntPtr vector_DTrees_Split_getSize(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_getSize(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Split_getPointer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_getPointer")]
		public static global::System.IntPtr vector_DTrees_Split_getPointer(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_getPointer(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, vector_DTrees_Split_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "vector_DTrees_Split_delete")]
		public static void vector_DTrees_Split_delete(global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.vector_DTrees_Split_delete(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_createStitcher, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_createStitcher")]
		public static global::System.IntPtr stitching_createStitcher(int try_use_cpu)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_createStitcher(try_use_cpu);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Ptr_Stitcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Ptr_Stitcher_delete")]
		public static void stitching_Ptr_Stitcher_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Ptr_Stitcher_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Ptr_Stitcher_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Ptr_Stitcher_get")]
		public static global::System.IntPtr stitching_Ptr_Stitcher_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Ptr_Stitcher_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_registrationResol, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_registrationResol")]
		public static double stitching_Stitcher_registrationResol(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_registrationResol(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setRegistrationResol, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setRegistrationResol")]
		public static void stitching_Stitcher_setRegistrationResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setRegistrationResol(
								obj, 
								resolMpx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_seamEstimationResol, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_seamEstimationResol")]
		public static double stitching_Stitcher_seamEstimationResol(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_seamEstimationResol(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setSeamEstimationResol, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setSeamEstimationResol")]
		public static void stitching_Stitcher_setSeamEstimationResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setSeamEstimationResol(
								obj, 
								resolMpx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_compositingResol, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_compositingResol")]
		public static double stitching_Stitcher_compositingResol(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_compositingResol(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setCompositingResol, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setCompositingResol")]
		public static void stitching_Stitcher_setCompositingResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setCompositingResol(
								obj, 
								resolMpx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_panoConfidenceThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_panoConfidenceThresh")]
		public static double stitching_Stitcher_panoConfidenceThresh(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_panoConfidenceThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setPanoConfidenceThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setPanoConfidenceThresh")]
		public static void stitching_Stitcher_setPanoConfidenceThresh(
					global::System.IntPtr obj, 
					double confThresh)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setPanoConfidenceThresh(
								obj, 
								confThresh
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_waveCorrection, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_waveCorrection")]
		public static int stitching_Stitcher_waveCorrection(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_waveCorrection(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setWaveCorrection, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setWaveCorrection")]
		public static void stitching_Stitcher_setWaveCorrection(
					global::System.IntPtr obj, 
					int flag)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setWaveCorrection(
								obj, 
								flag
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_waveCorrectKind, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_waveCorrectKind")]
		public static int stitching_Stitcher_waveCorrectKind(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_waveCorrectKind(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_setWaveCorrectKind, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_setWaveCorrectKind")]
		public static void stitching_Stitcher_setWaveCorrectKind(
					global::System.IntPtr obj, 
					int kind)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_setWaveCorrectKind(
								obj, 
								kind
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, stitching_Stitcher_estimateTransform_InputArray1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_estimateTransform_InputArray1")]
		public static int stitching_Stitcher_estimateTransform_InputArray1(
					global::System.IntPtr obj, 
					global::System.IntPtr images)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_estimateTransform_InputArray1(
								obj, 
								images
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_estimateTransform_InputArray2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_estimateTransform_InputArray2")]
		public static int stitching_Stitcher_estimateTransform_InputArray2(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr[] rois, 
					int roisSize1, 
					int[] roisSize2)
		{
			// Setup
			global::System.IntPtr* unsafe_rois;
			int* unsafe_roisSize2;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_rois = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rois))
			{
				unsafe_rois = (global::System.IntPtr*)pinned_rois;
				fixed (int* pinned_roisSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(roisSize2))
				{
					unsafe_roisSize2 = (int*)pinned_roisSize2;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_estimateTransform_InputArray2(
										obj, 
										images, 
										unsafe_rois, 
										roisSize1, 
										unsafe_roisSize2
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_estimateTransform_MatArray1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_estimateTransform_MatArray1")]
		public static int stitching_Stitcher_estimateTransform_MatArray1(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_estimateTransform_MatArray1(
									obj, 
									unsafe_images, 
									imagesSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_estimateTransform_MatArray2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_estimateTransform_MatArray2")]
		public static int stitching_Stitcher_estimateTransform_MatArray2(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize, 
					global::System.IntPtr[] rois, 
					int roisSize1, 
					int[] roisSize2)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			global::System.IntPtr* unsafe_rois;
			int* unsafe_roisSize2;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (global::System.IntPtr* pinned_rois = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rois))
				{
					unsafe_rois = (global::System.IntPtr*)pinned_rois;
					fixed (int* pinned_roisSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(roisSize2))
					{
						unsafe_roisSize2 = (int*)pinned_roisSize2;
						// Call to native method
						unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_estimateTransform_MatArray2(
											obj, 
											unsafe_images, 
											imagesSize, 
											unsafe_rois, 
											roisSize1, 
											unsafe_roisSize2
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_composePanorama1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_composePanorama1")]
		public static int stitching_Stitcher_composePanorama1(
					global::System.IntPtr obj, 
					global::System.IntPtr pano)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_composePanorama1(
								obj, 
								pano
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_composePanorama2_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_composePanorama2_InputArray")]
		public static int stitching_Stitcher_composePanorama2_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr pano)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_composePanorama2_InputArray(
								obj, 
								images, 
								pano
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_composePanorama2_MatArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_composePanorama2_MatArray")]
		public static int stitching_Stitcher_composePanorama2_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize, 
					global::System.IntPtr pano)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_composePanorama2_MatArray(
									obj, 
									unsafe_images, 
									imagesSize, 
									pano
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_stitch1_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_stitch1_InputArray")]
		public static int stitching_Stitcher_stitch1_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr pano)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_stitch1_InputArray(
								obj, 
								images, 
								pano
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_stitch1_MatArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_stitch1_MatArray")]
		public static int stitching_Stitcher_stitch1_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize, 
					global::System.IntPtr pano)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_stitch1_MatArray(
									obj, 
									unsafe_images, 
									imagesSize, 
									pano
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_stitch2_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_stitch2_InputArray")]
		public static int stitching_Stitcher_stitch2_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr[] rois, 
					int roisSize1, 
					int[] roisSize2, 
					global::System.IntPtr pano)
		{
			// Setup
			global::System.IntPtr* unsafe_rois;
			int* unsafe_roisSize2;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_rois = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rois))
			{
				unsafe_rois = (global::System.IntPtr*)pinned_rois;
				fixed (int* pinned_roisSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(roisSize2))
				{
					unsafe_roisSize2 = (int*)pinned_roisSize2;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_stitch2_InputArray(
										obj, 
										images, 
										unsafe_rois, 
										roisSize1, 
										unsafe_roisSize2, 
										pano
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_stitch2_MatArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_stitch2_MatArray")]
		public static int stitching_Stitcher_stitch2_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize, 
					global::System.IntPtr[] rois, 
					int roisSize1, 
					int[] roisSize2, 
					global::System.IntPtr pano)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			global::System.IntPtr* unsafe_rois;
			int* unsafe_roisSize2;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (global::System.IntPtr* pinned_rois = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rois))
				{
					unsafe_rois = (global::System.IntPtr*)pinned_rois;
					fixed (int* pinned_roisSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(roisSize2))
					{
						unsafe_roisSize2 = (int*)pinned_roisSize2;
						// Call to native method
						unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_stitch2_MatArray(
											obj, 
											unsafe_images, 
											imagesSize, 
											unsafe_rois, 
											roisSize1, 
											unsafe_roisSize2, 
											pano
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, stitching_Stitcher_component, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_component")]
		public static void stitching_Stitcher_component(
					global::System.IntPtr obj, 
					out global::System.IntPtr pointer, 
					out int length)
		{
			// Setup
			global::System.IntPtr unsafe_pointer;
			int unsafe_length;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_component(
								obj, 
								&(unsafe_pointer), 
								&(unsafe_length)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			length = unsafe_length;
			pointer = unsafe_pointer;
			// Return
		}

		// Signature, stitching_Stitcher_workScale, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "stitching_Stitcher_workScale")]
		public static double stitching_Stitcher_workScale(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.stitching_Stitcher_workScale(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_FrameSource_nextFrame, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_FrameSource_nextFrame")]
		public static void superres_FrameSource_nextFrame(
					global::System.IntPtr obj, 
					global::System.IntPtr frame)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_FrameSource_nextFrame(
								obj, 
								frame
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_FrameSource_reset, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_FrameSource_reset")]
		public static void superres_FrameSource_reset(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_FrameSource_reset(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_createFrameSource_Empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createFrameSource_Empty")]
		public static global::System.IntPtr superres_createFrameSource_Empty()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createFrameSource_Empty();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createFrameSource_Video, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createFrameSource_Video")]
		public static global::System.IntPtr superres_createFrameSource_Video(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createFrameSource_Video(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, superres_createFrameSource_Video_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createFrameSource_Video_CUDA")]
		public static global::System.IntPtr superres_createFrameSource_Video_CUDA(string fileName)
		{
			// Setup
			byte* unsafe_fileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_fileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fileName, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createFrameSource_Video_CUDA(unsafe_fileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fileName);
			}
		}

		// Signature, superres_createFrameSource_Camera, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createFrameSource_Camera")]
		public static global::System.IntPtr superres_createFrameSource_Camera(int deviceId)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createFrameSource_Camera(deviceId);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_FrameSource_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_FrameSource_get")]
		public static global::System.IntPtr superres_Ptr_FrameSource_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_FrameSource_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_FrameSource_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_FrameSource_delete")]
		public static void superres_Ptr_FrameSource_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_FrameSource_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_SuperResolution_setInput, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_SuperResolution_setInput")]
		public static void superres_SuperResolution_setInput(
					global::System.IntPtr obj, 
					global::System.IntPtr frameSource)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_SuperResolution_setInput(
								obj, 
								frameSource
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_SuperResolution_nextFrame, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_SuperResolution_nextFrame")]
		public static void superres_SuperResolution_nextFrame(
					global::System.IntPtr obj, 
					global::System.IntPtr frame)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_SuperResolution_nextFrame(
								obj, 
								frame
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_SuperResolution_reset, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_SuperResolution_reset")]
		public static void superres_SuperResolution_reset(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_SuperResolution_reset(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_SuperResolution_collectGarbage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_SuperResolution_collectGarbage")]
		public static void superres_SuperResolution_collectGarbage(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_SuperResolution_collectGarbage(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_SuperResolution_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_SuperResolution_info")]
		public static global::System.IntPtr superres_SuperResolution_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_SuperResolution_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createSuperResolution_BTVL1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createSuperResolution_BTVL1")]
		public static global::System.IntPtr superres_createSuperResolution_BTVL1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createSuperResolution_BTVL1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createSuperResolution_BTVL1_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createSuperResolution_BTVL1_CUDA")]
		public static global::System.IntPtr superres_createSuperResolution_BTVL1_CUDA()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createSuperResolution_BTVL1_CUDA();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_SuperResolution_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_SuperResolution_get")]
		public static global::System.IntPtr superres_Ptr_SuperResolution_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_SuperResolution_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_SuperResolution_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_SuperResolution_delete")]
		public static void superres_Ptr_SuperResolution_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_SuperResolution_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_DenseOpticalFlowExt_calc, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_DenseOpticalFlowExt_calc")]
		public static void superres_DenseOpticalFlowExt_calc(
					global::System.IntPtr obj, 
					global::System.IntPtr frame0, 
					global::System.IntPtr frame1, 
					global::System.IntPtr flow1, 
					global::System.IntPtr flow2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_DenseOpticalFlowExt_calc(
								obj, 
								frame0, 
								frame1, 
								flow1, 
								flow2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_DenseOpticalFlowExt_collectGarbage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_DenseOpticalFlowExt_collectGarbage")]
		public static void superres_DenseOpticalFlowExt_collectGarbage(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_DenseOpticalFlowExt_collectGarbage(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_DenseOpticalFlowExt_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_DenseOpticalFlowExt_info")]
		public static global::System.IntPtr superres_DenseOpticalFlowExt_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_DenseOpticalFlowExt_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_DenseOpticalFlowExt_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_DenseOpticalFlowExt_get")]
		public static global::System.IntPtr superres_Ptr_DenseOpticalFlowExt_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_DenseOpticalFlowExt_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_Ptr_DenseOpticalFlowExt_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_Ptr_DenseOpticalFlowExt_delete")]
		public static void superres_Ptr_DenseOpticalFlowExt_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.superres_Ptr_DenseOpticalFlowExt_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, superres_createOptFlow_Farneback, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_Farneback")]
		public static global::System.IntPtr superres_createOptFlow_Farneback()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_Farneback();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createOptFlow_Farneback_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_Farneback_CUDA")]
		public static global::System.IntPtr superres_createOptFlow_Farneback_CUDA()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_Farneback_CUDA();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createOptFlow_DualTVL1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_DualTVL1")]
		public static global::System.IntPtr superres_createOptFlow_DualTVL1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_DualTVL1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createOptFlow_DualTVL1_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_DualTVL1_CUDA")]
		public static global::System.IntPtr superres_createOptFlow_DualTVL1_CUDA()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_DualTVL1_CUDA();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createOptFlow_Brox_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_Brox_CUDA")]
		public static global::System.IntPtr superres_createOptFlow_Brox_CUDA()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_Brox_CUDA();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, superres_createOptFlow_PyrLK_CUDA, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "superres_createOptFlow_PyrLK_CUDA")]
		public static global::System.IntPtr superres_createOptFlow_PyrLK_CUDA()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.superres_createOptFlow_PyrLK_CUDA();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_new1")]
		public static global::System.IntPtr videoio_VideoCapture_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_new2")]
		public static global::System.IntPtr videoio_VideoCapture_new2(string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_new2(unsafe_filename);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, videoio_VideoCapture_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_new3")]
		public static global::System.IntPtr videoio_VideoCapture_new3(int device)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_new3(device);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_delete")]
		public static void videoio_VideoCapture_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoCapture_open1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_open1")]
		public static int videoio_VideoCapture_open1(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_open1(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, videoio_VideoCapture_open2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_open2")]
		public static int videoio_VideoCapture_open2(
					global::System.IntPtr obj, 
					int device)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_open2(
								obj, 
								device
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_isOpened, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_isOpened")]
		public static int videoio_VideoCapture_isOpened(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_isOpened(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_release")]
		public static void videoio_VideoCapture_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoCapture_grab, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_grab")]
		public static int videoio_VideoCapture_grab(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_grab(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_retrieve, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_retrieve")]
		public static int videoio_VideoCapture_retrieve(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					int flag)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_retrieve(
								obj, 
								image, 
								flag
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_operatorRightShift_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_operatorRightShift_Mat")]
		public static void videoio_VideoCapture_operatorRightShift_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_operatorRightShift_Mat(
								obj, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoCapture_operatorRightShift_UMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_operatorRightShift_UMat")]
		public static void videoio_VideoCapture_operatorRightShift_UMat(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_operatorRightShift_UMat(
								obj, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoCapture_read, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_read")]
		public static int videoio_VideoCapture_read(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_read(
								obj, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_set, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_set")]
		public static int videoio_VideoCapture_set(
					global::System.IntPtr obj, 
					int propId, 
					double value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_set(
								obj, 
								propId, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoCapture_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoCapture_get")]
		public static double videoio_VideoCapture_get(
					global::System.IntPtr obj, 
					int propId)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoCapture_get(
								obj, 
								propId
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoWriter_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_new1")]
		public static global::System.IntPtr videoio_VideoWriter_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoWriter_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_new2")]
		public static global::System.IntPtr videoio_VideoWriter_new2(
					string filename, 
					int fourcc, 
					double fps, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int isColor)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_new2(
									unsafe_filename, 
									fourcc, 
									fps, 
									frameSize, 
									isColor
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, videoio_VideoWriter_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_delete")]
		public static void videoio_VideoWriter_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoWriter_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_open")]
		public static int videoio_VideoWriter_open(
					global::System.IntPtr obj, 
					string filename, 
					int fourcc, 
					double fps, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int isColor)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_open(
									obj, 
									unsafe_filename, 
									fourcc, 
									fps, 
									frameSize, 
									isColor
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, videoio_VideoWriter_isOpened, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_isOpened")]
		public static int videoio_VideoWriter_isOpened(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_isOpened(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoWriter_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_release")]
		public static void videoio_VideoWriter_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoWriter_OperatorLeftShift, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_OperatorLeftShift")]
		public static void videoio_VideoWriter_OperatorLeftShift(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_OperatorLeftShift(
								obj, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoWriter_write, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_write")]
		public static void videoio_VideoWriter_write(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_write(
								obj, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, videoio_VideoWriter_set, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_set")]
		public static int videoio_VideoWriter_set(
					global::System.IntPtr obj, 
					int propId, 
					double value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_set(
								obj, 
								propId, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoWriter_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_get")]
		public static double videoio_VideoWriter_get(
					global::System.IntPtr obj, 
					int propId)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_get(
								obj, 
								propId
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, videoio_VideoWriter_fourcc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "videoio_VideoWriter_fourcc")]
		public static int videoio_VideoWriter_fourcc(
					byte c1, 
					byte c2, 
					byte c3, 
					byte c4)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.videoio_VideoWriter_fourcc(
								c1, 
								c2, 
								c3, 
								c4
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_create")]
		public static global::System.IntPtr xfeatures2d_BriefDescriptorExtractor_create(int bytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_create(bytes);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_BriefDescriptorExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_BriefDescriptorExtractor_delete")]
		public static void xfeatures2d_Ptr_BriefDescriptorExtractor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_BriefDescriptorExtractor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_read, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_read")]
		public static void xfeatures2d_BriefDescriptorExtractor_read(
					global::System.IntPtr obj, 
					global::System.IntPtr fn)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_read(
								obj, 
								fn
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_write, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_write")]
		public static void xfeatures2d_BriefDescriptorExtractor_write(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_write(
								obj, 
								fs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_descriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_descriptorSize")]
		public static int xfeatures2d_BriefDescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_descriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_descriptorType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_descriptorType")]
		public static int xfeatures2d_BriefDescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_descriptorType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_BriefDescriptorExtractor_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_BriefDescriptorExtractor_info")]
		public static global::System.IntPtr xfeatures2d_BriefDescriptorExtractor_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_BriefDescriptorExtractor_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_BriefDescriptorExtractor_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_BriefDescriptorExtractor_get")]
		public static global::System.IntPtr xfeatures2d_Ptr_BriefDescriptorExtractor_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_BriefDescriptorExtractor_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_FREAK_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_FREAK_create")]
		public static global::System.IntPtr xfeatures2d_FREAK_create(
					int orientationNormalized, 
					int scaleNormalized, 
					float patternScale, 
					int nOctaves, 
					int[] selectedPairs, 
					int selectedPairsLength)
		{
			// Setup
			int* unsafe_selectedPairs;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_selectedPairs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(selectedPairs))
			{
				unsafe_selectedPairs = (int*)pinned_selectedPairs;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_FREAK_create(
									orientationNormalized, 
									scaleNormalized, 
									patternScale, 
									nOctaves, 
									unsafe_selectedPairs, 
									selectedPairsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_FREAK_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_FREAK_delete")]
		public static void xfeatures2d_Ptr_FREAK_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_FREAK_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_FREAK_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_FREAK_info")]
		public static global::System.IntPtr xfeatures2d_FREAK_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_FREAK_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_FREAK_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_FREAK_get")]
		public static global::System.IntPtr xfeatures2d_Ptr_FREAK_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_FREAK_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_StarDetector_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_StarDetector_create")]
		public static global::System.IntPtr xfeatures2d_StarDetector_create(
					int maxSize, 
					int responseThreshold, 
					int lineThresholdProjected, 
					int lineThresholdBinarized, 
					int suppressNonmaxSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_StarDetector_create(
								maxSize, 
								responseThreshold, 
								lineThresholdProjected, 
								lineThresholdBinarized, 
								suppressNonmaxSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_StarDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_StarDetector_delete")]
		public static void xfeatures2d_Ptr_StarDetector_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_StarDetector_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_StarDetector_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_StarDetector_info")]
		public static global::System.IntPtr xfeatures2d_StarDetector_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_StarDetector_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_StarDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_StarDetector_get")]
		public static global::System.IntPtr xfeatures2d_Ptr_StarDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_StarDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_create")]
		public static global::System.IntPtr xfeatures2d_SURF_create(
					double hessianThreshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int extended, 
					int upright)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_create(
								hessianThreshold, 
								nOctaves, 
								nOctaveLayers, 
								extended, 
								upright
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_SURF_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_SURF_delete")]
		public static void xfeatures2d_Ptr_SURF_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_SURF_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_Ptr_SURF_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_SURF_get")]
		public static global::System.IntPtr xfeatures2d_Ptr_SURF_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_SURF_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_info")]
		public static global::System.IntPtr xfeatures2d_SURF_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_getHessianThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_getHessianThreshold")]
		public static double xfeatures2d_SURF_getHessianThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_getHessianThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_getNOctaves, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_getNOctaves")]
		public static int xfeatures2d_SURF_getNOctaves(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_getNOctaves(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_getNOctaveLayers, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_getNOctaveLayers")]
		public static int xfeatures2d_SURF_getNOctaveLayers(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_getNOctaveLayers(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_getExtended, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_getExtended")]
		public static int xfeatures2d_SURF_getExtended(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_getExtended(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_getUpright, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_getUpright")]
		public static int xfeatures2d_SURF_getUpright(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_getUpright(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SURF_setHessianThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_setHessianThreshold")]
		public static void xfeatures2d_SURF_setHessianThreshold(
					global::System.IntPtr obj, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_setHessianThreshold(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_SURF_setNOctaves, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_setNOctaves")]
		public static void xfeatures2d_SURF_setNOctaves(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_setNOctaves(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_SURF_setNOctaveLayers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_setNOctaveLayers")]
		public static void xfeatures2d_SURF_setNOctaveLayers(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_setNOctaveLayers(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_SURF_setExtended, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_setExtended")]
		public static void xfeatures2d_SURF_setExtended(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_setExtended(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_SURF_setUpright, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SURF_setUpright")]
		public static void xfeatures2d_SURF_setUpright(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SURF_setUpright(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_SIFT_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SIFT_create")]
		public static global::System.IntPtr xfeatures2d_SIFT_create(
					int nfeatures, 
					int nOctaveLayers, 
					double contrastThreshold, 
					double edgeThreshold, 
					double sigma)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SIFT_create(
								nfeatures, 
								nOctaveLayers, 
								contrastThreshold, 
								edgeThreshold, 
								sigma
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_Ptr_SIFT_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_SIFT_delete")]
		public static void xfeatures2d_Ptr_SIFT_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_SIFT_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, xfeatures2d_Ptr_SIFT_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_Ptr_SIFT_get")]
		public static global::System.IntPtr xfeatures2d_Ptr_SIFT_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_Ptr_SIFT_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, xfeatures2d_SIFT_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "xfeatures2d_SIFT_info")]
		public static global::System.IntPtr xfeatures2d_SIFT_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.xfeatures2d_SIFT_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_Rodrigues, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Rodrigues")]
		public static void calib3d_Rodrigues(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr jacobian)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Rodrigues(
								src, 
								dst, 
								jacobian
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_Rodrigues_VecToMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Rodrigues_VecToMat")]
		public static void calib3d_Rodrigues_VecToMat(
					global::System.IntPtr vector, 
					global::System.IntPtr matrix, 
					global::System.IntPtr jacobian)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Rodrigues_VecToMat(
								vector, 
								matrix, 
								jacobian
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_Rodrigues_MatToVec, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Rodrigues_MatToVec")]
		public static void calib3d_Rodrigues_MatToVec(
					global::System.IntPtr vector, 
					global::System.IntPtr matrix, 
					global::System.IntPtr jacobian)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Rodrigues_MatToVec(
								vector, 
								matrix, 
								jacobian
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_findHomography_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findHomography_InputArray")]
		public static global::System.IntPtr calib3d_findHomography_InputArray(
					global::System.IntPtr srcPoints, 
					global::System.IntPtr dstPoints, 
					int method, 
					double ransacReprojThreshold, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findHomography_InputArray(
								srcPoints, 
								dstPoints, 
								method, 
								ransacReprojThreshold, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_findHomography_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findHomography_vector")]
		public static global::System.IntPtr calib3d_findHomography_vector(
					global::OpenCvSharp.Point2d__OpenCvSharp[] srcPoints, 
					int srcPointsLength, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] dstPoints, 
					int dstPointsLength, 
					int method, 
					double ransacReprojThreshold, 
					global::System.IntPtr mask)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_srcPoints = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_dstPoints = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (srcPoints == null)
					unsafe_srcPoints = null;
				else
				{
					if (srcPoints != null)
						unsafe_srcPoints = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(srcPoints.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (srcPoints != null)
						for (uint mcgIdx = 0; (mcgIdx < srcPoints.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp srcPoints
							unsafe_srcPoints[mcgIdx] = srcPoints[mcgIdx];
						}
				}
				if (dstPoints == null)
					unsafe_dstPoints = null;
				else
				{
					if (dstPoints != null)
						unsafe_dstPoints = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dstPoints.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (dstPoints != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dstPoints.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp dstPoints
							unsafe_dstPoints[mcgIdx_2] = dstPoints[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findHomography_vector(
									unsafe_srcPoints, 
									srcPointsLength, 
									unsafe_dstPoints, 
									dstPointsLength, 
									method, 
									ransacReprojThreshold, 
									mask
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_srcPoints);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dstPoints);
			}
		}

		// Signature, calib3d_RQDecomp3x3_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_RQDecomp3x3_InputArray")]
		public static void calib3d_RQDecomp3x3_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr mtxR, 
					global::System.IntPtr mtxQ, 
					global::System.IntPtr qx, 
					global::System.IntPtr qy, 
					global::System.IntPtr qz, 
					out global::OpenCvSharp.Vec3d__OpenCvSharp outVal)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp unsafe_outVal;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_RQDecomp3x3_InputArray(
								src, 
								mtxR, 
								mtxQ, 
								qx, 
								qy, 
								qz, 
								&(unsafe_outVal)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			outVal = unsafe_outVal;
			// Return
		}

		// Signature, calib3d_RQDecomp3x3_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_RQDecomp3x3_Mat")]
		public static void calib3d_RQDecomp3x3_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr mtxR, 
					global::System.IntPtr mtxQ, 
					global::System.IntPtr qx, 
					global::System.IntPtr qy, 
					global::System.IntPtr qz, 
					out global::OpenCvSharp.Vec3d__OpenCvSharp outVal)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp unsafe_outVal;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_RQDecomp3x3_Mat(
								src, 
								mtxR, 
								mtxQ, 
								qx, 
								qy, 
								qz, 
								&(unsafe_outVal)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			outVal = unsafe_outVal;
			// Return
		}

		// Signature, calib3d_decomposeProjectionMatrix_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_decomposeProjectionMatrix_InputArray")]
		public static void calib3d_decomposeProjectionMatrix_InputArray(
					global::System.IntPtr projMatrix, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr rotMatrix, 
					global::System.IntPtr transVect, 
					global::System.IntPtr rotMatrixX, 
					global::System.IntPtr rotMatrixY, 
					global::System.IntPtr rotMatrixZ, 
					global::System.IntPtr eulerAngles)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_decomposeProjectionMatrix_InputArray(
								projMatrix, 
								cameraMatrix, 
								rotMatrix, 
								transVect, 
								rotMatrixX, 
								rotMatrixY, 
								rotMatrixZ, 
								eulerAngles
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_decomposeProjectionMatrix_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_decomposeProjectionMatrix_Mat")]
		public static void calib3d_decomposeProjectionMatrix_Mat(
					global::System.IntPtr projMatrix, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr rotMatrix, 
					global::System.IntPtr transVect, 
					global::System.IntPtr rotMatrixX, 
					global::System.IntPtr rotMatrixY, 
					global::System.IntPtr rotMatrixZ, 
					global::System.IntPtr eulerAngles)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_decomposeProjectionMatrix_Mat(
								projMatrix, 
								cameraMatrix, 
								rotMatrix, 
								transVect, 
								rotMatrixX, 
								rotMatrixY, 
								rotMatrixZ, 
								eulerAngles
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_matMulDeriv, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_matMulDeriv")]
		public static void calib3d_matMulDeriv(
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					global::System.IntPtr dABdA, 
					global::System.IntPtr dABdB)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_matMulDeriv(
								a, 
								b, 
								dABdA, 
								dABdB
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_composeRT_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_composeRT_InputArray")]
		public static void calib3d_composeRT_InputArray(
					global::System.IntPtr rvec1, 
					global::System.IntPtr tvec1, 
					global::System.IntPtr rvec2, 
					global::System.IntPtr tvec2, 
					global::System.IntPtr rvec3, 
					global::System.IntPtr tvec3, 
					global::System.IntPtr dr3dr1, 
					global::System.IntPtr dr3dt1, 
					global::System.IntPtr dr3dr2, 
					global::System.IntPtr dr3dt2, 
					global::System.IntPtr dt3dr1, 
					global::System.IntPtr dt3dt1, 
					global::System.IntPtr dt3dr2, 
					global::System.IntPtr dt3dt2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_composeRT_InputArray(
								rvec1, 
								tvec1, 
								rvec2, 
								tvec2, 
								rvec3, 
								tvec3, 
								dr3dr1, 
								dr3dt1, 
								dr3dr2, 
								dr3dt2, 
								dt3dr1, 
								dt3dt1, 
								dt3dr2, 
								dt3dt2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_composeRT_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_composeRT_Mat")]
		public static void calib3d_composeRT_Mat(
					global::System.IntPtr rvec1, 
					global::System.IntPtr tvec1, 
					global::System.IntPtr rvec2, 
					global::System.IntPtr tvec2, 
					global::System.IntPtr rvec3, 
					global::System.IntPtr tvec3, 
					global::System.IntPtr dr3dr1, 
					global::System.IntPtr dr3dt1, 
					global::System.IntPtr dr3dr2, 
					global::System.IntPtr dr3dt2, 
					global::System.IntPtr dt3dr1, 
					global::System.IntPtr dt3dt1, 
					global::System.IntPtr dt3dr2, 
					global::System.IntPtr dt3dt2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_composeRT_Mat(
								rvec1, 
								tvec1, 
								rvec2, 
								tvec2, 
								rvec3, 
								tvec3, 
								dr3dr1, 
								dr3dt1, 
								dr3dr2, 
								dr3dt2, 
								dt3dr1, 
								dt3dt1, 
								dt3dr2, 
								dt3dt2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_projectPoints_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_projectPoints_InputArray")]
		public static void calib3d_projectPoints_InputArray(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr jacobian, 
					double aspectRatio)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_projectPoints_InputArray(
								objectPoints, 
								rvec, 
								tvec, 
								cameraMatrix, 
								distCoeffs, 
								imagePoints, 
								jacobian, 
								aspectRatio
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_projectPoints_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_projectPoints_Mat")]
		public static void calib3d_projectPoints_Mat(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr jacobian, 
					double aspectRatio)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_projectPoints_Mat(
								objectPoints, 
								rvec, 
								tvec, 
								cameraMatrix, 
								distCoeffs, 
								imagePoints, 
								jacobian, 
								aspectRatio
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_solvePnP_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_solvePnP_InputArray")]
		public static void calib3d_solvePnP_InputArray(
					global::System.IntPtr selfectPoints, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					int useExtrinsicGuess, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_solvePnP_InputArray(
								selfectPoints, 
								imagePoints, 
								cameraMatrix, 
								distCoeffs, 
								rvec, 
								tvec, 
								useExtrinsicGuess, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_solvePnP_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_solvePnP_vector")]
		public static void calib3d_solvePnP_vector(
					global::OpenCvSharp.Point3f__OpenCvSharp[] objectPoints, 
					int objectPointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] imagePoints, 
					int imagePointsLength, 
					double[] cameraMatrix, 
					double[] distCoeffs, 
					int distCoeffsLength, 
					double[] rvec, 
					double[] tvec, 
					int useExtrinsicGuess, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_objectPoints = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_imagePoints = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			double* unsafe_cameraMatrix;
			double* unsafe_distCoeffs;
			double* unsafe_rvec;
			double* unsafe_tvec;
			try
			{
				// Marshalling
				if (objectPoints == null)
					unsafe_objectPoints = null;
				else
				{
					if (objectPoints != null)
						unsafe_objectPoints = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(objectPoints.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (objectPoints != null)
						for (uint mcgIdx = 0; (mcgIdx < objectPoints.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp objectPoints
							unsafe_objectPoints[mcgIdx] = objectPoints[mcgIdx];
						}
				}
				if (imagePoints == null)
					unsafe_imagePoints = null;
				else
				{
					if (imagePoints != null)
						unsafe_imagePoints = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(imagePoints.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (imagePoints != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < imagePoints.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp imagePoints
							unsafe_imagePoints[mcgIdx_2] = imagePoints[mcgIdx_2];
						}
				}
				fixed (double* pinned_cameraMatrix = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix))
				{
					unsafe_cameraMatrix = (double*)pinned_cameraMatrix;
					fixed (double* pinned_distCoeffs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs))
					{
						unsafe_distCoeffs = (double*)pinned_distCoeffs;
						fixed (double* pinned_rvec = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rvec))
						{
							unsafe_rvec = (double*)pinned_rvec;
							fixed (double* pinned_tvec = global::McgInterop.McgCoreHelpers.GetArrayForCompat(tvec))
							{
								unsafe_tvec = (double*)pinned_tvec;
								// Call to native method
								global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_solvePnP_vector(
													unsafe_objectPoints, 
													objectPointsLength, 
													unsafe_imagePoints, 
													imagePointsLength, 
													unsafe_cameraMatrix, 
													unsafe_distCoeffs, 
													distCoeffsLength, 
													unsafe_rvec, 
													unsafe_tvec, 
													useExtrinsicGuess, 
													flags
												);
								global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
							}
						}
					}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_objectPoints);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_imagePoints);
			}
		}

		// Signature, calib3d_solvePnPRansac_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_solvePnPRansac_InputArray")]
		public static void calib3d_solvePnPRansac_InputArray(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					int useExtrinsicGuess, 
					int iterationsCount, 
					float reprojectionError, 
					double confidence, 
					global::System.IntPtr inliers, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_solvePnPRansac_InputArray(
								objectPoints, 
								imagePoints, 
								cameraMatrix, 
								distCoeffs, 
								rvec, 
								tvec, 
								useExtrinsicGuess, 
								iterationsCount, 
								reprojectionError, 
								confidence, 
								inliers, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_solvePnPRansac_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_solvePnPRansac_vector")]
		public static void calib3d_solvePnPRansac_vector(
					global::OpenCvSharp.Point3f__OpenCvSharp[] objectPoints, 
					int objectPointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] imagePoints, 
					int imagePointsLength, 
					double[] cameraMatrix, 
					double[] distCoeffs, 
					int distCoeffsLength, 
					double[] rvec, 
					double[] tvec, 
					int useExtrinsicGuess, 
					int iterationsCount, 
					float reprojectionError, 
					double confidence, 
					global::System.IntPtr inliers, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_objectPoints = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_imagePoints = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			double* unsafe_cameraMatrix;
			double* unsafe_distCoeffs;
			double* unsafe_rvec;
			double* unsafe_tvec;
			try
			{
				// Marshalling
				if (objectPoints == null)
					unsafe_objectPoints = null;
				else
				{
					if (objectPoints != null)
						unsafe_objectPoints = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(objectPoints.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (objectPoints != null)
						for (uint mcgIdx = 0; (mcgIdx < objectPoints.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp objectPoints
							unsafe_objectPoints[mcgIdx] = objectPoints[mcgIdx];
						}
				}
				if (imagePoints == null)
					unsafe_imagePoints = null;
				else
				{
					if (imagePoints != null)
						unsafe_imagePoints = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(imagePoints.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (imagePoints != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < imagePoints.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp imagePoints
							unsafe_imagePoints[mcgIdx_2] = imagePoints[mcgIdx_2];
						}
				}
				fixed (double* pinned_cameraMatrix = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix))
				{
					unsafe_cameraMatrix = (double*)pinned_cameraMatrix;
					fixed (double* pinned_distCoeffs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs))
					{
						unsafe_distCoeffs = (double*)pinned_distCoeffs;
						fixed (double* pinned_rvec = global::McgInterop.McgCoreHelpers.GetArrayForCompat(rvec))
						{
							unsafe_rvec = (double*)pinned_rvec;
							fixed (double* pinned_tvec = global::McgInterop.McgCoreHelpers.GetArrayForCompat(tvec))
							{
								unsafe_tvec = (double*)pinned_tvec;
								// Call to native method
								global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_solvePnPRansac_vector(
													unsafe_objectPoints, 
													objectPointsLength, 
													unsafe_imagePoints, 
													imagePointsLength, 
													unsafe_cameraMatrix, 
													unsafe_distCoeffs, 
													distCoeffsLength, 
													unsafe_rvec, 
													unsafe_tvec, 
													useExtrinsicGuess, 
													iterationsCount, 
													reprojectionError, 
													confidence, 
													inliers, 
													flags
												);
								global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
							}
						}
					}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_objectPoints);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_imagePoints);
			}
		}

		// Signature, calib3d_initCameraMatrix2D_Mat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_initCameraMatrix2D_Mat")]
		public static global::System.IntPtr calib3d_initCameraMatrix2D_Mat(
					global::System.IntPtr[] objectPoints, 
					int objectPointsLength, 
					global::System.IntPtr[] imagePoints, 
					int imagePointsLength, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double aspectRatio)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			global::System.IntPtr* unsafe_imagePoints;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (global::System.IntPtr* pinned_imagePoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints))
				{
					unsafe_imagePoints = (global::System.IntPtr*)pinned_imagePoints;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_initCameraMatrix2D_Mat(
										unsafe_objectPoints, 
										objectPointsLength, 
										unsafe_imagePoints, 
										imagePointsLength, 
										imageSize, 
										aspectRatio
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_initCameraMatrix2D_array, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_initCameraMatrix2D_array")]
		public static global::System.IntPtr calib3d_initCameraMatrix2D_array(
					global::System.IntPtr[] objectPoints, 
					int opSize1, 
					int[] opSize2, 
					global::System.IntPtr[] imagePoints, 
					int ipSize1, 
					int[] ipSize2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double aspectRatio)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			int* unsafe_opSize2;
			global::System.IntPtr* unsafe_imagePoints;
			int* unsafe_ipSize2;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (int* pinned_opSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(opSize2))
				{
					unsafe_opSize2 = (int*)pinned_opSize2;
					fixed (global::System.IntPtr* pinned_imagePoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints))
					{
						unsafe_imagePoints = (global::System.IntPtr*)pinned_imagePoints;
						fixed (int* pinned_ipSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ipSize2))
						{
							unsafe_ipSize2 = (int*)pinned_ipSize2;
							// Call to native method
							unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_initCameraMatrix2D_array(
												unsafe_objectPoints, 
												opSize1, 
												unsafe_opSize2, 
												unsafe_imagePoints, 
												ipSize1, 
												unsafe_ipSize2, 
												imageSize, 
												aspectRatio
											);
							global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_findChessboardCorners_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findChessboardCorners_InputArray")]
		public static int calib3d_findChessboardCorners_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int flags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findChessboardCorners_InputArray(
								image, 
								patternSize, 
								corners, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_findChessboardCorners_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findChessboardCorners_vector")]
		public static int calib3d_findChessboardCorners_vector(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int flags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findChessboardCorners_vector(
								image, 
								patternSize, 
								corners, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_find4QuadCornerSubpix_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_find4QuadCornerSubpix_InputArray")]
		public static int calib3d_find4QuadCornerSubpix_InputArray(
					global::System.IntPtr img, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp regionSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_find4QuadCornerSubpix_InputArray(
								img, 
								corners, 
								regionSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_find4QuadCornerSubpix_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_find4QuadCornerSubpix_vector")]
		public static int calib3d_find4QuadCornerSubpix_vector(
					global::System.IntPtr img, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp regionSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_find4QuadCornerSubpix_vector(
								img, 
								corners, 
								regionSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_drawChessboardCorners_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_drawChessboardCorners_InputArray")]
		public static void calib3d_drawChessboardCorners_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int patternWasFound)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_drawChessboardCorners_InputArray(
								image, 
								patternSize, 
								corners, 
								patternWasFound
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_drawChessboardCorners_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_drawChessboardCorners_array")]
		public static void calib3d_drawChessboardCorners_array(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] corners, 
					int cornersLength, 
					int patternWasFound)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_corners = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (corners == null)
					unsafe_corners = null;
				else
				{
					if (corners != null)
						unsafe_corners = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(corners.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (corners != null)
						for (uint mcgIdx = 0; (mcgIdx < corners.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp corners
							unsafe_corners[mcgIdx] = corners[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_drawChessboardCorners_array(
									image, 
									patternSize, 
									unsafe_corners, 
									cornersLength, 
									patternWasFound
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_corners);
			}
		}

		// Signature, calib3d_findCirclesGrid_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findCirclesGrid_InputArray")]
		public static int calib3d_findCirclesGrid_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr centers, 
					int flags, 
					global::System.IntPtr blobDetector)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findCirclesGrid_InputArray(
								image, 
								patternSize, 
								centers, 
								flags, 
								blobDetector
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_findCirclesGrid_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findCirclesGrid_vector")]
		public static int calib3d_findCirclesGrid_vector(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr centers, 
					int flags, 
					global::System.IntPtr blobDetector)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findCirclesGrid_vector(
								image, 
								patternSize, 
								centers, 
								flags, 
								blobDetector
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_calibrateCamera_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_calibrateCamera_InputArray")]
		public static double calib3d_calibrateCamera_InputArray(
					global::System.IntPtr[] objectPoints, 
					int objectPointsSize, 
					global::System.IntPtr[] imagePoints, 
					int imagePointsSize, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvecs, 
					global::System.IntPtr tvecs, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			global::System.IntPtr* unsafe_imagePoints;
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (global::System.IntPtr* pinned_imagePoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints))
				{
					unsafe_imagePoints = (global::System.IntPtr*)pinned_imagePoints;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_calibrateCamera_InputArray(
										unsafe_objectPoints, 
										objectPointsSize, 
										unsafe_imagePoints, 
										imagePointsSize, 
										imageSize, 
										cameraMatrix, 
										distCoeffs, 
										rvecs, 
										tvecs, 
										flags, 
										criteria
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_calibrateCamera_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_calibrateCamera_vector")]
		public static double calib3d_calibrateCamera_vector(
					global::System.IntPtr[] objectPoints, 
					int opSize1, 
					int[] opSize2, 
					global::System.IntPtr[] imagePoints, 
					int ipSize1, 
					int[] ipSize2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double[] cameraMatrix, 
					double[] distCoeffs, 
					int distCoeffsSize, 
					global::System.IntPtr rvecs, 
					global::System.IntPtr tvecs, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			int* unsafe_opSize2;
			global::System.IntPtr* unsafe_imagePoints;
			int* unsafe_ipSize2;
			double* unsafe_cameraMatrix;
			double* unsafe_distCoeffs;
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (int* pinned_opSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(opSize2))
				{
					unsafe_opSize2 = (int*)pinned_opSize2;
					fixed (global::System.IntPtr* pinned_imagePoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints))
					{
						unsafe_imagePoints = (global::System.IntPtr*)pinned_imagePoints;
						fixed (int* pinned_ipSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ipSize2))
						{
							unsafe_ipSize2 = (int*)pinned_ipSize2;
							fixed (double* pinned_cameraMatrix = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix))
							{
								unsafe_cameraMatrix = (double*)pinned_cameraMatrix;
								fixed (double* pinned_distCoeffs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs))
								{
									unsafe_distCoeffs = (double*)pinned_distCoeffs;
									// Call to native method
									unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_calibrateCamera_vector(
														unsafe_objectPoints, 
														opSize1, 
														unsafe_opSize2, 
														unsafe_imagePoints, 
														ipSize1, 
														unsafe_ipSize2, 
														imageSize, 
														unsafe_cameraMatrix, 
														unsafe_distCoeffs, 
														distCoeffsSize, 
														rvecs, 
														tvecs, 
														flags, 
														criteria
													);
									global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
								}
							}
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_calibrationMatrixValues_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_calibrationMatrixValues_InputArray")]
		public static void calib3d_calibrationMatrixValues_InputArray(
					global::System.IntPtr cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double apertureWidth, 
					double apertureHeight, 
					out double fovx, 
					out double fovy, 
					out double focalLength, 
					out global::OpenCvSharp.Point2d__OpenCvSharp principalPoint, 
					out double aspectRatio)
		{
			// Setup
			double unsafe_fovx;
			double unsafe_fovy;
			double unsafe_focalLength;
			global::OpenCvSharp.Point2d__OpenCvSharp unsafe_principalPoint;
			double unsafe_aspectRatio;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_calibrationMatrixValues_InputArray(
								cameraMatrix, 
								imageSize, 
								apertureWidth, 
								apertureHeight, 
								&(unsafe_fovx), 
								&(unsafe_fovy), 
								&(unsafe_focalLength), 
								&(unsafe_principalPoint), 
								&(unsafe_aspectRatio)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			aspectRatio = unsafe_aspectRatio;
			principalPoint = unsafe_principalPoint;
			focalLength = unsafe_focalLength;
			fovy = unsafe_fovy;
			fovx = unsafe_fovx;
			// Return
		}

		// Signature, calib3d_calibrationMatrixValues_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_calibrationMatrixValues_array")]
		public static void calib3d_calibrationMatrixValues_array(
					double[] cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double apertureWidth, 
					double apertureHeight, 
					out double fovx, 
					out double fovy, 
					out double focalLength, 
					out global::OpenCvSharp.Point2d__OpenCvSharp principalPoint, 
					out double aspectRatio)
		{
			// Setup
			double* unsafe_cameraMatrix;
			double unsafe_fovx;
			double unsafe_fovy;
			double unsafe_focalLength;
			global::OpenCvSharp.Point2d__OpenCvSharp unsafe_principalPoint;
			double unsafe_aspectRatio;
			// Marshalling
			fixed (double* pinned_cameraMatrix = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix))
			{
				unsafe_cameraMatrix = (double*)pinned_cameraMatrix;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_calibrationMatrixValues_array(
									unsafe_cameraMatrix, 
									imageSize, 
									apertureWidth, 
									apertureHeight, 
									&(unsafe_fovx), 
									&(unsafe_fovy), 
									&(unsafe_focalLength), 
									&(unsafe_principalPoint), 
									&(unsafe_aspectRatio)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				aspectRatio = unsafe_aspectRatio;
				principalPoint = unsafe_principalPoint;
				focalLength = unsafe_focalLength;
				fovy = unsafe_fovy;
				fovx = unsafe_fovx;
			}
			// Return
		}

		// Signature, calib3d_stereoCalibrate_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoCalibrate_InputArray")]
		public static double calib3d_stereoCalibrate_InputArray(
					global::System.IntPtr[] objectPoints, 
					int opSize, 
					global::System.IntPtr[] imagePoints1, 
					int ip1Size, 
					global::System.IntPtr[] imagePoints2, 
					int ip2Size, 
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr E, 
					global::System.IntPtr F, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			global::System.IntPtr* unsafe_imagePoints1;
			global::System.IntPtr* unsafe_imagePoints2;
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (global::System.IntPtr* pinned_imagePoints1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints1))
				{
					unsafe_imagePoints1 = (global::System.IntPtr*)pinned_imagePoints1;
					fixed (global::System.IntPtr* pinned_imagePoints2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints2))
					{
						unsafe_imagePoints2 = (global::System.IntPtr*)pinned_imagePoints2;
						// Call to native method
						unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoCalibrate_InputArray(
											unsafe_objectPoints, 
											opSize, 
											unsafe_imagePoints1, 
											ip1Size, 
											unsafe_imagePoints2, 
											ip2Size, 
											cameraMatrix1, 
											distCoeffs1, 
											cameraMatrix2, 
											distCoeffs2, 
											imageSize, 
											R, 
											T, 
											E, 
											F, 
											flags, 
											criteria
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_stereoCalibrate_array, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoCalibrate_array")]
		public static double calib3d_stereoCalibrate_array(
					global::System.IntPtr[] objectPoints, 
					int opSize1, 
					int[] opSizes2, 
					global::System.IntPtr[] imagePoints1, 
					int ip1Size1, 
					int[] ip1Sizes2, 
					global::System.IntPtr[] imagePoints2, 
					int ip2Size1, 
					int[] ip2Sizes2, 
					double[] cameraMatrix1, 
					double[] distCoeffs1, 
					int dc1Size, 
					double[] cameraMatrix2, 
					double[] distCoeffs2, 
					int dc2Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr E, 
					global::System.IntPtr F, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::System.IntPtr* unsafe_objectPoints;
			int* unsafe_opSizes2;
			global::System.IntPtr* unsafe_imagePoints1;
			int* unsafe_ip1Sizes2;
			global::System.IntPtr* unsafe_imagePoints2;
			int* unsafe_ip2Sizes2;
			double* unsafe_cameraMatrix1;
			double* unsafe_distCoeffs1;
			double* unsafe_cameraMatrix2;
			double* unsafe_distCoeffs2;
			double unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_objectPoints = global::McgInterop.McgCoreHelpers.GetArrayForCompat(objectPoints))
			{
				unsafe_objectPoints = (global::System.IntPtr*)pinned_objectPoints;
				fixed (int* pinned_opSizes2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(opSizes2))
				{
					unsafe_opSizes2 = (int*)pinned_opSizes2;
					fixed (global::System.IntPtr* pinned_imagePoints1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints1))
					{
						unsafe_imagePoints1 = (global::System.IntPtr*)pinned_imagePoints1;
						fixed (int* pinned_ip1Sizes2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ip1Sizes2))
						{
							unsafe_ip1Sizes2 = (int*)pinned_ip1Sizes2;
							fixed (global::System.IntPtr* pinned_imagePoints2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imagePoints2))
							{
								unsafe_imagePoints2 = (global::System.IntPtr*)pinned_imagePoints2;
								fixed (int* pinned_ip2Sizes2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ip2Sizes2))
								{
									unsafe_ip2Sizes2 = (int*)pinned_ip2Sizes2;
									fixed (double* pinned_cameraMatrix1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix1))
									{
										unsafe_cameraMatrix1 = (double*)pinned_cameraMatrix1;
										fixed (double* pinned_distCoeffs1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs1))
										{
											unsafe_distCoeffs1 = (double*)pinned_distCoeffs1;
											fixed (double* pinned_cameraMatrix2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix2))
											{
												unsafe_cameraMatrix2 = (double*)pinned_cameraMatrix2;
												fixed (double* pinned_distCoeffs2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs2))
												{
													unsafe_distCoeffs2 = (double*)pinned_distCoeffs2;
													// Call to native method
													unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoCalibrate_array(
																		unsafe_objectPoints, 
																		opSize1, 
																		unsafe_opSizes2, 
																		unsafe_imagePoints1, 
																		ip1Size1, 
																		unsafe_ip1Sizes2, 
																		unsafe_imagePoints2, 
																		ip2Size1, 
																		unsafe_ip2Sizes2, 
																		unsafe_cameraMatrix1, 
																		unsafe_distCoeffs1, 
																		dc1Size, 
																		unsafe_cameraMatrix2, 
																		unsafe_distCoeffs2, 
																		dc2Size, 
																		imageSize, 
																		R, 
																		T, 
																		E, 
																		F, 
																		flags, 
																		criteria
																	);
													global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_stereoRectify_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoRectify_InputArray")]
		public static void calib3d_stereoRectify_InputArray(
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr R1, 
					global::System.IntPtr R2, 
					global::System.IntPtr P1, 
					global::System.IntPtr P2, 
					global::System.IntPtr Q, 
					int flags, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImageSize, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI1, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI2)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI1;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI2;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoRectify_InputArray(
								cameraMatrix1, 
								distCoeffs1, 
								cameraMatrix2, 
								distCoeffs2, 
								imageSize, 
								R, 
								T, 
								R1, 
								R2, 
								P1, 
								P2, 
								Q, 
								flags, 
								alpha, 
								newImageSize, 
								&(unsafe_validPixROI1), 
								&(unsafe_validPixROI2)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			validPixROI2 = unsafe_validPixROI2;
			validPixROI1 = unsafe_validPixROI1;
			// Return
		}

		// Signature, calib3d_stereoRectify_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoRectify_array")]
		public static void calib3d_stereoRectify_array(
					double[] cameraMatrix1, 
					double[] distCoeffs1, 
					int dc1Size, 
					double[] cameraMatrix2, 
					double[] distCoeffs2, 
					int dc2Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double[] R, 
					double[] T, 
					double[] R1, 
					double[] R2, 
					double[] P1, 
					double[] P2, 
					double[] Q, 
					int flags, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImageSize, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI1, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI2)
		{
			// Setup
			double* unsafe_cameraMatrix1;
			double* unsafe_distCoeffs1;
			double* unsafe_cameraMatrix2;
			double* unsafe_distCoeffs2;
			double* unsafe_R;
			double* unsafe_T;
			double* unsafe_R1;
			double* unsafe_R2;
			double* unsafe_P1;
			double* unsafe_P2;
			double* unsafe_Q;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI1;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI2;
			// Marshalling
			fixed (double* pinned_cameraMatrix1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix1))
			{
				unsafe_cameraMatrix1 = (double*)pinned_cameraMatrix1;
				fixed (double* pinned_distCoeffs1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs1))
				{
					unsafe_distCoeffs1 = (double*)pinned_distCoeffs1;
					fixed (double* pinned_cameraMatrix2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix2))
					{
						unsafe_cameraMatrix2 = (double*)pinned_cameraMatrix2;
						fixed (double* pinned_distCoeffs2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs2))
						{
							unsafe_distCoeffs2 = (double*)pinned_distCoeffs2;
							fixed (double* pinned_R = global::McgInterop.McgCoreHelpers.GetArrayForCompat(R))
							{
								unsafe_R = (double*)pinned_R;
								fixed (double* pinned_T = global::McgInterop.McgCoreHelpers.GetArrayForCompat(T))
								{
									unsafe_T = (double*)pinned_T;
									fixed (double* pinned_R1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(R1))
									{
										unsafe_R1 = (double*)pinned_R1;
										fixed (double* pinned_R2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(R2))
										{
											unsafe_R2 = (double*)pinned_R2;
											fixed (double* pinned_P1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(P1))
											{
												unsafe_P1 = (double*)pinned_P1;
												fixed (double* pinned_P2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(P2))
												{
													unsafe_P2 = (double*)pinned_P2;
													fixed (double* pinned_Q = global::McgInterop.McgCoreHelpers.GetArrayForCompat(Q))
													{
														unsafe_Q = (double*)pinned_Q;
														// Call to native method
														global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoRectify_array(
																			unsafe_cameraMatrix1, 
																			unsafe_distCoeffs1, 
																			dc1Size, 
																			unsafe_cameraMatrix2, 
																			unsafe_distCoeffs2, 
																			dc2Size, 
																			imageSize, 
																			unsafe_R, 
																			unsafe_T, 
																			unsafe_R1, 
																			unsafe_R2, 
																			unsafe_P1, 
																			unsafe_P2, 
																			unsafe_Q, 
																			flags, 
																			alpha, 
																			newImageSize, 
																			&(unsafe_validPixROI1), 
																			&(unsafe_validPixROI2)
																		);
														global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
														validPixROI2 = unsafe_validPixROI2;
														validPixROI1 = unsafe_validPixROI1;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			// Return
		}

		// Signature, calib3d_stereoRectifyUncalibrated_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoRectifyUncalibrated_InputArray")]
		public static int calib3d_stereoRectifyUncalibrated_InputArray(
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					global::System.IntPtr F, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					global::System.IntPtr H1, 
					global::System.IntPtr H2, 
					double threshold)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoRectifyUncalibrated_InputArray(
								points1, 
								points2, 
								F, 
								imgSize, 
								H1, 
								H2, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_stereoRectifyUncalibrated_array, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_stereoRectifyUncalibrated_array")]
		public static int calib3d_stereoRectifyUncalibrated_array(
					global::OpenCvSharp.Point2d__OpenCvSharp[] points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] points2, 
					int points2Size, 
					double[] F, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					double[] H1, 
					double[] H2, 
					double threshold)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points1 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points2 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			double* unsafe_F;
			double* unsafe_H1;
			double* unsafe_H2;
			int unsafe___value;
			try
			{
				// Marshalling
				if (points1 == null)
					unsafe_points1 = null;
				else
				{
					if (points1 != null)
						unsafe_points1 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points1.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (points1 != null)
						for (uint mcgIdx = 0; (mcgIdx < points1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points1
							unsafe_points1[mcgIdx] = points1[mcgIdx];
						}
				}
				if (points2 == null)
					unsafe_points2 = null;
				else
				{
					if (points2 != null)
						unsafe_points2 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points2.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (points2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < points2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points2
							unsafe_points2[mcgIdx_2] = points2[mcgIdx_2];
						}
				}
				fixed (double* pinned_F = global::McgInterop.McgCoreHelpers.GetArrayForCompat(F))
				{
					unsafe_F = (double*)pinned_F;
					fixed (double* pinned_H1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(H1))
					{
						unsafe_H1 = (double*)pinned_H1;
						fixed (double* pinned_H2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(H2))
						{
							unsafe_H2 = (double*)pinned_H2;
							// Call to native method
							unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_stereoRectifyUncalibrated_array(
												unsafe_points1, 
												points1Size, 
												unsafe_points2, 
												points2Size, 
												unsafe_F, 
												imgSize, 
												unsafe_H1, 
												unsafe_H2, 
												threshold
											);
							global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						}
					}
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points2);
			}
		}

		// Signature, calib3d_rectify3Collinear_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_rectify3Collinear_InputArray")]
		public static float calib3d_rectify3Collinear_InputArray(
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::System.IntPtr cameraMatrix3, 
					global::System.IntPtr distCoeffs3, 
					global::System.IntPtr[] imgpt1, 
					int imgpt1Size, 
					global::System.IntPtr[] imgpt3, 
					int imgpt3Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R12, 
					global::System.IntPtr T12, 
					global::System.IntPtr R13, 
					global::System.IntPtr T13, 
					global::System.IntPtr R1, 
					global::System.IntPtr R2, 
					global::System.IntPtr R3, 
					global::System.IntPtr P1, 
					global::System.IntPtr P2, 
					global::System.IntPtr P3, 
					global::System.IntPtr Q, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					out global::OpenCvSharp.Rect__OpenCvSharp roi1, 
					out global::OpenCvSharp.Rect__OpenCvSharp roi2, 
					int flags)
		{
			// Setup
			global::System.IntPtr* unsafe_imgpt1;
			global::System.IntPtr* unsafe_imgpt3;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_roi1;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_roi2;
			float unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_imgpt1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imgpt1))
			{
				unsafe_imgpt1 = (global::System.IntPtr*)pinned_imgpt1;
				fixed (global::System.IntPtr* pinned_imgpt3 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(imgpt3))
				{
					unsafe_imgpt3 = (global::System.IntPtr*)pinned_imgpt3;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_rectify3Collinear_InputArray(
										cameraMatrix1, 
										distCoeffs1, 
										cameraMatrix2, 
										distCoeffs2, 
										cameraMatrix3, 
										distCoeffs3, 
										unsafe_imgpt1, 
										imgpt1Size, 
										unsafe_imgpt3, 
										imgpt3Size, 
										imageSize, 
										R12, 
										T12, 
										R13, 
										T13, 
										R1, 
										R2, 
										R3, 
										P1, 
										P2, 
										P3, 
										Q, 
										alpha, 
										newImgSize, 
										&(unsafe_roi1), 
										&(unsafe_roi2), 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					roi2 = unsafe_roi2;
					roi1 = unsafe_roi1;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_getOptimalNewCameraMatrix_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_getOptimalNewCameraMatrix_InputArray")]
		public static global::System.IntPtr calib3d_getOptimalNewCameraMatrix_InputArray(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI, 
					int centerPrincipalPoint)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI;
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_getOptimalNewCameraMatrix_InputArray(
								cameraMatrix, 
								distCoeffs, 
								imageSize, 
								alpha, 
								newImgSize, 
								&(unsafe_validPixROI), 
								centerPrincipalPoint
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			validPixROI = unsafe_validPixROI;
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_getOptimalNewCameraMatrix_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_getOptimalNewCameraMatrix_array")]
		public static void calib3d_getOptimalNewCameraMatrix_array(
					double[] cameraMatrix, 
					double[] distCoeffs, 
					int distCoeffsSize, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					out global::OpenCvSharp.Rect__OpenCvSharp validPixROI, 
					int centerPrincipalPoint, 
					double[] outValues)
		{
			// Setup
			double* unsafe_cameraMatrix;
			double* unsafe_distCoeffs;
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_validPixROI;
			double* unsafe_outValues;
			// Marshalling
			fixed (double* pinned_cameraMatrix = global::McgInterop.McgCoreHelpers.GetArrayForCompat(cameraMatrix))
			{
				unsafe_cameraMatrix = (double*)pinned_cameraMatrix;
				fixed (double* pinned_distCoeffs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(distCoeffs))
				{
					unsafe_distCoeffs = (double*)pinned_distCoeffs;
					fixed (double* pinned_outValues = global::McgInterop.McgCoreHelpers.GetArrayForCompat(outValues))
					{
						unsafe_outValues = (double*)pinned_outValues;
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_getOptimalNewCameraMatrix_array(
											unsafe_cameraMatrix, 
											unsafe_distCoeffs, 
											distCoeffsSize, 
											imageSize, 
											alpha, 
											newImgSize, 
											&(unsafe_validPixROI), 
											centerPrincipalPoint, 
											unsafe_outValues
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
					validPixROI = unsafe_validPixROI;
				}
			}
			// Return
		}

		// Signature, calib3d_convertPointsToHomogeneous_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsToHomogeneous_InputArray")]
		public static void calib3d_convertPointsToHomogeneous_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsToHomogeneous_InputArray(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_convertPointsToHomogeneous_array1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsToHomogeneous_array1")]
		public static void calib3d_convertPointsToHomogeneous_array1(
					global::OpenCvSharp.Vec2f__OpenCvSharp[] src, 
					global::OpenCvSharp.Vec3f__OpenCvSharp[] dst, 
					int length)
		{
			// Setup
			global::OpenCvSharp.Vec2f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Vec2f__OpenCvSharp*);
			global::OpenCvSharp.Vec3f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Vec3f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Vec2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Vec2f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Vec3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Vec3f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsToHomogeneous_array1(
									unsafe_src, 
									unsafe_dst, 
									length
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (dst != null)
					for (uint mcgIdx_3 = 0; (mcgIdx_3 < dst.Length); mcgIdx_3++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp dst
						dst[mcgIdx_3] = unsafe_dst[mcgIdx_3];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, calib3d_convertPointsToHomogeneous_array2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsToHomogeneous_array2")]
		public static void calib3d_convertPointsToHomogeneous_array2(
					global::OpenCvSharp.Vec3f__OpenCvSharp[] src, 
					global::OpenCvSharp.Vec4f__OpenCvSharp[] dst, 
					int length)
		{
			// Setup
			global::OpenCvSharp.Vec3f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Vec3f__OpenCvSharp*);
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Vec3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Vec3f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsToHomogeneous_array2(
									unsafe_src, 
									unsafe_dst, 
									length
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (dst != null)
					for (uint mcgIdx_3 = 0; (mcgIdx_3 < dst.Length); mcgIdx_3++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp dst
						dst[mcgIdx_3] = unsafe_dst[mcgIdx_3];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, calib3d_convertPointsFromHomogeneous_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsFromHomogeneous_InputArray")]
		public static void calib3d_convertPointsFromHomogeneous_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsFromHomogeneous_InputArray(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_convertPointsFromHomogeneous_array1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsFromHomogeneous_array1")]
		public static void calib3d_convertPointsFromHomogeneous_array1(
					global::OpenCvSharp.Vec3f__OpenCvSharp[] src, 
					global::OpenCvSharp.Vec2f__OpenCvSharp[] dst, 
					int length)
		{
			// Setup
			global::OpenCvSharp.Vec3f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Vec3f__OpenCvSharp*);
			global::OpenCvSharp.Vec2f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Vec2f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Vec3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Vec3f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Vec2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Vec2f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsFromHomogeneous_array1(
									unsafe_src, 
									unsafe_dst, 
									length
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (dst != null)
					for (uint mcgIdx_3 = 0; (mcgIdx_3 < dst.Length); mcgIdx_3++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp dst
						dst[mcgIdx_3] = unsafe_dst[mcgIdx_3];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, calib3d_convertPointsFromHomogeneous_array2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsFromHomogeneous_array2")]
		public static void calib3d_convertPointsFromHomogeneous_array2(
					global::OpenCvSharp.Vec4f__OpenCvSharp[] src, 
					global::OpenCvSharp.Vec3f__OpenCvSharp[] dst, 
					int length)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			global::OpenCvSharp.Vec3f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Vec3f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Vec3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Vec3f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsFromHomogeneous_array2(
									unsafe_src, 
									unsafe_dst, 
									length
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (dst != null)
					for (uint mcgIdx_3 = 0; (mcgIdx_3 < dst.Length); mcgIdx_3++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp dst
						dst[mcgIdx_3] = unsafe_dst[mcgIdx_3];
					}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, calib3d_convertPointsHomogeneous, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_convertPointsHomogeneous")]
		public static void calib3d_convertPointsHomogeneous(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_convertPointsHomogeneous(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_findFundamentalMat_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findFundamentalMat_InputArray")]
		public static global::System.IntPtr calib3d_findFundamentalMat_InputArray(
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					int method, 
					double param1, 
					double param2, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findFundamentalMat_InputArray(
								points1, 
								points2, 
								method, 
								param1, 
								param2, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_findFundamentalMat_array, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_findFundamentalMat_array")]
		public static global::System.IntPtr calib3d_findFundamentalMat_array(
					global::OpenCvSharp.Point2d__OpenCvSharp[] points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] points2, 
					int points2Size, 
					int method, 
					double param1, 
					double param2, 
					global::System.IntPtr mask)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points1 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points2 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (points1 == null)
					unsafe_points1 = null;
				else
				{
					if (points1 != null)
						unsafe_points1 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points1.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (points1 != null)
						for (uint mcgIdx = 0; (mcgIdx < points1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points1
							unsafe_points1[mcgIdx] = points1[mcgIdx];
						}
				}
				if (points2 == null)
					unsafe_points2 = null;
				else
				{
					if (points2 != null)
						unsafe_points2 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points2.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (points2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < points2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points2
							unsafe_points2[mcgIdx_2] = points2[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_findFundamentalMat_array(
									unsafe_points1, 
									points1Size, 
									unsafe_points2, 
									points2Size, 
									method, 
									param1, 
									param2, 
									mask
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points2);
			}
		}

		// Signature, calib3d_computeCorrespondEpilines_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_computeCorrespondEpilines_InputArray")]
		public static void calib3d_computeCorrespondEpilines_InputArray(
					global::System.IntPtr points, 
					int whichImage, 
					global::System.IntPtr F, 
					global::System.IntPtr lines)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_computeCorrespondEpilines_InputArray(
								points, 
								whichImage, 
								F, 
								lines
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_computeCorrespondEpilines_array2d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_computeCorrespondEpilines_array2d")]
		public static void calib3d_computeCorrespondEpilines_array2d(
					global::OpenCvSharp.Point2d__OpenCvSharp[] points, 
					int pointsSize, 
					int whichImage, 
					double[] F, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] lines)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			double* unsafe_F;
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_lines = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (double* pinned_F = global::McgInterop.McgCoreHelpers.GetArrayForCompat(F))
				{
					unsafe_F = (double*)pinned_F;
					if (lines == null)
						unsafe_lines = null;
					else
					{
						if (lines != null)
							unsafe_lines = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(lines.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
						if (lines != null)
							for (uint mcgIdx_2 = 0; (mcgIdx_2 < lines.Length); mcgIdx_2++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp lines
								unsafe_lines[mcgIdx_2] = lines[mcgIdx_2];
							}
					}
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_computeCorrespondEpilines_array2d(
										unsafe_points, 
										pointsSize, 
										whichImage, 
										unsafe_F, 
										unsafe_lines
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					if (lines != null)
						for (uint mcgIdx_3 = 0; (mcgIdx_3 < lines.Length); mcgIdx_3++)
						{
							// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp lines
							lines[mcgIdx_3] = unsafe_lines[mcgIdx_3];
						}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lines);
			}
		}

		// Signature, calib3d_computeCorrespondEpilines_array3d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_computeCorrespondEpilines_array3d")]
		public static void calib3d_computeCorrespondEpilines_array3d(
					global::OpenCvSharp.Point3d__OpenCvSharp[] points, 
					int pointsSize, 
					int whichImage, 
					double[] F, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] lines)
		{
			// Setup
			global::OpenCvSharp.Point3d__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point3d__OpenCvSharp*);
			double* unsafe_F;
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_lines = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point3d__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (double* pinned_F = global::McgInterop.McgCoreHelpers.GetArrayForCompat(F))
				{
					unsafe_F = (double*)pinned_F;
					if (lines == null)
						unsafe_lines = null;
					else
					{
						if (lines != null)
							unsafe_lines = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(lines.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
						if (lines != null)
							for (uint mcgIdx_2 = 0; (mcgIdx_2 < lines.Length); mcgIdx_2++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp lines
								unsafe_lines[mcgIdx_2] = lines[mcgIdx_2];
							}
					}
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_computeCorrespondEpilines_array3d(
										unsafe_points, 
										pointsSize, 
										whichImage, 
										unsafe_F, 
										unsafe_lines
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					if (lines != null)
						for (uint mcgIdx_3 = 0; (mcgIdx_3 < lines.Length); mcgIdx_3++)
						{
							// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp lines
							lines[mcgIdx_3] = unsafe_lines[mcgIdx_3];
						}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lines);
			}
		}

		// Signature, calib3d_triangulatePoints_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_triangulatePoints_InputArray")]
		public static void calib3d_triangulatePoints_InputArray(
					global::System.IntPtr projMatr1, 
					global::System.IntPtr projMatr2, 
					global::System.IntPtr projPoints1, 
					global::System.IntPtr projPoints2, 
					global::System.IntPtr points4D)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_triangulatePoints_InputArray(
								projMatr1, 
								projMatr2, 
								projPoints1, 
								projPoints2, 
								points4D
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_triangulatePoints_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4d__OpenCvSharp__OpenCvSharp__Vec4d__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_triangulatePoints_array")]
		public static void calib3d_triangulatePoints_array(
					double[] projMatr1, 
					double[] projMatr2, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] projPoints1, 
					int projPoints1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] projPoints2, 
					int projPoints2Size, 
					global::OpenCvSharp.Vec4d__OpenCvSharp[] points4D)
		{
			// Setup
			double* unsafe_projMatr1;
			double* unsafe_projMatr2;
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_projPoints1 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_projPoints2 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Vec4d__OpenCvSharp* unsafe_points4D = default(global::OpenCvSharp.Vec4d__OpenCvSharp*);
			try
			{
				// Marshalling
				fixed (double* pinned_projMatr1 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(projMatr1))
				{
					unsafe_projMatr1 = (double*)pinned_projMatr1;
					fixed (double* pinned_projMatr2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(projMatr2))
					{
						unsafe_projMatr2 = (double*)pinned_projMatr2;
						if (projPoints1 == null)
							unsafe_projPoints1 = null;
						else
						{
							if (projPoints1 != null)
								unsafe_projPoints1 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(projPoints1.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
							if (projPoints1 != null)
								for (uint mcgIdx = 0; (mcgIdx < projPoints1.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp projPoints1
									unsafe_projPoints1[mcgIdx] = projPoints1[mcgIdx];
								}
						}
						if (projPoints2 == null)
							unsafe_projPoints2 = null;
						else
						{
							if (projPoints2 != null)
								unsafe_projPoints2 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(projPoints2.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
							if (projPoints2 != null)
								for (uint mcgIdx_2 = 0; (mcgIdx_2 < projPoints2.Length); mcgIdx_2++)
								{
									// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp projPoints2
									unsafe_projPoints2[mcgIdx_2] = projPoints2[mcgIdx_2];
								}
						}
						if (points4D == null)
							unsafe_points4D = null;
						else
						{
							if (points4D != null)
								unsafe_points4D = (global::OpenCvSharp.Vec4d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points4D.Length * sizeof(global::OpenCvSharp.Vec4d__OpenCvSharp))));
							if (points4D != null)
								for (uint mcgIdx_4 = 0; (mcgIdx_4 < points4D.Length); mcgIdx_4++)
								{
									// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4d__OpenCvSharp__OpenCvSharp__Vec4d__OpenCvSharp points4D
									unsafe_points4D[mcgIdx_4] = points4D[mcgIdx_4];
								}
						}
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_triangulatePoints_array(
											unsafe_projMatr1, 
											unsafe_projMatr2, 
											unsafe_projPoints1, 
											projPoints1Size, 
											unsafe_projPoints2, 
											projPoints2Size, 
											unsafe_points4D
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						if (points4D != null)
							for (uint mcgIdx_5 = 0; (mcgIdx_5 < points4D.Length); mcgIdx_5++)
							{
								// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4d__OpenCvSharp__OpenCvSharp__Vec4d__OpenCvSharp points4D
								points4D[mcgIdx_5] = unsafe_points4D[mcgIdx_5];
							}
					}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_projPoints1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_projPoints2);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points4D);
			}
		}

		// Signature, calib3d_correctMatches_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_correctMatches_InputArray")]
		public static void calib3d_correctMatches_InputArray(
					global::System.IntPtr F, 
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					global::System.IntPtr newPoints1, 
					global::System.IntPtr newPoints2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_correctMatches_InputArray(
								F, 
								points1, 
								points2, 
								newPoints1, 
								newPoints2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_correctMatches_array, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_correctMatches_array")]
		public static void calib3d_correctMatches_array(
					double[] F, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] points2, 
					int points2Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] newPoints1, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] newPoints2)
		{
			// Setup
			double* unsafe_F;
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points1 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_points2 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_newPoints1 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_newPoints2 = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			try
			{
				// Marshalling
				fixed (double* pinned_F = global::McgInterop.McgCoreHelpers.GetArrayForCompat(F))
				{
					unsafe_F = (double*)pinned_F;
					if (points1 == null)
						unsafe_points1 = null;
					else
					{
						if (points1 != null)
							unsafe_points1 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points1.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
						if (points1 != null)
							for (uint mcgIdx = 0; (mcgIdx < points1.Length); mcgIdx++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points1
								unsafe_points1[mcgIdx] = points1[mcgIdx];
							}
					}
					if (points2 == null)
						unsafe_points2 = null;
					else
					{
						if (points2 != null)
							unsafe_points2 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points2.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
						if (points2 != null)
							for (uint mcgIdx_2 = 0; (mcgIdx_2 < points2.Length); mcgIdx_2++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp points2
								unsafe_points2[mcgIdx_2] = points2[mcgIdx_2];
							}
					}
					if (newPoints1 == null)
						unsafe_newPoints1 = null;
					else
					{
						if (newPoints1 != null)
							unsafe_newPoints1 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(newPoints1.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
						if (newPoints1 != null)
							for (uint mcgIdx_4 = 0; (mcgIdx_4 < newPoints1.Length); mcgIdx_4++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp newPoints1
								unsafe_newPoints1[mcgIdx_4] = newPoints1[mcgIdx_4];
							}
					}
					if (newPoints2 == null)
						unsafe_newPoints2 = null;
					else
					{
						if (newPoints2 != null)
							unsafe_newPoints2 = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(newPoints2.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
						if (newPoints2 != null)
							for (uint mcgIdx_6 = 0; (mcgIdx_6 < newPoints2.Length); mcgIdx_6++)
							{
								// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp newPoints2
								unsafe_newPoints2[mcgIdx_6] = newPoints2[mcgIdx_6];
							}
					}
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_correctMatches_array(
										unsafe_F, 
										unsafe_points1, 
										points1Size, 
										unsafe_points2, 
										points2Size, 
										unsafe_newPoints1, 
										unsafe_newPoints2
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points2);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_newPoints1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_newPoints2);
			}
		}

		// Signature, calib3d_filterSpeckles, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_filterSpeckles")]
		public static void calib3d_filterSpeckles(
					global::System.IntPtr img, 
					double newVal, 
					int maxSpeckleSize, 
					double maxDiff, 
					global::System.IntPtr buf)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_filterSpeckles(
								img, 
								newVal, 
								maxSpeckleSize, 
								maxDiff, 
								buf
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_getValidDisparityROI, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_getValidDisparityROI")]
		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_getValidDisparityROI(
					global::OpenCvSharp.Rect__OpenCvSharp roi1, 
					global::OpenCvSharp.Rect__OpenCvSharp roi2, 
					int minDisparity, 
					int numberOfDisparities, 
					int SADWindowSize)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_getValidDisparityROI(
								roi1, 
								roi2, 
								minDisparity, 
								numberOfDisparities, 
								SADWindowSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_validateDisparity, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_validateDisparity")]
		public static void calib3d_validateDisparity(
					global::System.IntPtr disparity, 
					global::System.IntPtr cost, 
					int minDisparity, 
					int numberOfDisparities, 
					int disp12MaxDisp)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_validateDisparity(
								disparity, 
								cost, 
								minDisparity, 
								numberOfDisparities, 
								disp12MaxDisp
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_reprojectImageTo3D, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_reprojectImageTo3D")]
		public static void calib3d_reprojectImageTo3D(
					global::System.IntPtr disparity, 
					global::System.IntPtr _3dImage, 
					global::System.IntPtr Q, 
					int handleMissingValues, 
					int ddepth)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_reprojectImageTo3D(
								disparity, 
								_3dImage, 
								Q, 
								handleMissingValues, 
								ddepth
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_estimateAffine3D, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_estimateAffine3D")]
		public static int calib3d_estimateAffine3D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr outVal, 
					global::System.IntPtr inliers, 
					double ransacThreshold, 
					double confidence)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_estimateAffine3D(
								src, 
								dst, 
								outVal, 
								inliers, 
								ransacThreshold, 
								confidence
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_Ptr_StereoBM_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoBM_delete")]
		public static void calib3d_Ptr_StereoBM_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoBM_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_Ptr_StereoBM_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoBM_get")]
		public static global::System.IntPtr calib3d_Ptr_StereoBM_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoBM_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_create")]
		public static global::System.IntPtr calib3d_StereoBM_create(
					int numDisparities, 
					int blockSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_create(
								numDisparities, 
								blockSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_Ptr_StereoBM_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoBM_info")]
		public static global::System.IntPtr calib3d_Ptr_StereoBM_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoBM_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_getPreFilterType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getPreFilterType")]
		public static int calib3d_StereoBM_getPreFilterType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getPreFilterType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setPreFilterType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setPreFilterType")]
		public static void calib3d_StereoBM_setPreFilterType(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setPreFilterType(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getPreFilterSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getPreFilterSize")]
		public static int calib3d_StereoBM_getPreFilterSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getPreFilterSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setPreFilterSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setPreFilterSize")]
		public static void calib3d_StereoBM_setPreFilterSize(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setPreFilterSize(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getPreFilterCap, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getPreFilterCap")]
		public static int calib3d_StereoBM_getPreFilterCap(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getPreFilterCap(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setPreFilterCap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setPreFilterCap")]
		public static void calib3d_StereoBM_setPreFilterCap(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setPreFilterCap(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getTextureThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getTextureThreshold")]
		public static int calib3d_StereoBM_getTextureThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getTextureThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setTextureThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setTextureThreshold")]
		public static void calib3d_StereoBM_setTextureThreshold(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setTextureThreshold(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getUniquenessRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getUniquenessRatio")]
		public static int calib3d_StereoBM_getUniquenessRatio(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getUniquenessRatio(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setUniquenessRatio, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setUniquenessRatio")]
		public static void calib3d_StereoBM_setUniquenessRatio(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setUniquenessRatio(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getSmallerBlockSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getSmallerBlockSize")]
		public static int calib3d_StereoBM_getSmallerBlockSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getSmallerBlockSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setSmallerBlockSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setSmallerBlockSize")]
		public static void calib3d_StereoBM_setSmallerBlockSize(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setSmallerBlockSize(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getROI1, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getROI1")]
		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_StereoBM_getROI1(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getROI1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setROI1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setROI1")]
		public static void calib3d_StereoBM_setROI1(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setROI1(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoBM_getROI2, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_getROI2")]
		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_StereoBM_getROI2(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_getROI2(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoBM_setROI2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoBM_setROI2")]
		public static void calib3d_StereoBM_setROI2(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoBM_setROI2(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_compute, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_compute")]
		public static void calib3d_StereoMatcher_compute(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_compute(
								obj, 
								left, 
								right, 
								disparity
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_Ptr_StereoMatcher_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoMatcher_info")]
		public static global::System.IntPtr calib3d_Ptr_StereoMatcher_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoMatcher_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_getMinDisparity, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getMinDisparity")]
		public static int calib3d_StereoMatcher_getMinDisparity(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getMinDisparity(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setMinDisparity, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setMinDisparity")]
		public static void calib3d_StereoMatcher_setMinDisparity(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setMinDisparity(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_getNumDisparities, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getNumDisparities")]
		public static int calib3d_StereoMatcher_getNumDisparities(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getNumDisparities(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setNumDisparities, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setNumDisparities")]
		public static void calib3d_StereoMatcher_setNumDisparities(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setNumDisparities(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_getBlockSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getBlockSize")]
		public static int calib3d_StereoMatcher_getBlockSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getBlockSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setBlockSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setBlockSize")]
		public static void calib3d_StereoMatcher_setBlockSize(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setBlockSize(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_getSpeckleWindowSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getSpeckleWindowSize")]
		public static int calib3d_StereoMatcher_getSpeckleWindowSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getSpeckleWindowSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setSpeckleWindowSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setSpeckleWindowSize")]
		public static void calib3d_StereoMatcher_setSpeckleWindowSize(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setSpeckleWindowSize(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_getSpeckleRange, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getSpeckleRange")]
		public static int calib3d_StereoMatcher_getSpeckleRange(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getSpeckleRange(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setSpeckleRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setSpeckleRange")]
		public static void calib3d_StereoMatcher_setSpeckleRange(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setSpeckleRange(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoMatcher_getDisp12MaxDiff, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_getDisp12MaxDiff")]
		public static int calib3d_StereoMatcher_getDisp12MaxDiff(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_getDisp12MaxDiff(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoMatcher_setDisp12MaxDiff, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoMatcher_setDisp12MaxDiff")]
		public static void calib3d_StereoMatcher_setDisp12MaxDiff(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoMatcher_setDisp12MaxDiff(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_Ptr_StereoSGBM_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoSGBM_get")]
		public static global::System.IntPtr calib3d_Ptr_StereoSGBM_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoSGBM_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_Ptr_StereoSGBM_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoSGBM_delete")]
		public static void calib3d_Ptr_StereoSGBM_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoSGBM_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoSGBM_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_create")]
		public static global::System.IntPtr calib3d_StereoSGBM_create(
					int minDisparity, 
					int numDisparities, 
					int blockSize, 
					int P1, 
					int P2, 
					int disp12MaxDiff, 
					int preFilterCap, 
					int uniquenessRatio, 
					int speckleWindowSize, 
					int speckleRange, 
					int mode)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_create(
								minDisparity, 
								numDisparities, 
								blockSize, 
								P1, 
								P2, 
								disp12MaxDiff, 
								preFilterCap, 
								uniquenessRatio, 
								speckleWindowSize, 
								speckleRange, 
								mode
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_Ptr_StereoSGBM_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_Ptr_StereoSGBM_info")]
		public static global::System.IntPtr calib3d_Ptr_StereoSGBM_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_Ptr_StereoSGBM_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_getPreFilterCap, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_getPreFilterCap")]
		public static int calib3d_StereoSGBM_getPreFilterCap(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_getPreFilterCap(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_setPreFilterCap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_setPreFilterCap")]
		public static void calib3d_StereoSGBM_setPreFilterCap(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_setPreFilterCap(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoSGBM_getUniquenessRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_getUniquenessRatio")]
		public static int calib3d_StereoSGBM_getUniquenessRatio(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_getUniquenessRatio(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_setUniquenessRatio, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_setUniquenessRatio")]
		public static void calib3d_StereoSGBM_setUniquenessRatio(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_setUniquenessRatio(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoSGBM_getP1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_getP1")]
		public static int calib3d_StereoSGBM_getP1(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_getP1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_setP1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_setP1")]
		public static void calib3d_StereoSGBM_setP1(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_setP1(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoSGBM_getP2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_getP2")]
		public static int calib3d_StereoSGBM_getP2(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_getP2(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_setP2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_setP2")]
		public static void calib3d_StereoSGBM_setP2(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_setP2(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, calib3d_StereoSGBM_getMode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_getMode")]
		public static int calib3d_StereoSGBM_getMode(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_getMode(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, calib3d_StereoSGBM_setMode, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "calib3d_StereoSGBM_setMode")]
		public static void calib3d_StereoSGBM_setMode(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.calib3d_StereoSGBM_setMode(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_setNumThreads, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_setNumThreads")]
		public static void core_setNumThreads(int nthreads)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_setNumThreads(nthreads);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_getNumThreads, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getNumThreads")]
		public static int core_getNumThreads()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getNumThreads();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getThreadNum, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getThreadNum")]
		public static int core_getThreadNum()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getThreadNum();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getBuildInformation, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getBuildInformation")]
		public static void core_getBuildInformation(
					global::System.Text.StringBuilder buf, 
					int maxLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										false, 
										true
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_getBuildInformation(
									unsafe_buf, 
									maxLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_getBuildInformation_length, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getBuildInformation_length")]
		public static int core_getBuildInformation_length()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getBuildInformation_length();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getTickCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getTickCount")]
		public static long core_getTickCount()
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getTickCount();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getTickFrequency, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getTickFrequency")]
		public static double core_getTickFrequency()
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getTickFrequency();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getCPUTickCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getCPUTickCount")]
		public static long core_getCPUTickCount()
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getCPUTickCount();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_checkHardwareSupport, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_checkHardwareSupport")]
		public static int core_checkHardwareSupport(int feature)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_checkHardwareSupport(feature);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_getNumberOfCPUs, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getNumberOfCPUs")]
		public static int core_getNumberOfCPUs()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getNumberOfCPUs();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_fastMalloc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_fastMalloc")]
		public static global::System.IntPtr core_fastMalloc(global::System.IntPtr bufSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_fastMalloc(bufSize);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_fastFree, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_fastFree")]
		public static void core_fastFree(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_fastFree(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_setUseOptimized, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_setUseOptimized")]
		public static void core_setUseOptimized(int onoff)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_setUseOptimized(onoff);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_useOptimized, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_useOptimized")]
		public static int core_useOptimized()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_useOptimized();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, redirectError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_CvErrorCallback__OpenCvSharp__OpenCvSharp__CvErrorCallback__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "redirectError")]
		public static global::System.IntPtr redirectError(
					global::OpenCvSharp.CvErrorCallback__OpenCvSharp errCallback, 
					global::System.IntPtr userdata, 
					ref global::System.IntPtr prevUserdata)
		{
			// Setup
			void* unsafe_errCallback = default(void*);
			global::System.IntPtr unsafe_prevUserdata;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_errCallback = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.CvErrorCallback,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099"), 
									errCallback
								);
				unsafe_prevUserdata = prevUserdata;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.redirectError(
									unsafe_errCallback, 
									userdata, 
									&(unsafe_prevUserdata)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				prevUserdata = unsafe_prevUserdata;
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(errCallback);
			}
		}

		// Signature, core_cvarrToMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_cvarrToMat")]
		public static global::System.IntPtr core_cvarrToMat(
					global::System.IntPtr arr, 
					int copyData, 
					int allowND, 
					int coiMode)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_cvarrToMat(
								arr, 
								copyData, 
								allowND, 
								coiMode
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_extractImageCOI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_extractImageCOI")]
		public static void core_extractImageCOI(
					global::System.IntPtr arr, 
					global::System.IntPtr coiimg, 
					int coi)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_extractImageCOI(
								arr, 
								coiimg, 
								coi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_insertImageCOI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_insertImageCOI")]
		public static void core_insertImageCOI(
					global::System.IntPtr coiimg, 
					global::System.IntPtr arr, 
					int coi)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_insertImageCOI(
								coiimg, 
								arr, 
								coi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_add, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_add")]
		public static void core_add(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_add(
								src1, 
								src2, 
								dst, 
								mask, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_subtract, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_subtract")]
		public static void core_subtract(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_subtract(
								src1, 
								src2, 
								dst, 
								mask, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_multiply, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_multiply")]
		public static void core_multiply(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					double scale, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_multiply(
								src1, 
								src2, 
								dst, 
								scale, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_divide, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_divide")]
		public static void core_divide(
					double scale, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_divide(
								scale, 
								src2, 
								dst, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_divide__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_divide")]
		public static void core_divide__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					double scale, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_divide__0(
								src1, 
								src2, 
								dst, 
								scale, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_scaleAdd, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_scaleAdd")]
		public static void core_scaleAdd(
					global::System.IntPtr src1, 
					double alpha, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_scaleAdd(
								src1, 
								alpha, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_addWeighted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_addWeighted")]
		public static void core_addWeighted(
					global::System.IntPtr src1, 
					double alpha, 
					global::System.IntPtr src2, 
					double beta, 
					double gamma, 
					global::System.IntPtr dst, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_addWeighted(
								src1, 
								alpha, 
								src2, 
								beta, 
								gamma, 
								dst, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_convertScaleAbs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_convertScaleAbs")]
		public static void core_convertScaleAbs(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					double beta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_convertScaleAbs(
								src, 
								dst, 
								alpha, 
								beta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_LUT, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_LUT")]
		public static void core_LUT(
					global::System.IntPtr src, 
					global::System.IntPtr lut, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_LUT(
								src, 
								lut, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_sum, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_sum")]
		public static global::OpenCvSharp.Scalar__OpenCvSharp core_sum(global::System.IntPtr src)
		{
			// Setup
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_sum(src);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_countNonZero, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_countNonZero")]
		public static int core_countNonZero(global::System.IntPtr src)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_countNonZero(src);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_findNonZero, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_findNonZero")]
		public static void core_findNonZero(
					global::System.IntPtr src, 
					global::System.IntPtr idx)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_findNonZero(
								src, 
								idx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_mean, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_mean")]
		public static global::OpenCvSharp.Scalar__OpenCvSharp core_mean(
					global::System.IntPtr src, 
					global::System.IntPtr mask)
		{
			// Setup
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_mean(
								src, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_meanStdDev_OutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_meanStdDev_OutputArray")]
		public static void core_meanStdDev_OutputArray(
					global::System.IntPtr src, 
					global::System.IntPtr mean, 
					global::System.IntPtr stddev, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_meanStdDev_OutputArray(
								src, 
								mean, 
								stddev, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_meanStdDev_Scalar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_meanStdDev_Scalar")]
		public static void core_meanStdDev_Scalar(
					global::System.IntPtr src, 
					out global::OpenCvSharp.Scalar__OpenCvSharp mean, 
					out global::OpenCvSharp.Scalar__OpenCvSharp stddev, 
					global::System.IntPtr mask)
		{
			// Setup
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe_mean;
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe_stddev;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_meanStdDev_Scalar(
								src, 
								&(unsafe_mean), 
								&(unsafe_stddev), 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			stddev = unsafe_stddev;
			mean = unsafe_mean;
			// Return
		}

		// Signature, core_norm, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_norm")]
		public static double core_norm(
					global::System.IntPtr src1, 
					int normType, 
					global::System.IntPtr mask)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_norm(
								src1, 
								normType, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_norm__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_norm")]
		public static double core_norm__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					int normType, 
					global::System.IntPtr mask)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_norm__0(
								src1, 
								src2, 
								normType, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_batchDistance, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_batchDistance")]
		public static void core_batchDistance(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dist, 
					int dtype, 
					global::System.IntPtr nidx, 
					int normType, 
					int k, 
					global::System.IntPtr mask, 
					int update, 
					int crosscheck)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_batchDistance(
								src1, 
								src2, 
								dist, 
								dtype, 
								nidx, 
								normType, 
								k, 
								mask, 
								update, 
								crosscheck
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_normalize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_normalize")]
		public static void core_normalize(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					double beta, 
					int normType, 
					int dtype, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_normalize(
								src, 
								dst, 
								alpha, 
								beta, 
								normType, 
								dtype, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_minMaxLoc, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_minMaxLoc")]
		public static void core_minMaxLoc(
					global::System.IntPtr src, 
					out double minVal, 
					out double maxVal)
		{
			// Setup
			double unsafe_minVal;
			double unsafe_maxVal;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_minMaxLoc(
								src, 
								&(unsafe_minVal), 
								&(unsafe_maxVal)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			maxVal = unsafe_maxVal;
			minVal = unsafe_minVal;
			// Return
		}

		// Signature, core_minMaxLoc__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_minMaxLoc")]
		public static void core_minMaxLoc__0(
					global::System.IntPtr src, 
					out double minVal, 
					out double maxVal, 
					out global::OpenCvSharp.Point__OpenCvSharp minLoc, 
					out global::OpenCvSharp.Point__OpenCvSharp maxLoc, 
					global::System.IntPtr mask)
		{
			// Setup
			double unsafe_minVal;
			double unsafe_maxVal;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_minLoc;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_maxLoc;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_minMaxLoc__0(
								src, 
								&(unsafe_minVal), 
								&(unsafe_maxVal), 
								&(unsafe_minLoc), 
								&(unsafe_maxLoc), 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			maxLoc = unsafe_maxLoc;
			minLoc = unsafe_minLoc;
			maxVal = unsafe_maxVal;
			minVal = unsafe_minVal;
			// Return
		}

		// Signature, core_minMaxIdx, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_minMaxIdx")]
		public static void core_minMaxIdx(
					global::System.IntPtr src, 
					out double minVal, 
					out double maxVal)
		{
			// Setup
			double unsafe_minVal;
			double unsafe_maxVal;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_minMaxIdx(
								src, 
								&(unsafe_minVal), 
								&(unsafe_maxVal)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			maxVal = unsafe_maxVal;
			minVal = unsafe_minVal;
			// Return
		}

		// Signature, core_minMaxIdx__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_minMaxIdx")]
		public static void core_minMaxIdx__0(
					global::System.IntPtr src, 
					out double minVal, 
					out double maxVal, 
					out int minIdx, 
					out int maxIdx, 
					global::System.IntPtr mask)
		{
			// Setup
			double unsafe_minVal;
			double unsafe_maxVal;
			int unsafe_minIdx;
			int unsafe_maxIdx;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_minMaxIdx__0(
								src, 
								&(unsafe_minVal), 
								&(unsafe_maxVal), 
								&(unsafe_minIdx), 
								&(unsafe_maxIdx), 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			maxIdx = unsafe_maxIdx;
			minIdx = unsafe_minIdx;
			maxVal = unsafe_maxVal;
			minVal = unsafe_minVal;
			// Return
		}

		// Signature, core_reduce, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_reduce")]
		public static void core_reduce(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int dim, 
					int rtype, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_reduce(
								src, 
								dst, 
								dim, 
								rtype, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_merge, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_merge")]
		public static void core_merge(
					global::System.IntPtr[] mv, 
					uint count, 
					global::System.IntPtr dst)
		{
			// Setup
			global::System.IntPtr* unsafe_mv;
			// Marshalling
			fixed (global::System.IntPtr* pinned_mv = global::McgInterop.McgCoreHelpers.GetArrayForCompat(mv))
			{
				unsafe_mv = (global::System.IntPtr*)pinned_mv;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_merge(
									unsafe_mv, 
									count, 
									dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_split, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_split")]
		public static void core_split(
					global::System.IntPtr src, 
					out global::System.IntPtr mv)
		{
			// Setup
			global::System.IntPtr unsafe_mv;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_split(
								src, 
								&(unsafe_mv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			mv = unsafe_mv;
			// Return
		}

		// Signature, core_mixChannels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_mixChannels")]
		public static void core_mixChannels(
					global::System.IntPtr[] src, 
					uint nsrcs, 
					global::System.IntPtr[] dst, 
					uint ndsts, 
					int[] fromTo, 
					uint npairs)
		{
			// Setup
			global::System.IntPtr* unsafe_src;
			global::System.IntPtr* unsafe_dst;
			int* unsafe_fromTo;
			// Marshalling
			fixed (global::System.IntPtr* pinned_src = global::McgInterop.McgCoreHelpers.GetArrayForCompat(src))
			{
				unsafe_src = (global::System.IntPtr*)pinned_src;
				fixed (global::System.IntPtr* pinned_dst = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dst))
				{
					unsafe_dst = (global::System.IntPtr*)pinned_dst;
					fixed (int* pinned_fromTo = global::McgInterop.McgCoreHelpers.GetArrayForCompat(fromTo))
					{
						unsafe_fromTo = (int*)pinned_fromTo;
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.core_mixChannels(
											unsafe_src, 
											nsrcs, 
											unsafe_dst, 
											ndsts, 
											unsafe_fromTo, 
											npairs
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
		}

		// Signature, core_extractChannel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_extractChannel")]
		public static void core_extractChannel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int coi)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_extractChannel(
								src, 
								dst, 
								coi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_insertChannel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_insertChannel")]
		public static void core_insertChannel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int coi)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_insertChannel(
								src, 
								dst, 
								coi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_flip, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_flip")]
		public static void core_flip(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flipCode)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_flip(
								src, 
								dst, 
								flipCode
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_repeat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_repeat")]
		public static void core_repeat(
					global::System.IntPtr src, 
					int ny, 
					int nx, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_repeat(
								src, 
								ny, 
								nx, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_repeat__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_repeat")]
		public static global::System.IntPtr core_repeat__0(
					global::System.IntPtr src, 
					int ny, 
					int nx)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_repeat__0(
								src, 
								ny, 
								nx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_hconcat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_hconcat")]
		public static void core_hconcat(
					global::System.IntPtr[] src, 
					uint nsrc, 
					global::System.IntPtr dst)
		{
			// Setup
			global::System.IntPtr* unsafe_src;
			// Marshalling
			fixed (global::System.IntPtr* pinned_src = global::McgInterop.McgCoreHelpers.GetArrayForCompat(src))
			{
				unsafe_src = (global::System.IntPtr*)pinned_src;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_hconcat(
									unsafe_src, 
									nsrc, 
									dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_hconcat__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_hconcat")]
		public static void core_hconcat__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_hconcat__0(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_vconcat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_vconcat")]
		public static void core_vconcat(
					global::System.IntPtr[] src, 
					uint nsrc, 
					global::System.IntPtr dst)
		{
			// Setup
			global::System.IntPtr* unsafe_src;
			// Marshalling
			fixed (global::System.IntPtr* pinned_src = global::McgInterop.McgCoreHelpers.GetArrayForCompat(src))
			{
				unsafe_src = (global::System.IntPtr*)pinned_src;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_vconcat(
									unsafe_src, 
									nsrc, 
									dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_vconcat__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_vconcat")]
		public static void core_vconcat__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_vconcat__0(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_bitwise_and, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_bitwise_and")]
		public static void core_bitwise_and(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_bitwise_and(
								src1, 
								src2, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_bitwise_or, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_bitwise_or")]
		public static void core_bitwise_or(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_bitwise_or(
								src1, 
								src2, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_bitwise_xor, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_bitwise_xor")]
		public static void core_bitwise_xor(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_bitwise_xor(
								src1, 
								src2, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_bitwise_not, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_bitwise_not")]
		public static void core_bitwise_not(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_bitwise_not(
								src, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_absdiff, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_absdiff")]
		public static void core_absdiff(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_absdiff(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_inRange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_inRange")]
		public static void core_inRange(
					global::System.IntPtr src, 
					global::System.IntPtr lowerb, 
					global::System.IntPtr upperb, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_inRange(
								src, 
								lowerb, 
								upperb, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_inRange__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_inRange")]
		public static void core_inRange__0(
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp lowerb, 
					global::OpenCvSharp.Scalar__OpenCvSharp upperb, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_inRange__0(
								src, 
								lowerb, 
								upperb, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_compare, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_compare")]
		public static void core_compare(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int cmpop)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_compare(
								src1, 
								src2, 
								dst, 
								cmpop
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_min1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_min1")]
		public static void core_min1(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_min1(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_max1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_max1")]
		public static void core_max1(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_max1(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_min_MatMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_min_MatMat")]
		public static void core_min_MatMat(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_min_MatMat(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_min_MatDouble, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_min_MatDouble")]
		public static void core_min_MatDouble(
					global::System.IntPtr src1, 
					double src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_min_MatDouble(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_max_MatMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_max_MatMat")]
		public static void core_max_MatMat(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_max_MatMat(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_max_MatDouble, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_max_MatDouble")]
		public static void core_max_MatDouble(
					global::System.IntPtr src1, 
					double src2, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_max_MatDouble(
								src1, 
								src2, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_sqrt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_sqrt")]
		public static void core_sqrt(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_sqrt(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_pow_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_pow_Mat")]
		public static void core_pow_Mat(
					global::System.IntPtr src, 
					double power, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_pow_Mat(
								src, 
								power, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_exp_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_exp_Mat")]
		public static void core_exp_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_exp_Mat(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_log_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_log_Mat")]
		public static void core_log_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_log_Mat(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_cubeRoot, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_cubeRoot")]
		public static float core_cubeRoot(float val)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_cubeRoot(val);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_fastAtan2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_fastAtan2")]
		public static float core_fastAtan2(
					float y, 
					float x)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_fastAtan2(
								y, 
								x
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_polarToCart, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_polarToCart")]
		public static void core_polarToCart(
					global::System.IntPtr magnitude, 
					global::System.IntPtr angle, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					int angleInDegrees)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_polarToCart(
								magnitude, 
								angle, 
								x, 
								y, 
								angleInDegrees
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_cartToPolar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_cartToPolar")]
		public static void core_cartToPolar(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr magnitude, 
					global::System.IntPtr angle, 
					int angleInDegrees)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_cartToPolar(
								x, 
								y, 
								magnitude, 
								angle, 
								angleInDegrees
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_phase, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_phase")]
		public static void core_phase(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr angle, 
					int angleInDegrees)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_phase(
								x, 
								y, 
								angle, 
								angleInDegrees
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_magnitude_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_magnitude_Mat")]
		public static void core_magnitude_Mat(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr magnitude)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_magnitude_Mat(
								x, 
								y, 
								magnitude
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_checkRange, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_checkRange")]
		public static int core_checkRange(
					global::System.IntPtr a, 
					int quiet, 
					out global::OpenCvSharp.Point__OpenCvSharp pos, 
					double minVal, 
					double maxVal)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp unsafe_pos;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_checkRange(
								a, 
								quiet, 
								&(unsafe_pos), 
								minVal, 
								maxVal
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pos = unsafe_pos;
			// Return
			return unsafe___value;
		}

		// Signature, core_patchNaNs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_patchNaNs")]
		public static void core_patchNaNs(
					global::System.IntPtr a, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_patchNaNs(
								a, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_gemm, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_gemm")]
		public static void core_gemm(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					double alpha, 
					global::System.IntPtr src3, 
					double gamma, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_gemm(
								src1, 
								src2, 
								alpha, 
								src3, 
								gamma, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_mulTransposed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_mulTransposed")]
		public static void core_mulTransposed(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int aTa, 
					global::System.IntPtr delta, 
					double scale, 
					int dtype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_mulTransposed(
								src, 
								dst, 
								aTa, 
								delta, 
								scale, 
								dtype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_transpose, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_transpose")]
		public static void core_transpose(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_transpose(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_transform, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_transform")]
		public static void core_transform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_transform(
								src, 
								dst, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform")]
		public static void core_perspectiveTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform(
								src, 
								dst, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform_Mat")]
		public static void core_perspectiveTransform_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform_Mat(
								src, 
								dst, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform_Point2f")]
		public static void core_perspectiveTransform_Point2f(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform_Point2f(
								src, 
								srcLength, 
								dst, 
								dstLength, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform_Point2d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform_Point2d")]
		public static void core_perspectiveTransform_Point2d(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform_Point2d(
								src, 
								srcLength, 
								dst, 
								dstLength, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform_Point3f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform_Point3f")]
		public static void core_perspectiveTransform_Point3f(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform_Point3f(
								src, 
								srcLength, 
								dst, 
								dstLength, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_perspectiveTransform_Point3d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_perspectiveTransform_Point3d")]
		public static void core_perspectiveTransform_Point3d(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_perspectiveTransform_Point3d(
								src, 
								srcLength, 
								dst, 
								dstLength, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_completeSymm, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_completeSymm")]
		public static void core_completeSymm(
					global::System.IntPtr mtx, 
					int lowerToUpper)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_completeSymm(
								mtx, 
								lowerToUpper
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_setIdentity, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_setIdentity")]
		public static void core_setIdentity(
					global::System.IntPtr mtx, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_setIdentity(
								mtx, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_determinant, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_determinant")]
		public static double core_determinant(global::System.IntPtr mtx)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_determinant(mtx);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_trace, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_trace")]
		public static global::OpenCvSharp.Scalar__OpenCvSharp core_trace(global::System.IntPtr mtx)
		{
			// Setup
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_trace(mtx);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_invert, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_invert")]
		public static double core_invert(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_invert(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_solve, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_solve")]
		public static int core_solve(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_solve(
								src1, 
								src2, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_sort, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_sort")]
		public static void core_sort(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_sort(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_sortIdx, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_sortIdx")]
		public static void core_sortIdx(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_sortIdx(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_solveCubic, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_solveCubic")]
		public static int core_solveCubic(
					global::System.IntPtr coeffs, 
					global::System.IntPtr roots)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_solveCubic(
								coeffs, 
								roots
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_solvePoly, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_solvePoly")]
		public static double core_solvePoly(
					global::System.IntPtr coeffs, 
					global::System.IntPtr roots, 
					int maxIters)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_solvePoly(
								coeffs, 
								roots, 
								maxIters
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_eigen, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_eigen")]
		public static int core_eigen(
					global::System.IntPtr src, 
					global::System.IntPtr eigenvalues, 
					global::System.IntPtr eigenvectors)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_eigen(
								src, 
								eigenvalues, 
								eigenvectors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_calcCovarMatrix_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_calcCovarMatrix_Mat")]
		public static void core_calcCovarMatrix_Mat(
					global::System.IntPtr[] samples, 
					int nsamples, 
					global::System.IntPtr covar, 
					global::System.IntPtr mean, 
					int flags, 
					int ctype)
		{
			// Setup
			global::System.IntPtr* unsafe_samples;
			// Marshalling
			fixed (global::System.IntPtr* pinned_samples = global::McgInterop.McgCoreHelpers.GetArrayForCompat(samples))
			{
				unsafe_samples = (global::System.IntPtr*)pinned_samples;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_calcCovarMatrix_Mat(
									unsafe_samples, 
									nsamples, 
									covar, 
									mean, 
									flags, 
									ctype
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_calcCovarMatrix_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_calcCovarMatrix_InputArray")]
		public static void core_calcCovarMatrix_InputArray(
					global::System.IntPtr samples, 
					global::System.IntPtr covar, 
					global::System.IntPtr mean, 
					int flags, 
					int ctype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_calcCovarMatrix_InputArray(
								samples, 
								covar, 
								mean, 
								flags, 
								ctype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCACompute, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCACompute")]
		public static void core_PCACompute(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					int maxComponents)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCACompute(
								data, 
								mean, 
								eigenvectors, 
								maxComponents
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCAComputeVar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCAComputeVar")]
		public static void core_PCAComputeVar(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					double retainedVariance)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCAComputeVar(
								data, 
								mean, 
								eigenvectors, 
								retainedVariance
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCAProject, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCAProject")]
		public static void core_PCAProject(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCAProject(
								data, 
								mean, 
								eigenvectors, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCABackProject, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCABackProject")]
		public static void core_PCABackProject(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCABackProject(
								data, 
								mean, 
								eigenvectors, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVDecomp, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVDecomp")]
		public static void core_SVDecomp(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVDecomp(
								src, 
								w, 
								u, 
								vt, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVBackSubst, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVBackSubst")]
		public static void core_SVBackSubst(
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVBackSubst(
								w, 
								u, 
								vt, 
								rhs, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mahalanobis, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mahalanobis")]
		public static double core_Mahalanobis(
					global::System.IntPtr v1, 
					global::System.IntPtr v2, 
					global::System.IntPtr icovar)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mahalanobis(
								v1, 
								v2, 
								icovar
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_dft, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_dft")]
		public static void core_dft(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					int nonzeroRows)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_dft(
								src, 
								dst, 
								flags, 
								nonzeroRows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_idft, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_idft")]
		public static void core_idft(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					int nonzeroRows)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_idft(
								src, 
								dst, 
								flags, 
								nonzeroRows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_dct, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_dct")]
		public static void core_dct(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_dct(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_idct, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_idct")]
		public static void core_idct(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_idct(
								src, 
								dst, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_mulSpectrums, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_mulSpectrums")]
		public static void core_mulSpectrums(
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					global::System.IntPtr c, 
					int flags, 
					int conjB)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_mulSpectrums(
								a, 
								b, 
								c, 
								flags, 
								conjB
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_getOptimalDFTSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getOptimalDFTSize")]
		public static int core_getOptimalDFTSize(int vecsize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getOptimalDFTSize(vecsize);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_kmeans, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_kmeans")]
		public static double core_kmeans(
					global::System.IntPtr data, 
					int k, 
					global::System.IntPtr bestLabels, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int attempts, 
					int flags, 
					global::System.IntPtr centers)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_kmeans(
								data, 
								k, 
								bestLabels, 
								criteria, 
								attempts, 
								flags, 
								centers
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_theRNG, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_theRNG")]
		public static ulong core_theRNG()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_theRNG();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_randu_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randu_InputArray")]
		public static void core_randu_InputArray(
					global::System.IntPtr dst, 
					global::System.IntPtr low, 
					global::System.IntPtr high)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randu_InputArray(
								dst, 
								low, 
								high
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_randu_Scalar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randu_Scalar")]
		public static void core_randu_Scalar(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Scalar__OpenCvSharp low, 
					global::OpenCvSharp.Scalar__OpenCvSharp high)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randu_Scalar(
								dst, 
								low, 
								high
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_randn_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randn_InputArray")]
		public static void core_randn_InputArray(
					global::System.IntPtr dst, 
					global::System.IntPtr mean, 
					global::System.IntPtr stddev)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randn_InputArray(
								dst, 
								mean, 
								stddev
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_randn_Scalar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randn_Scalar")]
		public static void core_randn_Scalar(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Scalar__OpenCvSharp mean, 
					global::OpenCvSharp.Scalar__OpenCvSharp stddev)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randn_Scalar(
								dst, 
								mean, 
								stddev
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_randShuffle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randShuffle")]
		public static void core_randShuffle(
					global::System.IntPtr dst, 
					double iterFactor, 
					ref ulong rng)
		{
			// Setup
			ulong unsafe_rng;
			// Marshalling
			unsafe_rng = rng;
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randShuffle(
								dst, 
								iterFactor, 
								&(unsafe_rng)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			rng = unsafe_rng;
			// Return
		}

		// Signature, core_randShuffle__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_randShuffle")]
		public static void core_randShuffle__0(
					global::System.IntPtr dst, 
					double iterFactor, 
					global::System.IntPtr rng)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_randShuffle__0(
								dst, 
								iterFactor, 
								rng
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Algorithm_write, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_write")]
		public static void core_Algorithm_write(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_write(
								obj, 
								fs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Algorithm_read, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_read")]
		public static void core_Algorithm_read(
					global::System.IntPtr obj, 
					global::System.IntPtr fn)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_read(
								obj, 
								fn
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Algorithm_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_empty")]
		public static int core_Algorithm_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Algorithm_save, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_save")]
		public static void core_Algorithm_save(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_save(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, core_Algorithm_getDefaultName, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_getDefaultName")]
		public static void core_Algorithm_getDefaultName(
					global::System.IntPtr obj, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_getDefaultName(
									obj, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_Algorithm_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_new")]
		public static global::System.IntPtr core_Algorithm_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Algorithm_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_delete")]
		public static void core_Algorithm_delete(global::System.IntPtr self)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_delete(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Algorithm_name, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Algorithm_name")]
		public static void core_Algorithm_name(
					global::System.IntPtr self, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										false, 
										true
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Algorithm_name(
									self, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_Ptr_Algorithm_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Ptr_Algorithm_new")]
		public static global::System.IntPtr core_Ptr_Algorithm_new(global::System.IntPtr rawPtr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Ptr_Algorithm_new(rawPtr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Ptr_Algorithm_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Ptr_Algorithm_delete")]
		public static void core_Ptr_Algorithm_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Ptr_Algorithm_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Ptr_Algorithm_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Ptr_Algorithm_get")]
		public static global::System.IntPtr core_Ptr_Algorithm_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Ptr_Algorithm_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byMat")]
		public static global::System.IntPtr core_InputArray_new_byMat(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byMat(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byMatExpr")]
		public static global::System.IntPtr core_InputArray_new_byMatExpr(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byMatExpr(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byScalar")]
		public static global::System.IntPtr core_InputArray_new_byScalar(global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byScalar(val);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byDouble")]
		public static global::System.IntPtr core_InputArray_new_byDouble(double val)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byDouble(val);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byGpuMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byGpuMat")]
		public static global::System.IntPtr core_InputArray_new_byGpuMat(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byGpuMat(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_new_byVectorOfMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_new_byVectorOfMat")]
		public static global::System.IntPtr core_InputArray_new_byVectorOfMat(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_new_byVectorOfMat(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_InputArray_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_delete")]
		public static void core_InputArray_delete(global::System.IntPtr ia)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_delete(ia);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_OutputArray_new_byMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_new_byMat")]
		public static global::System.IntPtr core_OutputArray_new_byMat(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_new_byMat(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_new_byGpuMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_new_byGpuMat")]
		public static global::System.IntPtr core_OutputArray_new_byGpuMat(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_new_byGpuMat(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_new_byScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_new_byScalar")]
		public static global::System.IntPtr core_OutputArray_new_byScalar(global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_new_byScalar(val);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_new_byVectorOfMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_new_byVectorOfMat")]
		public static global::System.IntPtr core_OutputArray_new_byVectorOfMat(global::System.IntPtr vector)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_new_byVectorOfMat(vector);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_delete")]
		public static void core_OutputArray_delete(global::System.IntPtr oa)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_delete(oa);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_InputArray_kind, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_InputArray_kind")]
		public static int core_InputArray_kind(global::System.IntPtr ia)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_InputArray_kind(ia);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_getMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_getMat")]
		public static global::System.IntPtr core_OutputArray_getMat(global::System.IntPtr oa)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_getMat(oa);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_getScalar, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_getScalar")]
		public static global::OpenCvSharp.Scalar__OpenCvSharp core_OutputArray_getScalar(global::System.IntPtr oa)
		{
			// Setup
			global::OpenCvSharp.Scalar__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_getScalar(oa);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_OutputArray_getVectorOfMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_OutputArray_getVectorOfMat")]
		public static void core_OutputArray_getVectorOfMat(
					global::System.IntPtr oa, 
					global::System.IntPtr vector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_OutputArray_getVectorOfMat(
								oa, 
								vector
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_new1")]
		public static global::System.IntPtr core_FileStorage_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_new2")]
		public static global::System.IntPtr core_FileStorage_new2(
					string source, 
					int flags, 
					string encoding)
		{
			// Setup
			byte* unsafe_source = default(byte*);
			byte* unsafe_encoding = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_source = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(source, true, false);
				unsafe_encoding = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(encoding, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_new2(
									unsafe_source, 
									flags, 
									unsafe_encoding
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_source);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_encoding);
			}
		}

		// Signature, core_FileStorage_newFromLegacy, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_newFromLegacy")]
		public static global::System.IntPtr core_FileStorage_newFromLegacy(global::System.IntPtr fs)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_newFromLegacy(fs);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_delete")]
		public static void core_FileStorage_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_open")]
		public static int core_FileStorage_open(
					global::System.IntPtr obj, 
					string filename, 
					int flags, 
					string encoding)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			byte* unsafe_encoding = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				unsafe_encoding = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(encoding, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_open(
									obj, 
									unsafe_filename, 
									flags, 
									unsafe_encoding
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_encoding);
			}
		}

		// Signature, core_FileStorage_isOpened, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_isOpened")]
		public static int core_FileStorage_isOpened(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_isOpened(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_release")]
		public static void core_FileStorage_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_releaseAndGetString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_releaseAndGetString")]
		public static void core_FileStorage_releaseAndGetString(
					global::System.IntPtr obj, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_releaseAndGetString(
									obj, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_FileStorage_getFirstTopLevelNode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_getFirstTopLevelNode")]
		public static global::System.IntPtr core_FileStorage_getFirstTopLevelNode(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_getFirstTopLevelNode(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_root, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_root")]
		public static global::System.IntPtr core_FileStorage_root(
					global::System.IntPtr obj, 
					int streamIdx)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_root(
								obj, 
								streamIdx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_indexer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_indexer")]
		public static global::System.IntPtr core_FileStorage_indexer(
					global::System.IntPtr obj, 
					string nodeName)
		{
			// Setup
			byte* unsafe_nodeName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_nodeName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(nodeName, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_indexer(
									obj, 
									unsafe_nodeName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_nodeName);
			}
		}

		// Signature, core_FileStorage_toLegacy, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_toLegacy")]
		public static global::System.IntPtr core_FileStorage_toLegacy(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_toLegacy(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_writeRaw, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeRaw")]
		public static void core_FileStorage_writeRaw(
					global::System.IntPtr obj, 
					string fmt, 
					global::System.IntPtr vec, 
					global::System.IntPtr len)
		{
			// Setup
			byte* unsafe_fmt = default(byte*);
			try
			{
				// Marshalling
				unsafe_fmt = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fmt, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeRaw(
									obj, 
									unsafe_fmt, 
									vec, 
									len
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fmt);
			}
		}

		// Signature, core_FileStorage_writeObj, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeObj")]
		public static void core_FileStorage_writeObj(
					global::System.IntPtr obj, 
					string name, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeObj(
									obj, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_getDefaultObjectName, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_getDefaultObjectName")]
		public static void core_FileStorage_getDefaultObjectName(
					string filename, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_getDefaultObjectName(
									unsafe_filename, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_FileStorage_elname, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] sbyte___ptrchar *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_elname")]
		public static sbyte* core_FileStorage_elname(global::System.IntPtr obj)
		{
			// Setup
			sbyte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (sbyte*)global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_elname(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (sbyte*)unsafe___value;
		}

		// Signature, core_FileStorage_structs, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_structs")]
		public static global::System.IntPtr core_FileStorage_structs(
					global::System.IntPtr obj, 
					out global::System.IntPtr resultLength)
		{
			// Setup
			global::System.IntPtr unsafe_resultLength;
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_structs(
								obj, 
								&(unsafe_resultLength)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			resultLength = unsafe_resultLength;
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_state, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_state")]
		public static int core_FileStorage_state(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_state(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileStorage_write_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_int")]
		public static void core_FileStorage_write_int(
					global::System.IntPtr fs, 
					string name, 
					int value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_int(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_float")]
		public static void core_FileStorage_write_float(
					global::System.IntPtr fs, 
					string name, 
					float value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_float(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_double")]
		public static void core_FileStorage_write_double(
					global::System.IntPtr fs, 
					string name, 
					double value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_double(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_String, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_String")]
		public static void core_FileStorage_write_String(
					global::System.IntPtr fs, 
					string name, 
					string value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			byte* unsafe_value = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_String(
									fs, 
									unsafe_name, 
									unsafe_value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, core_FileStorage_write_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_Mat")]
		public static void core_FileStorage_write_Mat(
					global::System.IntPtr fs, 
					string name, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_Mat(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_SparseMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_SparseMat")]
		public static void core_FileStorage_write_SparseMat(
					global::System.IntPtr fs, 
					string name, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_SparseMat(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_vectorOfKeyPoint, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_vectorOfKeyPoint")]
		public static void core_FileStorage_write_vectorOfKeyPoint(
					global::System.IntPtr fs, 
					string name, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_vectorOfKeyPoint(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_write_vectorOfDMatch, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_write_vectorOfDMatch")]
		public static void core_FileStorage_write_vectorOfDMatch(
					global::System.IntPtr fs, 
					string name, 
					global::System.IntPtr value)
		{
			// Setup
			byte* unsafe_name = default(byte*);
			try
			{
				// Marshalling
				unsafe_name = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(name, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_write_vectorOfDMatch(
									fs, 
									unsafe_name, 
									value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_name);
			}
		}

		// Signature, core_FileStorage_writeScalar_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeScalar_int")]
		public static void core_FileStorage_writeScalar_int(
					global::System.IntPtr fs, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeScalar_int(
								fs, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_writeScalar_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeScalar_float")]
		public static void core_FileStorage_writeScalar_float(
					global::System.IntPtr fs, 
					float value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeScalar_float(
								fs, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_writeScalar_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeScalar_double")]
		public static void core_FileStorage_writeScalar_double(
					global::System.IntPtr fs, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeScalar_double(
								fs, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileStorage_writeScalar_String, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileStorage_writeScalar_String")]
		public static void core_FileStorage_writeScalar_String(
					global::System.IntPtr fs, 
					string value)
		{
			// Setup
			byte* unsafe_value = default(byte*);
			try
			{
				// Marshalling
				unsafe_value = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(value, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileStorage_writeScalar_String(
									fs, 
									unsafe_value
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_value);
			}
		}

		// Signature, core_FileNode_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_new1")]
		public static global::System.IntPtr core_FileNode_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_new2")]
		public static global::System.IntPtr core_FileNode_new2(
					global::System.IntPtr fs, 
					global::System.IntPtr node)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_new2(
								fs, 
								node
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_new3")]
		public static global::System.IntPtr core_FileNode_new3(global::System.IntPtr node)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_new3(node);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_delete")]
		public static void core_FileNode_delete(global::System.IntPtr node)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_delete(node);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileNode_operatorThis_byString, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_operatorThis_byString")]
		public static global::System.IntPtr core_FileNode_operatorThis_byString(
					global::System.IntPtr obj, 
					string nodeName)
		{
			// Setup
			byte* unsafe_nodeName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_nodeName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(nodeName, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_operatorThis_byString(
									obj, 
									unsafe_nodeName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_nodeName);
			}
		}

		// Signature, core_FileNode_operatorThis_byInt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_operatorThis_byInt")]
		public static global::System.IntPtr core_FileNode_operatorThis_byInt(
					global::System.IntPtr obj, 
					int i)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_operatorThis_byInt(
								obj, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_type")]
		public static int core_FileNode_type(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_type(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_empty")]
		public static int core_FileNode_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isNone, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isNone")]
		public static int core_FileNode_isNone(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isNone(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isSeq, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isSeq")]
		public static int core_FileNode_isSeq(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isSeq(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isMap, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isMap")]
		public static int core_FileNode_isMap(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isMap(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isInt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isInt")]
		public static int core_FileNode_isInt(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isInt(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isReal, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isReal")]
		public static int core_FileNode_isReal(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isReal(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isString, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isString")]
		public static int core_FileNode_isString(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isString(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_isNamed, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_isNamed")]
		public static int core_FileNode_isNamed(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_isNamed(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_name, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_name")]
		public static void core_FileNode_name(
					global::System.IntPtr obj, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_name(
									obj, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_FileNode_size, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_size")]
		public static global::System.IntPtr core_FileNode_size(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_size(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_toInt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_toInt")]
		public static int core_FileNode_toInt(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_toInt(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_toFloat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_toFloat")]
		public static float core_FileNode_toFloat(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_toFloat(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_toDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_toDouble")]
		public static double core_FileNode_toDouble(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_toDouble(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_toString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_toString")]
		public static void core_FileNode_toString(
					global::System.IntPtr obj, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_toString(
									obj, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, core_FileNode_toMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_toMat")]
		public static void core_FileNode_toMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_toMat(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileNode_readRaw, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_readRaw")]
		public static void core_FileNode_readRaw(
					global::System.IntPtr obj, 
					string fmt, 
					global::System.IntPtr vec, 
					global::System.IntPtr len)
		{
			// Setup
			byte* unsafe_fmt = default(byte*);
			try
			{
				// Marshalling
				unsafe_fmt = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(fmt, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_readRaw(
									obj, 
									unsafe_fmt, 
									vec, 
									len
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_fmt);
			}
		}

		// Signature, core_FileNode_readObj, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_readObj")]
		public static global::System.IntPtr core_FileNode_readObj(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_readObj(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_FileNode_read_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_int")]
		public static void core_FileNode_read_int(
					global::System.IntPtr node, 
					out int value, 
					int defaultValue)
		{
			// Setup
			int unsafe_value;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_int(
								node, 
								&(unsafe_value), 
								defaultValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			value = unsafe_value;
			// Return
		}

		// Signature, core_FileNode_read_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_float")]
		public static void core_FileNode_read_float(
					global::System.IntPtr node, 
					out float value, 
					float defaultValue)
		{
			// Setup
			float unsafe_value;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_float(
								node, 
								&(unsafe_value), 
								defaultValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			value = unsafe_value;
			// Return
		}

		// Signature, core_FileNode_read_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_double")]
		public static void core_FileNode_read_double(
					global::System.IntPtr node, 
					out double value, 
					double defaultValue)
		{
			// Setup
			double unsafe_value;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_double(
								node, 
								&(unsafe_value), 
								defaultValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			value = unsafe_value;
			// Return
		}

		// Signature, core_FileNode_read_String, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_String")]
		public static void core_FileNode_read_String(
					global::System.IntPtr node, 
					global::System.Text.StringBuilder value, 
					int valueCapacity, 
					string defaultValue)
		{
			// Setup
			byte* unsafe_value = default(byte*);
			byte* unsafe_defaultValue = default(byte*);
			try
			{
				// Marshalling
				if (value == null)
					unsafe_value = null;
				else
				{
					unsafe_value = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(value.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_value == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_value != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										value, 
										unsafe_value, 
										true, 
										false
									);
				unsafe_defaultValue = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(defaultValue, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_String(
									node, 
									unsafe_value, 
									valueCapacity, 
									unsafe_defaultValue
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (value != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_value, 
										value
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_value != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_value);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_defaultValue);
			}
		}

		// Signature, core_FileNode_read_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_Mat")]
		public static void core_FileNode_read_Mat(
					global::System.IntPtr node, 
					global::System.IntPtr mat, 
					global::System.IntPtr defaultMat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_Mat(
								node, 
								mat, 
								defaultMat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileNode_read_SparseMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_SparseMat")]
		public static void core_FileNode_read_SparseMat(
					global::System.IntPtr node, 
					global::System.IntPtr mat, 
					global::System.IntPtr defaultMat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_SparseMat(
								node, 
								mat, 
								defaultMat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileNode_read_vectorOfKeyPoint, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_vectorOfKeyPoint")]
		public static void core_FileNode_read_vectorOfKeyPoint(
					global::System.IntPtr node, 
					global::System.IntPtr keypoints)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_vectorOfKeyPoint(
								node, 
								keypoints
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_FileNode_read_vectorOfDMatch, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_FileNode_read_vectorOfDMatch")]
		public static void core_FileNode_read_vectorOfDMatch(
					global::System.IntPtr node, 
					global::System.IntPtr matches)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_FileNode_read_vectorOfDMatch(
								node, 
								matches
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_new1")]
		public static global::System.IntPtr core_PCA_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_new2")]
		public static global::System.IntPtr core_PCA_new2(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					int maxComponents)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_new2(
								data, 
								mean, 
								flags, 
								maxComponents
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_new3")]
		public static global::System.IntPtr core_PCA_new3(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					double retainedVariance)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_new3(
								data, 
								mean, 
								flags, 
								retainedVariance
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_delete")]
		public static void core_PCA_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_operatorThis, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_operatorThis")]
		public static void core_PCA_operatorThis(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					int maxComponents)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_operatorThis(
								obj, 
								data, 
								mean, 
								flags, 
								maxComponents
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_computeVar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_computeVar")]
		public static void core_PCA_computeVar(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					double retainedVariance)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_computeVar(
								obj, 
								data, 
								mean, 
								flags, 
								retainedVariance
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_project, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_project")]
		public static global::System.IntPtr core_PCA_project(
					global::System.IntPtr obj, 
					global::System.IntPtr vec)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_project(
								obj, 
								vec
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_project__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_project")]
		public static void core_PCA_project__0(
					global::System.IntPtr obj, 
					global::System.IntPtr vec, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_project__0(
								obj, 
								vec, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_backProject, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_backProject")]
		public static global::System.IntPtr core_PCA_backProject(
					global::System.IntPtr obj, 
					global::System.IntPtr vec)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_backProject(
								obj, 
								vec
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_backProject__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_backProject")]
		public static void core_PCA_backProject__0(
					global::System.IntPtr obj, 
					global::System.IntPtr vec, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_backProject__0(
								obj, 
								vec, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_PCA_eigenvectors, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_eigenvectors")]
		public static global::System.IntPtr core_PCA_eigenvectors(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_eigenvectors(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_eigenvalues, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_eigenvalues")]
		public static global::System.IntPtr core_PCA_eigenvalues(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_eigenvalues(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_PCA_mean, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_PCA_mean")]
		public static global::System.IntPtr core_PCA_mean(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_PCA_mean(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_RNG_fill, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_RNG_fill")]
		public static void core_RNG_fill(
					ref ulong state, 
					global::System.IntPtr mat, 
					int distType, 
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					int saturateRange)
		{
			// Setup
			ulong unsafe_state;
			// Marshalling
			unsafe_state = state;
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_RNG_fill(
								&(unsafe_state), 
								mat, 
								distType, 
								a, 
								b, 
								saturateRange
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			state = unsafe_state;
			// Return
		}

		// Signature, core_RNG_gaussian, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_RNG_gaussian")]
		public static double core_RNG_gaussian(
					ref ulong state, 
					double sigma)
		{
			// Setup
			ulong unsafe_state;
			double unsafe___value;
			// Marshalling
			unsafe_state = state;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_RNG_gaussian(
								&(unsafe_state), 
								sigma
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			state = unsafe_state;
			// Return
			return unsafe___value;
		}

		// Signature, core_SVD_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_new")]
		public static global::System.IntPtr core_SVD_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SVD_new__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_new")]
		public static global::System.IntPtr core_SVD_new__0(
					global::System.IntPtr src, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_new__0(
								src, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SVD_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_delete")]
		public static void core_SVD_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_operatorThis, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_operatorThis")]
		public static void core_SVD_operatorThis(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_operatorThis(
								obj, 
								src, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_backSubst, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_backSubst")]
		public static void core_SVD_backSubst(
					global::System.IntPtr obj, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_backSubst(
								obj, 
								rhs, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_static_compute, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_static_compute")]
		public static void core_SVD_static_compute(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_static_compute(
								src, 
								w, 
								u, 
								vt, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_static_compute__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_static_compute")]
		public static void core_SVD_static_compute__0(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_static_compute__0(
								src, 
								w, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_static_backSubst, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_static_backSubst")]
		public static void core_SVD_static_backSubst(
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_static_backSubst(
								w, 
								u, 
								vt, 
								rhs, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_static_solveZ, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_static_solveZ")]
		public static void core_SVD_static_solveZ(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_static_solveZ(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SVD_u, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_u")]
		public static global::System.IntPtr core_SVD_u(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_u(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SVD_w, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_w")]
		public static global::System.IntPtr core_SVD_w(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_w(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SVD_vt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SVD_vt")]
		public static global::System.IntPtr core_SVD_vt(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SVD_vt(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_sizeof, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_sizeof")]
		public static ulong core_Mat_sizeof()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_sizeof();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new1")]
		public static global::System.IntPtr core_Mat_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new2")]
		public static global::System.IntPtr core_Mat_new2(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new2(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new3")]
		public static global::System.IntPtr core_Mat_new3(
					int rows, 
					int cols, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp scalar)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new3(
								rows, 
								cols, 
								type, 
								scalar
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new4, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new4")]
		public static global::System.IntPtr core_Mat_new4(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new4(
								mat, 
								rowRange, 
								colRange
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new5, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new5")]
		public static global::System.IntPtr core_Mat_new5(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new5(
								mat, 
								rowRange
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new6, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new6")]
		public static global::System.IntPtr core_Mat_new6(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp[] rowRange)
		{
			// Setup
			global::OpenCvSharp.Range__OpenCvSharp* unsafe_rowRange = default(global::OpenCvSharp.Range__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (rowRange == null)
					unsafe_rowRange = null;
				else
				{
					if (rowRange != null)
						unsafe_rowRange = (global::OpenCvSharp.Range__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(rowRange.Length * sizeof(global::OpenCvSharp.Range__OpenCvSharp))));
					if (rowRange != null)
						for (uint mcgIdx = 0; (mcgIdx < rowRange.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp rowRange
							unsafe_rowRange[mcgIdx] = rowRange[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new6(
									mat, 
									unsafe_rowRange
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_rowRange);
			}
		}

		// Signature, core_Mat_new7, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new7")]
		public static global::System.IntPtr core_Mat_new7(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new7(
								mat, 
								roi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new8, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new8")]
		public static global::System.IntPtr core_Mat_new8(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr step)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new8(
								rows, 
								cols, 
								type, 
								data, 
								step
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new9, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new9")]
		public static global::System.IntPtr core_Mat_new9(
					int ndims, 
					int[] sizes, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr[] steps)
		{
			// Setup
			int* unsafe_sizes;
			global::System.IntPtr* unsafe_steps;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				fixed (global::System.IntPtr* pinned_steps = global::McgInterop.McgCoreHelpers.GetArrayForCompat(steps))
				{
					unsafe_steps = (global::System.IntPtr*)pinned_steps;
					// Call to native method
					unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new9(
										ndims, 
										unsafe_sizes, 
										type, 
										data, 
										unsafe_steps
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new9__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new9")]
		public static global::System.IntPtr core_Mat_new9__0(
					int ndims, 
					int[] sizes, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr steps)
		{
			// Setup
			int* unsafe_sizes;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new9__0(
									ndims, 
									unsafe_sizes, 
									type, 
									data, 
									steps
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new10, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new10")]
		public static global::System.IntPtr core_Mat_new10(
					int ndims, 
					int[] sizes, 
					int type)
		{
			// Setup
			int* unsafe_sizes;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new10(
									ndims, 
									unsafe_sizes, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new11, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new11")]
		public static global::System.IntPtr core_Mat_new11(
					int ndims, 
					int[] sizes, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			int* unsafe_sizes;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new11(
									ndims, 
									unsafe_sizes, 
									type, 
									s
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new_FromIplImage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new_FromIplImage")]
		public static global::System.IntPtr core_Mat_new_FromIplImage(
					global::System.IntPtr img, 
					int copyData)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new_FromIplImage(
								img, 
								copyData
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_new_FromCvMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_new_FromCvMat")]
		public static global::System.IntPtr core_Mat_new_FromCvMat(
					global::System.IntPtr mat, 
					int copyData)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_new_FromCvMat(
								mat, 
								copyData
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_release")]
		public static void core_Mat_release(global::System.IntPtr mat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_release(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_delete")]
		public static void core_Mat_delete(global::System.IntPtr mat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_delete(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_adjustROI, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_adjustROI")]
		public static global::System.IntPtr core_Mat_adjustROI(
					global::System.IntPtr nativeObj, 
					int dtop, 
					int dbottom, 
					int dleft, 
					int dright)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_adjustROI(
								nativeObj, 
								dtop, 
								dbottom, 
								dleft, 
								dright
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_assignTo1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_assignTo1")]
		public static void core_Mat_assignTo1(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_assignTo1(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_assignTo2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_assignTo2")]
		public static void core_Mat_assignTo2(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_assignTo2(
								self, 
								m, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_channels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_channels")]
		public static int core_Mat_channels(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_channels(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_checkVector1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_checkVector1")]
		public static int core_Mat_checkVector1(
					global::System.IntPtr self, 
					int elemChannels)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_checkVector1(
								self, 
								elemChannels
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_checkVector2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_checkVector2")]
		public static int core_Mat_checkVector2(
					global::System.IntPtr self, 
					int elemChannels, 
					int depth)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_checkVector2(
								self, 
								elemChannels, 
								depth
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_checkVector3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_checkVector3")]
		public static int core_Mat_checkVector3(
					global::System.IntPtr self, 
					int elemChannels, 
					int depth, 
					int requireContinuous)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_checkVector3(
								self, 
								elemChannels, 
								depth, 
								requireContinuous
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_clone, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_clone")]
		public static global::System.IntPtr core_Mat_clone(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_clone(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_col_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_col_toMat")]
		public static global::System.IntPtr core_Mat_col_toMat(
					global::System.IntPtr self, 
					int x)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_col_toMat(
								self, 
								x
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_col_toMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_col_toMatExpr")]
		public static global::System.IntPtr core_Mat_col_toMatExpr(
					global::System.IntPtr self, 
					int x)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_col_toMatExpr(
								self, 
								x
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_cols, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_cols")]
		public static int core_Mat_cols(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_cols(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_colRange_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_colRange_toMat")]
		public static global::System.IntPtr core_Mat_colRange_toMat(
					global::System.IntPtr self, 
					int startCol, 
					int endCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_colRange_toMat(
								self, 
								startCol, 
								endCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_colRange_toMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_colRange_toMatExpr")]
		public static global::System.IntPtr core_Mat_colRange_toMatExpr(
					global::System.IntPtr self, 
					int startCol, 
					int endCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_colRange_toMatExpr(
								self, 
								startCol, 
								endCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_dims, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_dims")]
		public static int core_Mat_dims(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_dims(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_convertTo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_convertTo")]
		public static void core_Mat_convertTo(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_convertTo(
								self, 
								m, 
								rtype, 
								alpha, 
								beta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_copyTo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_copyTo")]
		public static void core_Mat_copyTo(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_copyTo(
								self, 
								m, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_create, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_create")]
		public static void core_Mat_create(
					global::System.IntPtr self, 
					int rows, 
					int cols, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_create(
								self, 
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_create__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_create")]
		public static void core_Mat_create__0(
					global::System.IntPtr self, 
					int ndims, 
					int[] sizes, 
					int type)
		{
			// Setup
			int* unsafe_sizes;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_create__0(
									self, 
									ndims, 
									unsafe_sizes, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_Mat_cross, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_cross")]
		public static global::System.IntPtr core_Mat_cross(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_cross(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_data, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_data")]
		public static byte* core_Mat_data(global::System.IntPtr self)
		{
			// Setup
			byte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (byte*)global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_data(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (byte*)unsafe___value;
		}

		// Signature, core_Mat_datastart, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_datastart")]
		public static global::System.IntPtr core_Mat_datastart(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_datastart(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_dataend, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_dataend")]
		public static global::System.IntPtr core_Mat_dataend(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_dataend(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_datalimit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_datalimit")]
		public static global::System.IntPtr core_Mat_datalimit(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_datalimit(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_depth, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_depth")]
		public static int core_Mat_depth(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_depth(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_diag, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_diag")]
		public static global::System.IntPtr core_Mat_diag(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_diag(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_diag__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_diag")]
		public static global::System.IntPtr core_Mat_diag__0(
					global::System.IntPtr self, 
					int d)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_diag__0(
								self, 
								d
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_dot, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_dot")]
		public static double core_Mat_dot(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_dot(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_elemSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_elemSize")]
		public static ulong core_Mat_elemSize(global::System.IntPtr self)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_elemSize(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_elemSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_elemSize1")]
		public static ulong core_Mat_elemSize1(global::System.IntPtr self)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_elemSize1(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_empty")]
		public static int core_Mat_empty(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_empty(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_eye, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_eye")]
		public static global::System.IntPtr core_Mat_eye(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_eye(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_inv1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_inv1")]
		public static global::System.IntPtr core_Mat_inv1(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_inv1(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_inv2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_inv2")]
		public static global::System.IntPtr core_Mat_inv2(
					global::System.IntPtr self, 
					int method)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_inv2(
								self, 
								method
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_isContinuous, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_isContinuous")]
		public static int core_Mat_isContinuous(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_isContinuous(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_isSubmatrix, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_isSubmatrix")]
		public static int core_Mat_isSubmatrix(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_isSubmatrix(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_locateROI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_locateROI")]
		public static void core_Mat_locateROI(
					global::System.IntPtr self, 
					out global::OpenCvSharp.Size__OpenCvSharp wholeSize, 
					out global::OpenCvSharp.Point__OpenCvSharp ofs)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe_wholeSize;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_ofs;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_locateROI(
								self, 
								&(unsafe_wholeSize), 
								&(unsafe_ofs)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ofs = unsafe_ofs;
			wholeSize = unsafe_wholeSize;
			// Return
		}

		// Signature, core_Mat_mul1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_mul1")]
		public static global::System.IntPtr core_Mat_mul1(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_mul1(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_mul2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_mul2")]
		public static global::System.IntPtr core_Mat_mul2(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					double scale)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_mul2(
								self, 
								m, 
								scale
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_ones1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ones1")]
		public static global::System.IntPtr core_Mat_ones1(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ones1(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_ones2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ones2")]
		public static global::System.IntPtr core_Mat_ones2(
					int ndims, 
					int[] sz, 
					int type)
		{
			// Setup
			int* unsafe_sz;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sz = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sz))
			{
				unsafe_sz = (int*)pinned_sz;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ones2(
									ndims, 
									unsafe_sz, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_reshape1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_reshape1")]
		public static global::System.IntPtr core_Mat_reshape1(
					global::System.IntPtr self, 
					int cn)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_reshape1(
								self, 
								cn
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_reshape2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_reshape2")]
		public static global::System.IntPtr core_Mat_reshape2(
					global::System.IntPtr self, 
					int cn, 
					int rows)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_reshape2(
								self, 
								cn, 
								rows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_reshape3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_reshape3")]
		public static global::System.IntPtr core_Mat_reshape3(
					global::System.IntPtr self, 
					int cn, 
					int newndims, 
					int[] newsz)
		{
			// Setup
			int* unsafe_newsz;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_newsz = global::McgInterop.McgCoreHelpers.GetArrayForCompat(newsz))
			{
				unsafe_newsz = (int*)pinned_newsz;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_reshape3(
									self, 
									cn, 
									newndims, 
									unsafe_newsz
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_rows, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_rows")]
		public static int core_Mat_rows(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_rows(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_row_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_row_toMat")]
		public static global::System.IntPtr core_Mat_row_toMat(
					global::System.IntPtr self, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_row_toMat(
								self, 
								y
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_row_toMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_row_toMatExpr")]
		public static global::System.IntPtr core_Mat_row_toMatExpr(
					global::System.IntPtr self, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_row_toMatExpr(
								self, 
								y
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_rowRange_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_rowRange_toMat")]
		public static global::System.IntPtr core_Mat_rowRange_toMat(
					global::System.IntPtr self, 
					int startRow, 
					int endRow)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_rowRange_toMat(
								self, 
								startRow, 
								endRow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_rowRange_toMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_rowRange_toMatExpr")]
		public static global::System.IntPtr core_Mat_rowRange_toMatExpr(
					global::System.IntPtr self, 
					int startRow, 
					int endRow)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_rowRange_toMatExpr(
								self, 
								startRow, 
								endRow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_setTo_Scalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_setTo_Scalar")]
		public static global::System.IntPtr core_Mat_setTo_Scalar(
					global::System.IntPtr self, 
					global::OpenCvSharp.Scalar__OpenCvSharp value, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_setTo_Scalar(
								self, 
								value, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_setTo_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_setTo_InputArray")]
		public static global::System.IntPtr core_Mat_setTo_InputArray(
					global::System.IntPtr self, 
					global::System.IntPtr value, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_setTo_InputArray(
								self, 
								value, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_size, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_size")]
		public static global::OpenCvSharp.Size__OpenCvSharp core_Mat_size(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_size(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_sizeAt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_sizeAt")]
		public static int core_Mat_sizeAt(
					global::System.IntPtr self, 
					int i)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_sizeAt(
								self, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_step1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_step1")]
		public static ulong core_Mat_step1(global::System.IntPtr self)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_step1(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_step1__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_step1")]
		public static ulong core_Mat_step1__0(
					global::System.IntPtr self, 
					int i)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_step1__0(
								self, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_step")]
		public static long core_Mat_step(global::System.IntPtr self)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_step(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_stepAt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_stepAt")]
		public static ulong core_Mat_stepAt(
					global::System.IntPtr self, 
					int i)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_stepAt(
								self, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_subMat1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_subMat1")]
		public static global::System.IntPtr core_Mat_subMat1(
					global::System.IntPtr self, 
					int rowStart, 
					int rowEnd, 
					int colStart, 
					int colEnd)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_subMat1(
								self, 
								rowStart, 
								rowEnd, 
								colStart, 
								colEnd
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_subMat2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_subMat2")]
		public static global::System.IntPtr core_Mat_subMat2(
					global::System.IntPtr self, 
					int nRanges, 
					global::OpenCvSharp.Range__OpenCvSharp[] ranges)
		{
			// Setup
			global::OpenCvSharp.Range__OpenCvSharp* unsafe_ranges = default(global::OpenCvSharp.Range__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (ranges == null)
					unsafe_ranges = null;
				else
				{
					if (ranges != null)
						unsafe_ranges = (global::OpenCvSharp.Range__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(ranges.Length * sizeof(global::OpenCvSharp.Range__OpenCvSharp))));
					if (ranges != null)
						for (uint mcgIdx = 0; (mcgIdx < ranges.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp ranges
							unsafe_ranges[mcgIdx] = ranges[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_subMat2(
									self, 
									nRanges, 
									unsafe_ranges
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_ranges);
			}
		}

		// Signature, core_Mat_t, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_t")]
		public static global::System.IntPtr core_Mat_t(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_t(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_total, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_total")]
		public static ulong core_Mat_total(global::System.IntPtr self)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_total(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_type")]
		public static int core_Mat_type(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_type(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_zeros1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_zeros1")]
		public static global::System.IntPtr core_Mat_zeros1(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_zeros1(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_zeros2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_zeros2")]
		public static global::System.IntPtr core_Mat_zeros2(
					int ndims, 
					int[] sz, 
					int type)
		{
			// Setup
			int* unsafe_sz;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sz = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sz))
			{
				unsafe_sz = (int*)pinned_sz;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_zeros2(
									ndims, 
									unsafe_sz, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_dump, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] sbyte___ptrchar *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_dump")]
		public static sbyte* core_Mat_dump(
					global::System.IntPtr self, 
					string format)
		{
			// Setup
			byte* unsafe_format = default(byte*);
			sbyte* unsafe___value;
			try
			{
				// Marshalling
				unsafe_format = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(format, false, true);
				// Call to native method
				unsafe___value = (sbyte*)global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_dump(
									self, 
									unsafe_format
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return (sbyte*)unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_format);
			}
		}

		// Signature, core_Mat_dump_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] sbyte___ptrchar *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_dump_delete")]
		public static void core_Mat_dump_delete(sbyte* buf)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_dump_delete(((sbyte*)buf));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_ptr1d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ptr1d")]
		public static global::System.IntPtr core_Mat_ptr1d(
					global::System.IntPtr self, 
					int i0)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ptr1d(
								self, 
								i0
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_ptr2d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ptr2d")]
		public static global::System.IntPtr core_Mat_ptr2d(
					global::System.IntPtr self, 
					int i0, 
					int i1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ptr2d(
								self, 
								i0, 
								i1
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_ptr3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ptr3d")]
		public static global::System.IntPtr core_Mat_ptr3d(
					global::System.IntPtr self, 
					int i0, 
					int i1, 
					int i2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ptr3d(
								self, 
								i0, 
								i1, 
								i2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_ptrnd, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_ptrnd")]
		public static global::System.IntPtr core_Mat_ptrnd(
					global::System.IntPtr self, 
					int[] idx)
		{
			// Setup
			int* unsafe_idx;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_idx = global::McgInterop.McgCoreHelpers.GetArrayForCompat(idx))
			{
				unsafe_idx = (int*)pinned_idx;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_ptrnd(
									self, 
									unsafe_idx
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_assignment_FromMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_assignment_FromMat")]
		public static void core_Mat_assignment_FromMat(
					global::System.IntPtr self, 
					global::System.IntPtr newMat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_assignment_FromMat(
								self, 
								newMat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_assignment_FromMatExpr, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_assignment_FromMatExpr")]
		public static void core_Mat_assignment_FromMatExpr(
					global::System.IntPtr self, 
					global::System.IntPtr newMatExpr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_assignment_FromMatExpr(
								self, 
								newMatExpr
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_assignment_FromScalar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_assignment_FromScalar")]
		public static void core_Mat_assignment_FromScalar(
					global::System.IntPtr self, 
					global::OpenCvSharp.Scalar__OpenCvSharp scalar)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_assignment_FromScalar(
								self, 
								scalar
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_IplImage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_IplImage")]
		public static void core_Mat_IplImage(
					global::System.IntPtr self, 
					global::System.IntPtr outImage)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_IplImage(
								self, 
								outImage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_IplImage_alignment, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_IplImage_alignment")]
		public static void core_Mat_IplImage_alignment(
					global::System.IntPtr self, 
					out global::System.IntPtr outImage)
		{
			// Setup
			global::System.IntPtr unsafe_outImage;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_IplImage_alignment(
								self, 
								&(unsafe_outImage)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			outImage = unsafe_outImage;
			// Return
		}

		// Signature, core_Mat_CvMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_CvMat")]
		public static void core_Mat_CvMat(
					global::System.IntPtr self, 
					global::System.IntPtr outMat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_CvMat(
								self, 
								outMat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_operatorUnaryMinus, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorUnaryMinus")]
		public static global::System.IntPtr core_Mat_operatorUnaryMinus(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorUnaryMinus(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAdd_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAdd_MatMat")]
		public static global::System.IntPtr core_Mat_operatorAdd_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAdd_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAdd_MatScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAdd_MatScalar")]
		public static global::System.IntPtr core_Mat_operatorAdd_MatScalar(
					global::System.IntPtr a, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAdd_MatScalar(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAdd_ScalarMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAdd_ScalarMat")]
		public static global::System.IntPtr core_Mat_operatorAdd_ScalarMat(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAdd_ScalarMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorMinus_Mat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorMinus_Mat")]
		public static global::System.IntPtr core_Mat_operatorMinus_Mat(global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorMinus_Mat(a);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorSubtract_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorSubtract_MatMat")]
		public static global::System.IntPtr core_Mat_operatorSubtract_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorSubtract_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorSubtract_MatScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorSubtract_MatScalar")]
		public static global::System.IntPtr core_Mat_operatorSubtract_MatScalar(
					global::System.IntPtr a, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorSubtract_MatScalar(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorSubtract_ScalarMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorSubtract_ScalarMat")]
		public static global::System.IntPtr core_Mat_operatorSubtract_ScalarMat(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorSubtract_ScalarMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorMultiply_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorMultiply_MatMat")]
		public static global::System.IntPtr core_Mat_operatorMultiply_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorMultiply_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorMultiply_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorMultiply_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorMultiply_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorMultiply_MatDouble(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorMultiply_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorMultiply_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorMultiply_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorMultiply_DoubleMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorDivide_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorDivide_MatMat")]
		public static global::System.IntPtr core_Mat_operatorDivide_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorDivide_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorDivide_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorDivide_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorDivide_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorDivide_MatDouble(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorDivide_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorDivide_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorDivide_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorDivide_DoubleMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAnd_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAnd_MatMat")]
		public static global::System.IntPtr core_Mat_operatorAnd_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAnd_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAnd_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAnd_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorAnd_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAnd_MatDouble(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorAnd_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorAnd_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorAnd_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorAnd_DoubleMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorOr_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorOr_MatMat")]
		public static global::System.IntPtr core_Mat_operatorOr_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorOr_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorOr_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorOr_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorOr_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorOr_MatDouble(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorOr_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorOr_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorOr_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorOr_DoubleMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorXor_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorXor_MatMat")]
		public static global::System.IntPtr core_Mat_operatorXor_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorXor_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorXor_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorXor_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorXor_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorXor_MatDouble(
								a, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorXor_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorXor_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorXor_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorXor_DoubleMat(
								s, 
								a
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorNot, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorNot")]
		public static global::System.IntPtr core_Mat_operatorNot(global::System.IntPtr a)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorNot(a);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLT_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLT_MatMat")]
		public static global::System.IntPtr core_Mat_operatorLT_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLT_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLT_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLT_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorLT_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLT_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLT_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLT_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorLT_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLT_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLE_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLE_MatMat")]
		public static global::System.IntPtr core_Mat_operatorLE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLE_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLE_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLE_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorLE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLE_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorLE_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorLE_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorLE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorLE_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGT_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGT_MatMat")]
		public static global::System.IntPtr core_Mat_operatorGT_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGT_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGT_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGT_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorGT_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGT_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGT_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGT_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorGT_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGT_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGE_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGE_MatMat")]
		public static global::System.IntPtr core_Mat_operatorGE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGE_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGE_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGE_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorGE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGE_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorGE_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorGE_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorGE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorGE_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorEQ_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorEQ_MatMat")]
		public static global::System.IntPtr core_Mat_operatorEQ_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorEQ_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorEQ_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorEQ_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorEQ_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorEQ_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorEQ_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorEQ_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorEQ_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorEQ_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorNE_MatMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorNE_MatMat")]
		public static global::System.IntPtr core_Mat_operatorNE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorNE_MatMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorNE_DoubleMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorNE_DoubleMat")]
		public static global::System.IntPtr core_Mat_operatorNE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorNE_DoubleMat(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_operatorNE_MatDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_operatorNE_MatDouble")]
		public static global::System.IntPtr core_Mat_operatorNE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_operatorNE_MatDouble(
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_abs_Mat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_abs_Mat")]
		public static global::System.IntPtr core_abs_Mat(global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_abs_Mat(e);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetB, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetB")]
		public static int core_Mat_nSetB(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte[] vals, 
					int valsLength)
		{
			// Setup
			byte* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (byte*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetB(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetB__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetB")]
		public static int core_Mat_nSetB__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte[] vals, 
					int valsLength)
		{
			// Setup
			byte* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (byte*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetB__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetS, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_short__short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetS")]
		public static int core_Mat_nSetS(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short[] vals, 
					int valsLength)
		{
			// Setup
			short* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (short* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (short*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetS(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetS__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_short__short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetS")]
		public static int core_Mat_nSetS__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short[] vals, 
					int valsLength)
		{
			// Setup
			short* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (short* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (short*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetS__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetS__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_ushort__unsigned short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetS")]
		public static int core_Mat_nSetS__1(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort[] vals, 
					int valsLength)
		{
			// Setup
			ushort* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (ushort* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (ushort*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetS__1(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetS__2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_ushort__unsigned short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetS")]
		public static int core_Mat_nSetS__2(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort[] vals, 
					int valsLength)
		{
			// Setup
			ushort* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (ushort* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (ushort*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetS__2(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetI, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetI")]
		public static int core_Mat_nSetI(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int[] vals, 
					int valsLength)
		{
			// Setup
			int* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (int*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetI(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetI__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetI")]
		public static int core_Mat_nSetI__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int[] vals, 
					int valsLength)
		{
			// Setup
			int* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (int*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetI__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetF, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetF")]
		public static int core_Mat_nSetF(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float[] vals, 
					int valsLength)
		{
			// Setup
			float* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (float* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (float*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetF(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetF__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetF")]
		public static int core_Mat_nSetF__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float[] vals, 
					int valsLength)
		{
			// Setup
			float* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (float* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (float*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetF__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetD, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetD")]
		public static int core_Mat_nSetD(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double[] vals, 
					int valsLength)
		{
			// Setup
			double* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (double* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (double*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetD(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetD__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetD")]
		public static int core_Mat_nSetD__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double[] vals, 
					int valsLength)
		{
			// Setup
			double* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (double* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (double*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetD__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nSetVec3b, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec3b")]
		public static int core_Mat_nSetVec3b(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3b__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3b__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3b__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3b__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec3b(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec3b__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec3b")]
		public static int core_Mat_nSetVec3b__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3b__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3b__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3b__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3b__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec3b__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec3d")]
		public static int core_Mat_nSetVec3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec3d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec3d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec3d")]
		public static int core_Mat_nSetVec3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec3d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec4f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec4f")]
		public static int core_Mat_nSetVec4f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec4f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec4f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec4f")]
		public static int core_Mat_nSetVec4f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec4f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec6f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec6f")]
		public static int core_Mat_nSetVec6f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec6f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec6f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec6f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec6f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec6f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec6f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec6f")]
		public static int core_Mat_nSetVec6f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec6f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec6f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec6f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec6f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec6f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec4i, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec4i")]
		public static int core_Mat_nSetVec4i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec4i(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetVec4i__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetVec4i")]
		public static int core_Mat_nSetVec4i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetVec4i__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint")]
		public static int core_Mat_nSetPoint(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint")]
		public static int core_Mat_nSetPoint__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint2f")]
		public static int core_Mat_nSetPoint2f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint2f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint2f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint2f")]
		public static int core_Mat_nSetPoint2f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint2f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint2d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint2d")]
		public static int core_Mat_nSetPoint2d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint2d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint2d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint2d")]
		public static int core_Mat_nSetPoint2d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint2d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3i, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3i")]
		public static int core_Mat_nSetPoint3i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3i(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3i__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3i")]
		public static int core_Mat_nSetPoint3i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3i__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3f")]
		public static int core_Mat_nSetPoint3f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3f")]
		public static int core_Mat_nSetPoint3f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3d")]
		public static int core_Mat_nSetPoint3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetPoint3d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetPoint3d")]
		public static int core_Mat_nSetPoint3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetPoint3d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetRect, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetRect")]
		public static int core_Mat_nSetRect(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Rect__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Rect__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Rect__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetRect(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nSetRect__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nSetRect")]
		public static int core_Mat_nSetRect__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Rect__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Rect__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Rect__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nSetRect__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetB, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetB")]
		public static int core_Mat_nGetB(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte[] vals, 
					int valsLength)
		{
			// Setup
			byte* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (byte*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetB(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetB__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetB")]
		public static int core_Mat_nGetB__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte[] vals, 
					int valsLength)
		{
			// Setup
			byte* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (byte*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetB__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetS, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_short__short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetS")]
		public static int core_Mat_nGetS(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short[] vals, 
					int valsLength)
		{
			// Setup
			short* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (short* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (short*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetS(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetS__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_short__short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetS")]
		public static int core_Mat_nGetS__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short[] vals, 
					int valsLength)
		{
			// Setup
			short* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (short* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (short*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetS__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetS__1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_ushort__unsigned short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetS")]
		public static int core_Mat_nGetS__1(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort[] vals, 
					int valsLength)
		{
			// Setup
			ushort* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (ushort* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (ushort*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetS__1(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetS__2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_ushort__unsigned short *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetS")]
		public static int core_Mat_nGetS__2(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort[] vals, 
					int valsLength)
		{
			// Setup
			ushort* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (ushort* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (ushort*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetS__2(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetI, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetI")]
		public static int core_Mat_nGetI(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int[] vals, 
					int valsLength)
		{
			// Setup
			int* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (int*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetI(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetI__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetI")]
		public static int core_Mat_nGetI__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int[] vals, 
					int valsLength)
		{
			// Setup
			int* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (int* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (int*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetI__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetF, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetF")]
		public static int core_Mat_nGetF(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float[] vals, 
					int valsLength)
		{
			// Setup
			float* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (float* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (float*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetF(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetF__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetF")]
		public static int core_Mat_nGetF__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float[] vals, 
					int valsLength)
		{
			// Setup
			float* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (float* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (float*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetF__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetD, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetD")]
		public static int core_Mat_nGetD(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double[] vals, 
					int valsLength)
		{
			// Setup
			double* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (double* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (double*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetD(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetD__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_double__double *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetD")]
		public static int core_Mat_nGetD__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double[] vals, 
					int valsLength)
		{
			// Setup
			double* unsafe_vals;
			int unsafe___value;
			// Marshalling
			fixed (double* pinned_vals = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vals))
			{
				unsafe_vals = (double*)pinned_vals;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetD__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_Mat_nGetVec3b, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec3b")]
		public static int core_Mat_nGetVec3b(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3b__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3b__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3b__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3b__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec3b(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec3b__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec3b")]
		public static int core_Mat_nGetVec3b__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3b__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3b__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3b__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3b__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec3b__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec3d")]
		public static int core_Mat_nGetVec3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec3d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec3d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec3d")]
		public static int core_Mat_nGetVec3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec3d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec4f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec4f")]
		public static int core_Mat_nGetVec4f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec4f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec4f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec4f")]
		public static int core_Mat_nGetVec4f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec4f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec6f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec6f")]
		public static int core_Mat_nGetVec6f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec6f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec6f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec6f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec6f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec6f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec6f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec6f")]
		public static int core_Mat_nGetVec6f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec6f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec6f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec6f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec6f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec6f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec4i, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec4i")]
		public static int core_Mat_nGetVec4i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec4i(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetVec4i__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetVec4i")]
		public static int core_Mat_nGetVec4i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetVec4i__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint")]
		public static int core_Mat_nGetPoint(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint")]
		public static int core_Mat_nGetPoint__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint2f")]
		public static int core_Mat_nGetPoint2f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint2f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint2f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint2f")]
		public static int core_Mat_nGetPoint2f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint2f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint2d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint2d")]
		public static int core_Mat_nGetPoint2d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint2d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint2d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint2d")]
		public static int core_Mat_nGetPoint2d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point2d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point2d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point2d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint2d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3i, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3i")]
		public static int core_Mat_nGetPoint3i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3i(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3i__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3i")]
		public static int core_Mat_nGetPoint3i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3i__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3i__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3i__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3i__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3f")]
		public static int core_Mat_nGetPoint3f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3f(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3f__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3f")]
		public static int core_Mat_nGetPoint3f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3f__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3d")]
		public static int core_Mat_nGetPoint3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3d(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetPoint3d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetPoint3d")]
		public static int core_Mat_nGetPoint3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Point3d__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Point3d__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Point3d__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Point3d__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetPoint3d__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetRect, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetRect")]
		public static int core_Mat_nGetRect(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Rect__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Rect__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Rect__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetRect(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_nGetRect__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_nGetRect")]
		public static int core_Mat_nGetRect__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp[] vals, 
					int valsLength)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp* unsafe_vals = default(global::OpenCvSharp.Rect__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (vals == null)
					unsafe_vals = null;
				else
				{
					if (vals != null)
						unsafe_vals = (global::OpenCvSharp.Rect__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(vals.Length * sizeof(global::OpenCvSharp.Rect__OpenCvSharp))));
					if (vals != null)
						for (uint mcgIdx = 0; (mcgIdx < vals.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
							unsafe_vals[mcgIdx] = vals[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_nGetRect__0(
									obj, 
									row, 
									col, 
									unsafe_vals, 
									valsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (vals != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < vals.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp vals
						vals[mcgIdx_1] = unsafe_vals[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_vals);
			}
		}

		// Signature, core_Mat_push_back_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Mat")]
		public static void core_Mat_push_back_Mat(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Mat(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_char, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] sbyte__char, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_char")]
		public static void core_Mat_push_back_char(
					global::System.IntPtr self, 
					sbyte v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_char(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_uchar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte__unsigned char, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_uchar")]
		public static void core_Mat_push_back_uchar(
					global::System.IntPtr self, 
					byte v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_uchar(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_short, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] short__short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_short")]
		public static void core_Mat_push_back_short(
					global::System.IntPtr self, 
					short v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_short(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_ushort, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_ushort")]
		public static void core_Mat_push_back_ushort(
					global::System.IntPtr self, 
					ushort v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_ushort(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_int")]
		public static void core_Mat_push_back_int(
					global::System.IntPtr self, 
					int v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_int(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_float")]
		public static void core_Mat_push_back_float(
					global::System.IntPtr self, 
					float v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_float(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_double")]
		public static void core_Mat_push_back_double(
					global::System.IntPtr self, 
					double v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_double(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2b__OpenCvSharp__OpenCvSharp__Vec2b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2b")]
		public static void core_Mat_push_back_Vec2b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2b__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2b(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3b__OpenCvSharp__OpenCvSharp__Vec3b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3b")]
		public static void core_Mat_push_back_Vec3b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3b__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3b(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec4b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4b__OpenCvSharp__OpenCvSharp__Vec4b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec4b")]
		public static void core_Mat_push_back_Vec4b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4b__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec4b(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6b__OpenCvSharp__OpenCvSharp__Vec6b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6b")]
		public static void core_Mat_push_back_Vec6b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6b__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6b(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2s__OpenCvSharp__OpenCvSharp__Vec2s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2s")]
		public static void core_Mat_push_back_Vec2s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2s__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2s(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3s__OpenCvSharp__OpenCvSharp__Vec3s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3s")]
		public static void core_Mat_push_back_Vec3s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3s__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3s(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec4s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4s__OpenCvSharp__OpenCvSharp__Vec4s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec4s")]
		public static void core_Mat_push_back_Vec4s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4s__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec4s(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6s__OpenCvSharp__OpenCvSharp__Vec6s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6s")]
		public static void core_Mat_push_back_Vec6s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6s__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6s(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2w, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2w__OpenCvSharp__OpenCvSharp__Vec2w__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2w")]
		public static void core_Mat_push_back_Vec2w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2w__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2w(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3w, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3w__OpenCvSharp__OpenCvSharp__Vec3w__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3w")]
		public static void core_Mat_push_back_Vec3w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3w__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3w(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec4w, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4w__OpenCvSharp__OpenCvSharp__Vec4w__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec4w")]
		public static void core_Mat_push_back_Vec4w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4w__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec4w(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6w, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6w__OpenCvSharp__OpenCvSharp__Vec6w__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6w")]
		public static void core_Mat_push_back_Vec6w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6w__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6w(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2i__OpenCvSharp__OpenCvSharp__Vec2i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2i")]
		public static void core_Mat_push_back_Vec2i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2i__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2i(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3i__OpenCvSharp__OpenCvSharp__Vec3i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3i")]
		public static void core_Mat_push_back_Vec3i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3i__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3i(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec4i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec4i")]
		public static void core_Mat_push_back_Vec4i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4i__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec4i(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6i__OpenCvSharp__OpenCvSharp__Vec6i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6i")]
		public static void core_Mat_push_back_Vec6i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6i__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6i(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2f__OpenCvSharp__OpenCvSharp__Vec2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2f")]
		public static void core_Mat_push_back_Vec2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3f__OpenCvSharp__OpenCvSharp__Vec3f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3f")]
		public static void core_Mat_push_back_Vec3f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec4f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4f__OpenCvSharp__OpenCvSharp__Vec4f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec4f")]
		public static void core_Mat_push_back_Vec4f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec4f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6f__OpenCvSharp__OpenCvSharp__Vec6f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6f")]
		public static void core_Mat_push_back_Vec6f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec2d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2d__OpenCvSharp__OpenCvSharp__Vec2d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec2d")]
		public static void core_Mat_push_back_Vec2d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2d__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec2d(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec3d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec3d__OpenCvSharp__OpenCvSharp__Vec3d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec3d")]
		public static void core_Mat_push_back_Vec3d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3d__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec3d(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Vec6d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec6d__OpenCvSharp__OpenCvSharp__Vec6d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Vec6d")]
		public static void core_Mat_push_back_Vec6d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6d__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Vec6d(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point")]
		public static void core_Mat_push_back_Point(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point2f")]
		public static void core_Mat_push_back_Point2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point2f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point2f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point2d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point2d")]
		public static void core_Mat_push_back_Point2d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point2d__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point2d(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point3i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point3i")]
		public static void core_Mat_push_back_Point3i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3i__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point3i(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point3f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point3f")]
		public static void core_Mat_push_back_Point3f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point3f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Point3d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3d__OpenCvSharp__OpenCvSharp__Point3d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Point3d")]
		public static void core_Mat_push_back_Point3d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3d__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Point3d(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Size, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Size")]
		public static void core_Mat_push_back_Size(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Size(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Size2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size2f__OpenCvSharp__OpenCvSharp__Size2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Size2f")]
		public static void core_Mat_push_back_Size2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size2f__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Size2f(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_push_back_Rect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_push_back_Rect")]
		public static void core_Mat_push_back_Rect(
					global::System.IntPtr self, 
					global::OpenCvSharp.Rect__OpenCvSharp v)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_push_back_Rect(
								self, 
								v
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_reserve, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_reserve")]
		public static void core_Mat_reserve(
					global::System.IntPtr obj, 
					global::System.IntPtr sz)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_reserve(
								obj, 
								sz
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_resize1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_resize1")]
		public static void core_Mat_resize1(
					global::System.IntPtr obj, 
					global::System.IntPtr sz)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_resize1(
								obj, 
								sz
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_resize2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_resize2")]
		public static void core_Mat_resize2(
					global::System.IntPtr obj, 
					global::System.IntPtr sz, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_resize2(
								obj, 
								sz, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_pop_back, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_pop_back")]
		public static void core_Mat_pop_back(
					global::System.IntPtr obj, 
					global::System.IntPtr nelems)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_pop_back(
								obj, 
								nelems
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_Mat_forEach_uchar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionByte__OpenCvSharp__OpenCvSharp__MatForeachFunctionByte__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_uchar")]
		public static void core_Mat_forEach_uchar(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionByte__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionByte,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea09" +
											"9"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_uchar(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec2b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec2b__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec2b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec2b")]
		public static void core_Mat_forEach_Vec2b(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec2b__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec2b,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec2b(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec3b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec3b__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec3b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec3b")]
		public static void core_Mat_forEach_Vec3b(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec3b__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec3b,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec3b(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec4b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec4b__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec4b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec4b")]
		public static void core_Mat_forEach_Vec4b(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec4b__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec4b,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec4b(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec6b, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec6b__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec6b__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec6b")]
		public static void core_Mat_forEach_Vec6b(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec6b__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec6b,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec6b(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_short, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionInt16__OpenCvSharp__OpenCvSharp__MatForeachFunctionInt16__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_short")]
		public static void core_Mat_forEach_short(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionInt16__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionInt16,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_short(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec2s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec2s__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec2s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec2s")]
		public static void core_Mat_forEach_Vec2s(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec2s__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec2s,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec2s(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec3s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec3s__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec3s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec3s")]
		public static void core_Mat_forEach_Vec3s(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec3s__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec3s,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec3s(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec4s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec4s__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec4s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec4s")]
		public static void core_Mat_forEach_Vec4s(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec4s__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec4s,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec4s(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec6s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec6s__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec6s__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec6s")]
		public static void core_Mat_forEach_Vec6s(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec6s__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec6s,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec6s(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionInt32__OpenCvSharp__OpenCvSharp__MatForeachFunctionInt32__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_int")]
		public static void core_Mat_forEach_int(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionInt32__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionInt32,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_int(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec2i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec2i__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec2i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec2i")]
		public static void core_Mat_forEach_Vec2i(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec2i__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec2i,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec2i(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec3i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec3i__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec3i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec3i")]
		public static void core_Mat_forEach_Vec3i(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec3i__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec3i,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec3i(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec4i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec4i__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec4i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec4i")]
		public static void core_Mat_forEach_Vec4i(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec4i__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec4i,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec4i(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec6i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec6i__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec6i__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec6i")]
		public static void core_Mat_forEach_Vec6i(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec6i__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec6i,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec6i(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_float, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionFloat__OpenCvSharp__OpenCvSharp__MatForeachFunctionFloat__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_float")]
		public static void core_Mat_forEach_float(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionFloat__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionFloat,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_float(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec2f__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec2f")]
		public static void core_Mat_forEach_Vec2f(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec2f__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec2f,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec2f(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec3f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec3f__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec3f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec3f")]
		public static void core_Mat_forEach_Vec3f(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec3f__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec3f,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec3f(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec4f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec4f__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec4f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec4f")]
		public static void core_Mat_forEach_Vec4f(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec4f__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec4f,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec4f(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec6f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec6f__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec6f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec6f")]
		public static void core_Mat_forEach_Vec6f(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec6f__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec6f,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec6f(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionDouble__OpenCvSharp__OpenCvSharp__MatForeachFunctionDouble__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_double")]
		public static void core_Mat_forEach_double(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionDouble__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionDouble,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea" +
											"099"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_double(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec2d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec2d__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec2d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec2d")]
		public static void core_Mat_forEach_Vec2d(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec2d__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec2d,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec2d(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec3d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec3d__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec3d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec3d")]
		public static void core_Mat_forEach_Vec3d(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec3d__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec3d,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec3d(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec4d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec4d__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec4d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec4d")]
		public static void core_Mat_forEach_Vec4d(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec4d__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec4d,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec4d(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_Mat_forEach_Vec6d, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] OpenCvSharp_MatForeachFunctionVec6d__OpenCvSharp__OpenCvSharp__MatForeachFunctionVec6d__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_Mat_forEach_Vec6d")]
		public static void core_Mat_forEach_Vec6d(
					global::System.IntPtr m, 
					global::OpenCvSharp.MatForeachFunctionVec6d__OpenCvSharp proc)
		{
			// Setup
			void* unsafe_proc = default(void*);
			try
			{
				// Marshalling
				unsafe_proc = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("OpenCvSharp.MatForeachFunctionVec6d,OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea0" +
											"99"), 
									proc
								);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_Mat_forEach_Vec6d(
									m, 
									unsafe_proc
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(proc);
			}
		}

		// Signature, core_MatExpr_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_new")]
		public static global::System.IntPtr core_MatExpr_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_new__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_new")]
		public static global::System.IntPtr core_MatExpr_new__0(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_new__0(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_delete")]
		public static void core_MatExpr_delete(global::System.IntPtr expr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_delete(expr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_MatExpr_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_toMat")]
		public static global::System.IntPtr core_MatExpr_toMat(global::System.IntPtr expr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_toMat(expr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorUnaryMinus_MatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorUnaryMinus_MatExpr")]
		public static global::System.IntPtr core_operatorUnaryMinus_MatExpr(global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorUnaryMinus_MatExpr(e);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorUnaryNot_MatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorUnaryNot_MatExpr")]
		public static global::System.IntPtr core_operatorUnaryNot_MatExpr(global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorUnaryNot_MatExpr(e);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorAdd_MatExprMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorAdd_MatExprMat")]
		public static global::System.IntPtr core_operatorAdd_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorAdd_MatExprMat(
								e, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorAdd_MatMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorAdd_MatMatExpr")]
		public static global::System.IntPtr core_operatorAdd_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorAdd_MatMatExpr(
								m, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorAdd_MatExprScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorAdd_MatExprScalar")]
		public static global::System.IntPtr core_operatorAdd_MatExprScalar(
					global::System.IntPtr e, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorAdd_MatExprScalar(
								e, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorAdd_ScalarMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorAdd_ScalarMatExpr")]
		public static global::System.IntPtr core_operatorAdd_ScalarMatExpr(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorAdd_ScalarMatExpr(
								s, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorAdd_MatExprMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorAdd_MatExprMatExpr")]
		public static global::System.IntPtr core_operatorAdd_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorAdd_MatExprMatExpr(
								e1, 
								e2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorSubtract_MatExprMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorSubtract_MatExprMat")]
		public static global::System.IntPtr core_operatorSubtract_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorSubtract_MatExprMat(
								e, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorSubtract_MatMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorSubtract_MatMatExpr")]
		public static global::System.IntPtr core_operatorSubtract_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorSubtract_MatMatExpr(
								m, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorSubtract_MatExprScalar, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorSubtract_MatExprScalar")]
		public static global::System.IntPtr core_operatorSubtract_MatExprScalar(
					global::System.IntPtr e, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorSubtract_MatExprScalar(
								e, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorSubtract_ScalarMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorSubtract_ScalarMatExpr")]
		public static global::System.IntPtr core_operatorSubtract_ScalarMatExpr(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorSubtract_ScalarMatExpr(
								s, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorSubtract_MatExprMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorSubtract_MatExprMatExpr")]
		public static global::System.IntPtr core_operatorSubtract_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorSubtract_MatExprMatExpr(
								e1, 
								e2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorMultiply_MatExprMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorMultiply_MatExprMat")]
		public static global::System.IntPtr core_operatorMultiply_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorMultiply_MatExprMat(
								e, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorMultiply_MatMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorMultiply_MatMatExpr")]
		public static global::System.IntPtr core_operatorMultiply_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorMultiply_MatMatExpr(
								m, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorMultiply_MatExprDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorMultiply_MatExprDouble")]
		public static global::System.IntPtr core_operatorMultiply_MatExprDouble(
					global::System.IntPtr e, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorMultiply_MatExprDouble(
								e, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorMultiply_DoubleMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorMultiply_DoubleMatExpr")]
		public static global::System.IntPtr core_operatorMultiply_DoubleMatExpr(
					double s, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorMultiply_DoubleMatExpr(
								s, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorMultiply_MatExprMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorMultiply_MatExprMatExpr")]
		public static global::System.IntPtr core_operatorMultiply_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorMultiply_MatExprMatExpr(
								e1, 
								e2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorDivide_MatExprMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorDivide_MatExprMat")]
		public static global::System.IntPtr core_operatorDivide_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorDivide_MatExprMat(
								e, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorDivide_MatMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorDivide_MatMatExpr")]
		public static global::System.IntPtr core_operatorDivide_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorDivide_MatMatExpr(
								m, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorDivide_MatExprDouble, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorDivide_MatExprDouble")]
		public static global::System.IntPtr core_operatorDivide_MatExprDouble(
					global::System.IntPtr e, 
					double s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorDivide_MatExprDouble(
								e, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorDivide_DoubleMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorDivide_DoubleMatExpr")]
		public static global::System.IntPtr core_operatorDivide_DoubleMatExpr(
					double s, 
					global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorDivide_DoubleMatExpr(
								s, 
								e
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_operatorDivide_MatExprMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_operatorDivide_MatExprMatExpr")]
		public static global::System.IntPtr core_operatorDivide_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_operatorDivide_MatExprMatExpr(
								e1, 
								e2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_row, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_row")]
		public static global::System.IntPtr core_MatExpr_row(
					global::System.IntPtr self, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_row(
								self, 
								y
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_col, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_col")]
		public static global::System.IntPtr core_MatExpr_col(
					global::System.IntPtr self, 
					int x)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_col(
								self, 
								x
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_diag, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_diag")]
		public static global::System.IntPtr core_MatExpr_diag(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_diag(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_diag__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_diag")]
		public static global::System.IntPtr core_MatExpr_diag__0(
					global::System.IntPtr self, 
					int d)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_diag__0(
								self, 
								d
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_submat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_submat")]
		public static global::System.IntPtr core_MatExpr_submat(
					global::System.IntPtr self, 
					int rowStart, 
					int rowEnd, 
					int colStart, 
					int colEnd)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_submat(
								self, 
								rowStart, 
								rowEnd, 
								colStart, 
								colEnd
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_cross, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_cross")]
		public static global::System.IntPtr core_MatExpr_cross(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_cross(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_dot, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_dot")]
		public static double core_MatExpr_dot(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_dot(
								self, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_t, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_t")]
		public static global::System.IntPtr core_MatExpr_t(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_t(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_inv, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_inv")]
		public static global::System.IntPtr core_MatExpr_inv(global::System.IntPtr self)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_inv(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_inv__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_inv")]
		public static global::System.IntPtr core_MatExpr_inv__0(
					global::System.IntPtr self, 
					int method)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_inv__0(
								self, 
								method
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_mul_toMatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_mul_toMatExpr")]
		public static global::System.IntPtr core_MatExpr_mul_toMatExpr(
					global::System.IntPtr self, 
					global::System.IntPtr e, 
					double scale)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_mul_toMatExpr(
								self, 
								e, 
								scale
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_mul_toMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_mul_toMat")]
		public static global::System.IntPtr core_MatExpr_mul_toMat(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					double scale)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_mul_toMat(
								self, 
								m, 
								scale
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_size, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_size")]
		public static global::OpenCvSharp.Size__OpenCvSharp core_MatExpr_size(global::System.IntPtr self)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_size(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_MatExpr_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_MatExpr_type")]
		public static int core_MatExpr_type(global::System.IntPtr self)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_MatExpr_type(self);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_abs_MatExpr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_abs_MatExpr")]
		public static global::System.IntPtr core_abs_MatExpr(global::System.IntPtr e)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_abs_MatExpr(e);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_sizeof, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_sizeof")]
		public static ulong core_SparseMat_sizeof()
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_sizeof();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_new1")]
		public static global::System.IntPtr core_SparseMat_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_new2")]
		public static global::System.IntPtr core_SparseMat_new2(
					int dims, 
					int[] sizes, 
					int type)
		{
			// Setup
			int* unsafe_sizes;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_new2(
									dims, 
									unsafe_sizes, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_new3")]
		public static global::System.IntPtr core_SparseMat_new3(global::System.IntPtr m)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_new3(m);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_delete")]
		public static void core_SparseMat_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_operatorAssign_SparseMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_operatorAssign_SparseMat")]
		public static void core_SparseMat_operatorAssign_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_operatorAssign_SparseMat(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_operatorAssign_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_operatorAssign_Mat")]
		public static void core_SparseMat_operatorAssign_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_operatorAssign_Mat(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_clone, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_clone")]
		public static global::System.IntPtr core_SparseMat_clone(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_clone(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_copyTo_SparseMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_copyTo_SparseMat")]
		public static void core_SparseMat_copyTo_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_copyTo_SparseMat(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_copyTo_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_copyTo_Mat")]
		public static void core_SparseMat_copyTo_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_copyTo_Mat(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_convertTo_SparseMat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_convertTo_SparseMat")]
		public static void core_SparseMat_convertTo_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_convertTo_SparseMat(
								obj, 
								m, 
								rtype, 
								alpha
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_convertTo_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_convertTo_Mat")]
		public static void core_SparseMat_convertTo_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_convertTo_Mat(
								obj, 
								m, 
								rtype, 
								alpha, 
								beta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_assignTo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_assignTo")]
		public static void core_SparseMat_assignTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_assignTo(
								obj, 
								m, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_create, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_create")]
		public static void core_SparseMat_create(
					global::System.IntPtr obj, 
					int dims, 
					int[] sizes, 
					int type)
		{
			// Setup
			int* unsafe_sizes;
			// Marshalling
			fixed (int* pinned_sizes = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sizes))
			{
				unsafe_sizes = (int*)pinned_sizes;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_create(
									obj, 
									dims, 
									unsafe_sizes, 
									type
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, core_SparseMat_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_clear")]
		public static void core_SparseMat_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_addref, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_addref")]
		public static void core_SparseMat_addref(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_addref(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_release")]
		public static void core_SparseMat_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_SparseMat_elemSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_elemSize")]
		public static int core_SparseMat_elemSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_elemSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_elemSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_elemSize1")]
		public static int core_SparseMat_elemSize1(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_elemSize1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_type")]
		public static int core_SparseMat_type(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_type(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_depth, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_depth")]
		public static int core_SparseMat_depth(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_depth(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_channels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_channels")]
		public static int core_SparseMat_channels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_channels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_size1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_size1")]
		public static global::System.IntPtr core_SparseMat_size1(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_size1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_size2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_size2")]
		public static int core_SparseMat_size2(
					global::System.IntPtr obj, 
					int i)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_size2(
								obj, 
								i
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_dims, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_dims")]
		public static int core_SparseMat_dims(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_dims(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_nzcount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_nzcount")]
		public static global::System.IntPtr core_SparseMat_nzcount(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_nzcount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_hash_1d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_hash_1d")]
		public static global::System.IntPtr core_SparseMat_hash_1d(
					global::System.IntPtr obj, 
					int i0)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_hash_1d(
								obj, 
								i0
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_hash_2d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_hash_2d")]
		public static global::System.IntPtr core_SparseMat_hash_2d(
					global::System.IntPtr obj, 
					int i0, 
					int i1)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_hash_2d(
								obj, 
								i0, 
								i1
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_hash_3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_hash_3d")]
		public static global::System.IntPtr core_SparseMat_hash_3d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_hash_3d(
								obj, 
								i0, 
								i1, 
								i2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_hash_nd, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_hash_nd")]
		public static global::System.IntPtr core_SparseMat_hash_nd(
					global::System.IntPtr obj, 
					int[] idx)
		{
			// Setup
			int* unsafe_idx;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_idx = global::McgInterop.McgCoreHelpers.GetArrayForCompat(idx))
			{
				unsafe_idx = (int*)pinned_idx;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_hash_nd(
									obj, 
									unsafe_idx
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_1d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_1d")]
		public static global::System.IntPtr core_SparseMat_ptr_1d(
					global::System.IntPtr obj, 
					int i0, 
					int createMissing, 
					ref ulong hashval)
		{
			// Setup
			ulong unsafe_hashval;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_hashval = hashval;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_1d(
								obj, 
								i0, 
								createMissing, 
								&(unsafe_hashval)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			hashval = unsafe_hashval;
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_1d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_1d")]
		public static global::System.IntPtr core_SparseMat_ptr_1d__0(
					global::System.IntPtr obj, 
					int i0, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_1d__0(
								obj, 
								i0, 
								createMissing, 
								hashval
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_2d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_2d")]
		public static global::System.IntPtr core_SparseMat_ptr_2d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int createMissing, 
					ref ulong hashval)
		{
			// Setup
			ulong unsafe_hashval;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_hashval = hashval;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_2d(
								obj, 
								i0, 
								i1, 
								createMissing, 
								&(unsafe_hashval)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			hashval = unsafe_hashval;
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_2d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_2d")]
		public static global::System.IntPtr core_SparseMat_ptr_2d__0(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_2d__0(
								obj, 
								i0, 
								i1, 
								createMissing, 
								hashval
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_3d, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_3d")]
		public static global::System.IntPtr core_SparseMat_ptr_3d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2, 
					int createMissing, 
					ref ulong hashval)
		{
			// Setup
			ulong unsafe_hashval;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_hashval = hashval;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_3d(
								obj, 
								i0, 
								i1, 
								i2, 
								createMissing, 
								&(unsafe_hashval)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			hashval = unsafe_hashval;
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_3d__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_3d")]
		public static global::System.IntPtr core_SparseMat_ptr_3d__0(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_3d__0(
								obj, 
								i0, 
								i1, 
								i2, 
								createMissing, 
								hashval
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_nd, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_nd")]
		public static global::System.IntPtr core_SparseMat_ptr_nd(
					global::System.IntPtr obj, 
					int[] idx, 
					int createMissing, 
					ref ulong hashval)
		{
			// Setup
			int* unsafe_idx;
			ulong unsafe_hashval;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_idx = global::McgInterop.McgCoreHelpers.GetArrayForCompat(idx))
			{
				unsafe_idx = (int*)pinned_idx;
				unsafe_hashval = hashval;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_nd(
									obj, 
									unsafe_idx, 
									createMissing, 
									&(unsafe_hashval)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				hashval = unsafe_hashval;
			}
			// Return
			return unsafe___value;
		}

		// Signature, core_SparseMat_ptr_nd__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_SparseMat_ptr_nd")]
		public static global::System.IntPtr core_SparseMat_ptr_nd__0(
					global::System.IntPtr obj, 
					int[] idx, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			// Setup
			int* unsafe_idx;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (int* pinned_idx = global::McgInterop.McgCoreHelpers.GetArrayForCompat(idx))
			{
				unsafe_idx = (int*)pinned_idx;
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_SparseMat_ptr_nd__0(
									obj, 
									unsafe_idx, 
									createMissing, 
									hashval
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, cuda_getCudaEnabledDeviceCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_getCudaEnabledDeviceCount")]
		public static int cuda_getCudaEnabledDeviceCount()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_getCudaEnabledDeviceCount();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_setDevice, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_setDevice")]
		public static void cuda_setDevice(int device)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_setDevice(device);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_getDevice, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_getDevice")]
		public static int cuda_getDevice()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_getDevice();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_resetDevice, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_resetDevice")]
		public static void cuda_resetDevice()
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_resetDevice();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_deviceSupports, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_deviceSupports")]
		public static int cuda_deviceSupports(int feature_set)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_deviceSupports(feature_set);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_builtWith, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_builtWith")]
		public static int cuda_TargetArchs_builtWith(int feature_set)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_builtWith(feature_set);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_has, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_has")]
		public static int cuda_TargetArchs_has(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_has(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasPtx, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasPtx")]
		public static int cuda_TargetArchs_hasPtx(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasPtx(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasBin, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasBin")]
		public static int cuda_TargetArchs_hasBin(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasBin(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasEqualOrLessPtx, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasEqualOrLessPtx")]
		public static int cuda_TargetArchs_hasEqualOrLessPtx(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasEqualOrLessPtx(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasEqualOrGreater, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasEqualOrGreater")]
		public static int cuda_TargetArchs_hasEqualOrGreater(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasEqualOrGreater(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasEqualOrGreaterPtx, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasEqualOrGreaterPtx")]
		public static int cuda_TargetArchs_hasEqualOrGreaterPtx(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasEqualOrGreaterPtx(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_TargetArchs_hasEqualOrGreaterBin, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_TargetArchs_hasEqualOrGreaterBin")]
		public static int cuda_TargetArchs_hasEqualOrGreaterBin(
					int major, 
					int minor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_TargetArchs_hasEqualOrGreaterBin(
								major, 
								minor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_new1")]
		public static global::System.IntPtr cuda_DeviceInfo_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_new2")]
		public static global::System.IntPtr cuda_DeviceInfo_new2(int deviceId)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_new2(deviceId);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_delete")]
		public static void cuda_DeviceInfo_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_DeviceInfo_name, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_name")]
		public static void cuda_DeviceInfo_name(
					global::System.IntPtr obj, 
					global::System.Text.StringBuilder buf, 
					int bufLength)
		{
			// Setup
			byte* unsafe_buf = default(byte*);
			try
			{
				// Marshalling
				if (buf == null)
					unsafe_buf = null;
				else
				{
					unsafe_buf = (byte*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(buf.Capacity * global::System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize 
										+ 2)));
					if (unsafe_buf == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToAnsiString(
										buf, 
										unsafe_buf, 
										true, 
										false
									);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_name(
									obj, 
									unsafe_buf, 
									bufLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				if (buf != null)
					global::System.Runtime.InteropServices.McgMarshal.AnsiStringToStringBuilder(
										unsafe_buf, 
										buf
									);
				// Return
			}
			finally
			{
				// Cleanup
				if (unsafe_buf != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buf);
			}
		}

		// Signature, cuda_DeviceInfo_majorVersion, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_majorVersion")]
		public static int cuda_DeviceInfo_majorVersion(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_majorVersion(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_minorVersion, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_minorVersion")]
		public static int cuda_DeviceInfo_minorVersion(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_minorVersion(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_multiProcessorCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_multiProcessorCount")]
		public static int cuda_DeviceInfo_multiProcessorCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_multiProcessorCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_sharedMemPerBlock, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_sharedMemPerBlock")]
		public static ulong cuda_DeviceInfo_sharedMemPerBlock(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_sharedMemPerBlock(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_queryMemory, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_queryMemory")]
		public static void cuda_DeviceInfo_queryMemory(
					global::System.IntPtr obj, 
					out ulong totalMemory, 
					out ulong freeMemory)
		{
			// Setup
			ulong unsafe_totalMemory;
			ulong unsafe_freeMemory;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_queryMemory(
								obj, 
								&(unsafe_totalMemory), 
								&(unsafe_freeMemory)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			freeMemory = unsafe_freeMemory;
			totalMemory = unsafe_totalMemory;
			// Return
		}

		// Signature, cuda_DeviceInfo_freeMemory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_freeMemory")]
		public static ulong cuda_DeviceInfo_freeMemory(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_freeMemory(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_totalMemory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_totalMemory")]
		public static ulong cuda_DeviceInfo_totalMemory(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_totalMemory(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_supports, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_supports")]
		public static int cuda_DeviceInfo_supports(
					global::System.IntPtr obj, 
					int featureSet)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_supports(
								obj, 
								featureSet
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_isCompatible, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_isCompatible")]
		public static int cuda_DeviceInfo_isCompatible(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_isCompatible(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_deviceID, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_deviceID")]
		public static int cuda_DeviceInfo_deviceID(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_deviceID(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_DeviceInfo_canMapHostMemory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_DeviceInfo_canMapHostMemory")]
		public static int cuda_DeviceInfo_canMapHostMemory(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_DeviceInfo_canMapHostMemory(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_printCudaDeviceInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_printCudaDeviceInfo")]
		public static void cuda_printCudaDeviceInfo(int device)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_printCudaDeviceInfo(device);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_printShortCudaDeviceInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_printShortCudaDeviceInfo")]
		public static void cuda_printShortCudaDeviceInfo(int device)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_printShortCudaDeviceInfo(device);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_registerPageLocked, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_registerPageLocked")]
		public static void cuda_registerPageLocked(global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_registerPageLocked(m);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_unregisterPageLocked, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_unregisterPageLocked")]
		public static void cuda_unregisterPageLocked(global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_unregisterPageLocked(m);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_new1")]
		public static global::System.IntPtr cuda_Stream_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_Stream_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_new2")]
		public static global::System.IntPtr cuda_Stream_new2(global::System.IntPtr s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_new2(s);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_Stream_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_delete")]
		public static void cuda_Stream_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_opAssign, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_opAssign")]
		public static void cuda_Stream_opAssign(
					global::System.IntPtr left, 
					global::System.IntPtr right)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_opAssign(
								left, 
								right
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_queryIfComplete, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_queryIfComplete")]
		public static int cuda_Stream_queryIfComplete(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_queryIfComplete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_Stream_waitForCompletion, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_waitForCompletion")]
		public static void cuda_Stream_waitForCompletion(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_waitForCompletion(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueDownload_CudaMem, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueDownload_CudaMem")]
		public static void cuda_Stream_enqueueDownload_CudaMem(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueDownload_CudaMem(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueDownload_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueDownload_Mat")]
		public static void cuda_Stream_enqueueDownload_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueDownload_Mat(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueUpload_CudaMem, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueUpload_CudaMem")]
		public static void cuda_Stream_enqueueUpload_CudaMem(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueUpload_CudaMem(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueUpload_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueUpload_Mat")]
		public static void cuda_Stream_enqueueUpload_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueUpload_Mat(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueCopy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueCopy")]
		public static void cuda_Stream_enqueueCopy(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueCopy(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueMemSet, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueMemSet")]
		public static void cuda_Stream_enqueueMemSet(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueMemSet(
								obj, 
								src, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueMemSet_WithMask, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueMemSet_WithMask")]
		public static void cuda_Stream_enqueueMemSet_WithMask(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp val, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueMemSet_WithMask(
								obj, 
								src, 
								val, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueConvert, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueConvert")]
		public static void cuda_Stream_enqueueConvert(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int dtype, 
					double a, 
					double b)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueConvert(
								obj, 
								src, 
								dst, 
								dtype, 
								a, 
								b
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_enqueueHostCallback, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_enqueueHostCallback")]
		public static void cuda_Stream_enqueueHostCallback(
					global::System.IntPtr obj, 
					global::System.IntPtr callback, 
					global::System.IntPtr userData)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_enqueueHostCallback(
								obj, 
								callback, 
								userData
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_Stream_Null, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_Null")]
		public static global::System.IntPtr cuda_Stream_Null()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_Null();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_Stream_bool, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_Stream_bool")]
		public static int cuda_Stream_bool(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_Stream_bool(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_delete")]
		public static void cuda_CascadeClassifier_GPU_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_CascadeClassifier_GPU_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_new1")]
		public static global::System.IntPtr cuda_CascadeClassifier_GPU_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_new2")]
		public static global::System.IntPtr cuda_CascadeClassifier_GPU_new2(string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_new2(unsafe_filename);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, cuda_CascadeClassifier_GPU_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_empty")]
		public static int cuda_CascadeClassifier_GPU_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_load, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_load")]
		public static int cuda_CascadeClassifier_GPU_load(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_load(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, cuda_CascadeClassifier_GPU_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_release")]
		public static void cuda_CascadeClassifier_GPU_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_CascadeClassifier_GPU_detectMultiScale1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_detectMultiScale1")]
		public static int cuda_CascadeClassifier_GPU_detectMultiScale1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectsBuf, 
					double scaleFactor, 
					int minNeighbors, 
					global::OpenCvSharp.Size__OpenCvSharp minSize)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_detectMultiScale1(
								obj, 
								image, 
								objectsBuf, 
								scaleFactor, 
								minNeighbors, 
								minSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_detectMultiScale2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_detectMultiScale2")]
		public static int cuda_CascadeClassifier_GPU_detectMultiScale2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectsBuf, 
					global::OpenCvSharp.Size__OpenCvSharp maxObjectSize, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					double scaleFactor, 
					int minNeighbors)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_detectMultiScale2(
								obj, 
								image, 
								objectsBuf, 
								maxObjectSize, 
								minSize, 
								scaleFactor, 
								minNeighbors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_findLargestObject_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_findLargestObject_get")]
		public static int cuda_CascadeClassifier_GPU_findLargestObject_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_findLargestObject_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_findLargestObject_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_findLargestObject_set")]
		public static void cuda_CascadeClassifier_GPU_findLargestObject_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_findLargestObject_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_CascadeClassifier_GPU_visualizeInPlace_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_visualizeInPlace_get")]
		public static int cuda_CascadeClassifier_GPU_visualizeInPlace_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_visualizeInPlace_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_CascadeClassifier_GPU_visualizeInPlace_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_visualizeInPlace_set")]
		public static void cuda_CascadeClassifier_GPU_visualizeInPlace_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_visualizeInPlace_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_CascadeClassifier_GPU_getClassifierSize, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_CascadeClassifier_GPU_getClassifierSize")]
		public static global::OpenCvSharp.Size__OpenCvSharp cuda_CascadeClassifier_GPU_getClassifierSize(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_CascadeClassifier_GPU_getClassifierSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_sizeof, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_sizeof")]
		public static int HOGDescriptor_sizeof()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_sizeof();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_new")]
		public static global::System.IntPtr HOGDescriptor_new(
					global::OpenCvSharp.Size__OpenCvSharp win_size, 
					global::OpenCvSharp.Size__OpenCvSharp block_size, 
					global::OpenCvSharp.Size__OpenCvSharp block_stride, 
					global::OpenCvSharp.Size__OpenCvSharp cell_size, 
					int nbins, 
					double winSigma, 
					double threshold_L2Hys, 
					bool gamma_correction, 
					int nlevels)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_new(
								win_size, 
								block_size, 
								block_stride, 
								cell_size, 
								nbins, 
								winSigma, 
								threshold_L2Hys, 
								(gamma_correction ? 1 : 0), 
								nlevels
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_delete")]
		public static void HOGDescriptor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_getDescriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_getDescriptorSize")]
		public static ulong HOGDescriptor_getDescriptorSize(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_getDescriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_getBlockHistogramSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_getBlockHistogramSize")]
		public static ulong HOGDescriptor_getBlockHistogramSize(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_getBlockHistogramSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_checkDetectorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_checkDetectorSize")]
		public static int HOGDescriptor_checkDetectorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_checkDetectorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_getWinSigma, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_getWinSigma")]
		public static double HOGDescriptor_getWinSigma(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_getWinSigma(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_setSVMDetector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_setSVMDetector")]
		public static void HOGDescriptor_setSVMDetector(
					global::System.IntPtr obj, 
					global::System.IntPtr svmdetector)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_setSVMDetector(
								obj, 
								svmdetector
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_detect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_detect")]
		public static void HOGDescriptor_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr found_locations, 
					double hit_threshold, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::OpenCvSharp.Size__OpenCvSharp padding)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_detect(
								obj, 
								img, 
								found_locations, 
								hit_threshold, 
								win_stride, 
								padding
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_detectMultiScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_detectMultiScale")]
		public static void HOGDescriptor_detectMultiScale(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr found_locations, 
					double hit_threshold, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int group_threshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_detectMultiScale(
								obj, 
								img, 
								found_locations, 
								hit_threshold, 
								win_stride, 
								padding, 
								scale, 
								group_threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_getDescriptors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] OpenCvSharp_Gpu_DescriptorFormat__OpenCvSharp__DescriptorFormat__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_getDescriptors")]
		public static void HOGDescriptor_getDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::System.IntPtr descriptors, 
					global::OpenCvSharp.Gpu.DescriptorFormat__OpenCvSharp descr_format)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_getDescriptors(
								obj, 
								img, 
								win_stride, 
								descriptors, 
								descr_format
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_win_size_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_win_size_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_win_size_get(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_win_size_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_block_size_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_block_size_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_block_size_get(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_block_size_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_block_stride_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_block_stride_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_block_stride_get(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_block_stride_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_cell_size_get, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_cell_size_get")]
		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_cell_size_get(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_cell_size_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_nbins_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_nbins_get")]
		public static int HOGDescriptor_nbins_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_nbins_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_win_sigma_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_win_sigma_get")]
		public static double HOGDescriptor_win_sigma_get(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_win_sigma_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_threshold_L2hys_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_threshold_L2hys_get")]
		public static double HOGDescriptor_threshold_L2hys_get(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_threshold_L2hys_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_nlevels_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_nlevels_get")]
		public static int HOGDescriptor_nlevels_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_nlevels_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_gamma_correction_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_gamma_correction_get")]
		public static int HOGDescriptor_gamma_correction_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_gamma_correction_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, HOGDescriptor_win_size_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_win_size_set")]
		public static void HOGDescriptor_win_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_win_size_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_block_size_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_block_size_set")]
		public static void HOGDescriptor_block_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_block_size_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_block_stride_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_block_stride_set")]
		public static void HOGDescriptor_block_stride_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_block_stride_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_cell_size_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_cell_size_set")]
		public static void HOGDescriptor_cell_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_cell_size_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_nbins_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_nbins_set")]
		public static void HOGDescriptor_nbins_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_nbins_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_win_sigma_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_win_sigma_set")]
		public static void HOGDescriptor_win_sigma_set(
					global::System.IntPtr obj, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_win_sigma_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_threshold_L2hys_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_threshold_L2hys_set")]
		public static void HOGDescriptor_threshold_L2hys_set(
					global::System.IntPtr obj, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_threshold_L2hys_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_nlevels_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_nlevels_set")]
		public static void HOGDescriptor_nlevels_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_nlevels_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, HOGDescriptor_gamma_correction_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "HOGDescriptor_gamma_correction_set")]
		public static void HOGDescriptor_gamma_correction_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.HOGDescriptor_gamma_correction_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_delete")]
		public static void cuda_MOG_GPU_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_new")]
		public static global::System.IntPtr cuda_MOG_GPU_new(int nmixtures)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_new(nmixtures);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_MOG_GPU_initialize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_initialize")]
		public static void cuda_MOG_GPU_initialize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int frameType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_initialize(
								obj, 
								frameSize, 
								frameType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_operator, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_operator")]
		public static void cuda_MOG_GPU_operator(
					global::System.IntPtr obj, 
					global::System.IntPtr frame, 
					global::System.IntPtr fgmask, 
					float learningRate, 
					global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_operator(
								obj, 
								frame, 
								fgmask, 
								learningRate, 
								stream
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_getBackgroundImage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_getBackgroundImage")]
		public static void cuda_MOG_GPU_getBackgroundImage(
					global::System.IntPtr obj, 
					global::System.IntPtr backgroundImage, 
					global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_getBackgroundImage(
								obj, 
								backgroundImage, 
								stream
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_release")]
		public static void cuda_MOG_GPU_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG_GPU_history, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_history")]
		public static int* cuda_MOG_GPU_history(global::System.IntPtr obj)
		{
			// Setup
			int* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (int*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_history(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (int*)unsafe___value;
		}

		// Signature, cuda_MOG_GPU_varThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_varThreshold")]
		public static float* cuda_MOG_GPU_varThreshold(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_varThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG_GPU_backgroundRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_backgroundRatio")]
		public static float* cuda_MOG_GPU_backgroundRatio(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_backgroundRatio(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG_GPU_noiseSigma, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG_GPU_noiseSigma")]
		public static float* cuda_MOG_GPU_noiseSigma(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG_GPU_noiseSigma(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_delete")]
		public static void cuda_MOG2_GPU_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_new")]
		public static global::System.IntPtr cuda_MOG2_GPU_new(int nmixtures)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_new(nmixtures);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_initialize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_initialize")]
		public static void cuda_MOG2_GPU_initialize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int frameType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_initialize(
								obj, 
								frameSize, 
								frameType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_operator, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_operator")]
		public static void cuda_MOG2_GPU_operator(
					global::System.IntPtr obj, 
					global::System.IntPtr frame, 
					global::System.IntPtr fgmask, 
					float learningRate, 
					global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_operator(
								obj, 
								frame, 
								fgmask, 
								learningRate, 
								stream
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_getBackgroundImage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_getBackgroundImage")]
		public static void cuda_MOG2_GPU_getBackgroundImage(
					global::System.IntPtr obj, 
					global::System.IntPtr backgroundImage, 
					global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_getBackgroundImage(
								obj, 
								backgroundImage, 
								stream
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_release")]
		public static void cuda_MOG2_GPU_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_history, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_history")]
		public static int* cuda_MOG2_GPU_history(global::System.IntPtr obj)
		{
			// Setup
			int* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (int*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_history(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (int*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_varThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_varThreshold")]
		public static float* cuda_MOG2_GPU_varThreshold(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_varThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_backgroundRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_backgroundRatio")]
		public static float* cuda_MOG2_GPU_backgroundRatio(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_backgroundRatio(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_varThresholdGen, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_varThresholdGen")]
		public static float* cuda_MOG2_GPU_varThresholdGen(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_varThresholdGen(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_fVarInit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_fVarInit")]
		public static float* cuda_MOG2_GPU_fVarInit(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_fVarInit(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_fVarMin, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_fVarMin")]
		public static float* cuda_MOG2_GPU_fVarMin(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_fVarMin(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_fVarMax, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_fVarMax")]
		public static float* cuda_MOG2_GPU_fVarMax(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_fVarMax(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_fCT, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_fCT")]
		public static float* cuda_MOG2_GPU_fCT(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_fCT(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_bShadowDetection_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_bShadowDetection_get")]
		public static int cuda_MOG2_GPU_bShadowDetection_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_bShadowDetection_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_bShadowDetection_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_bShadowDetection_set")]
		public static void cuda_MOG2_GPU_bShadowDetection_set(
					global::System.IntPtr obj, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_bShadowDetection_set(
								obj, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_MOG2_GPU_nShadowDetection, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_nShadowDetection")]
		public static byte* cuda_MOG2_GPU_nShadowDetection(global::System.IntPtr obj)
		{
			// Setup
			byte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (byte*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_nShadowDetection(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (byte*)unsafe___value;
		}

		// Signature, cuda_MOG2_GPU_fTau, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_MOG2_GPU_fTau")]
		public static float* cuda_MOG2_GPU_fTau(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_MOG2_GPU_fTau(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_new1")]
		public static global::System.IntPtr cuda_StereoBM_GPU_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_new2")]
		public static global::System.IntPtr cuda_StereoBM_GPU_new2(
					int preset, 
					int ndisparities, 
					int winSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_new2(
								preset, 
								ndisparities, 
								winSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_delete")]
		public static void cuda_StereoBM_GPU_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_StereoBM_GPU_run1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_run1")]
		public static void cuda_StereoBM_GPU_run1(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_run1(
								obj, 
								left, 
								right, 
								disparity
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_StereoBM_GPU_run2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_run2")]
		public static void cuda_StereoBM_GPU_run2(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity, 
					global::System.IntPtr stream)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_run2(
								obj, 
								left, 
								right, 
								disparity, 
								stream
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_StereoBM_GPU_checkIfGpuCallReasonable, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_checkIfGpuCallReasonable")]
		public static int cuda_StereoBM_GPU_checkIfGpuCallReasonable()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_checkIfGpuCallReasonable();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_preset, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_preset")]
		public static int* cuda_StereoBM_GPU_preset(global::System.IntPtr obj)
		{
			// Setup
			int* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (int*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_preset(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (int*)unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_ndisp, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_ndisp")]
		public static int* cuda_StereoBM_GPU_ndisp(global::System.IntPtr obj)
		{
			// Setup
			int* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (int*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_ndisp(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (int*)unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_winSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_winSize")]
		public static int* cuda_StereoBM_GPU_winSize(global::System.IntPtr obj)
		{
			// Setup
			int* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (int*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_winSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (int*)unsafe___value;
		}

		// Signature, cuda_StereoBM_GPU_avergeTexThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float___ptrfloat *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_StereoBM_GPU_avergeTexThreshold")]
		public static float* cuda_StereoBM_GPU_avergeTexThreshold(global::System.IntPtr obj)
		{
			// Setup
			float* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (float*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_StereoBM_GPU_avergeTexThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (float*)unsafe___value;
		}

		// Signature, cuda_GpuMat_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_delete")]
		public static void cuda_GpuMat_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new1")]
		public static global::System.IntPtr cuda_GpuMat_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new2")]
		public static global::System.IntPtr cuda_GpuMat_new2(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new2(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new3, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new3")]
		public static global::System.IntPtr cuda_GpuMat_new3(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr data, 
					ulong step)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new3(
								rows, 
								cols, 
								type, 
								data, 
								step
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new4, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new4")]
		public static global::System.IntPtr cuda_GpuMat_new4(global::System.IntPtr mat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new4(mat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new5, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new5")]
		public static global::System.IntPtr cuda_GpuMat_new5(global::System.IntPtr gpumat)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new5(gpumat);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new6, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new6")]
		public static global::System.IntPtr cuda_GpuMat_new6(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new6(
								size, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new7, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new7")]
		public static global::System.IntPtr cuda_GpuMat_new7(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type, 
					global::System.IntPtr data, 
					ulong step)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new7(
								size, 
								type, 
								data, 
								step
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new8, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new8")]
		public static global::System.IntPtr cuda_GpuMat_new8(
					int rows, 
					int cols, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new8(
								rows, 
								cols, 
								type, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new9, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new9")]
		public static global::System.IntPtr cuda_GpuMat_new9(
					global::System.IntPtr m, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new9(
								m, 
								rowRange, 
								colRange
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new10, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new10")]
		public static global::System.IntPtr cuda_GpuMat_new10(
					global::System.IntPtr m, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new10(
								m, 
								roi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_new11, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_new11")]
		public static global::System.IntPtr cuda_GpuMat_new11(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_new11(
								size, 
								type, 
								s
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_opToMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_opToMat")]
		public static global::System.IntPtr cuda_GpuMat_opToMat(global::System.IntPtr src)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_opToMat(src);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_opToGpuMat, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_opToGpuMat")]
		public static global::System.IntPtr cuda_GpuMat_opToGpuMat(global::System.IntPtr src)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_opToGpuMat(src);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_opAssign, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_opAssign")]
		public static void cuda_GpuMat_opAssign(
					global::System.IntPtr left, 
					global::System.IntPtr right)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_opAssign(
								left, 
								right
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_opRange1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_opRange1")]
		public static global::System.IntPtr cuda_GpuMat_opRange1(
					global::System.IntPtr src, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_opRange1(
								src, 
								roi
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_opRange2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Range__OpenCvSharp__OpenCvSharp__Range__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_opRange2")]
		public static global::System.IntPtr cuda_GpuMat_opRange2(
					global::System.IntPtr src, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_opRange2(
								src, 
								rowRange, 
								colRange
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_flags, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_flags")]
		public static int cuda_GpuMat_flags(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_flags(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_rows, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_rows")]
		public static int cuda_GpuMat_rows(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_rows(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_cols, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_cols")]
		public static int cuda_GpuMat_cols(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_cols(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_step")]
		public static ulong cuda_GpuMat_step(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_step(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_data, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_data")]
		public static byte* cuda_GpuMat_data(global::System.IntPtr obj)
		{
			// Setup
			byte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (byte*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_data(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (byte*)unsafe___value;
		}

		// Signature, cuda_GpuMat_refcount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_refcount")]
		public static global::System.IntPtr cuda_GpuMat_refcount(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_refcount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_datastart, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_datastart")]
		public static global::System.IntPtr cuda_GpuMat_datastart(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_datastart(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_dataend, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_dataend")]
		public static global::System.IntPtr cuda_GpuMat_dataend(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_dataend(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_upload, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_upload")]
		public static void cuda_GpuMat_upload(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_upload(
								obj, 
								mat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_download, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_download")]
		public static void cuda_GpuMat_download(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_download(
								obj, 
								mat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_row, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_row")]
		public static global::System.IntPtr cuda_GpuMat_row(
					global::System.IntPtr obj, 
					int y)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_row(
								obj, 
								y
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_col, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_col")]
		public static global::System.IntPtr cuda_GpuMat_col(
					global::System.IntPtr obj, 
					int x)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_col(
								obj, 
								x
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_rowRange, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_rowRange")]
		public static global::System.IntPtr cuda_GpuMat_rowRange(
					global::System.IntPtr obj, 
					int startrow, 
					int endrow)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_rowRange(
								obj, 
								startrow, 
								endrow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_colRange, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_colRange")]
		public static global::System.IntPtr cuda_GpuMat_colRange(
					global::System.IntPtr obj, 
					int startcol, 
					int endcol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_colRange(
								obj, 
								startcol, 
								endcol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_clone, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_clone")]
		public static global::System.IntPtr cuda_GpuMat_clone(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_clone(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_copyTo1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_copyTo1")]
		public static void cuda_GpuMat_copyTo1(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_copyTo1(
								obj, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_copyTo2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_copyTo2")]
		public static void cuda_GpuMat_copyTo2(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_copyTo2(
								obj, 
								m, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_convertTo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_convertTo")]
		public static void cuda_GpuMat_convertTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_convertTo(
								obj, 
								m, 
								rtype, 
								alpha, 
								beta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_assignTo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_assignTo")]
		public static void cuda_GpuMat_assignTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_assignTo(
								obj, 
								m, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_setTo, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_setTo")]
		public static global::System.IntPtr cuda_GpuMat_setTo(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_setTo(
								obj, 
								s, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_reshape, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_reshape")]
		public static global::System.IntPtr cuda_GpuMat_reshape(
					global::System.IntPtr obj, 
					int cn, 
					int rows)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_reshape(
								obj, 
								cn, 
								rows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_create1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_create1")]
		public static void cuda_GpuMat_create1(
					global::System.IntPtr obj, 
					int rows, 
					int cols, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_create1(
								obj, 
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_create2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_create2")]
		public static void cuda_GpuMat_create2(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_create2(
								obj, 
								size, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_release, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_release")]
		public static void cuda_GpuMat_release(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_release(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_swap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_swap")]
		public static void cuda_GpuMat_swap(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_swap(
								obj, 
								mat
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_GpuMat_locateROI, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_locateROI")]
		public static void cuda_GpuMat_locateROI(
					global::System.IntPtr obj, 
					out global::OpenCvSharp.Size__OpenCvSharp wholeSize, 
					out global::OpenCvSharp.Point__OpenCvSharp ofs)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe_wholeSize;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_ofs;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_locateROI(
								obj, 
								&(unsafe_wholeSize), 
								&(unsafe_ofs)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ofs = unsafe_ofs;
			wholeSize = unsafe_wholeSize;
			// Return
		}

		// Signature, cuda_GpuMat_adjustROI, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_adjustROI")]
		public static global::System.IntPtr cuda_GpuMat_adjustROI(
					global::System.IntPtr obj, 
					int dtop, 
					int dbottom, 
					int dleft, 
					int drightt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_adjustROI(
								obj, 
								dtop, 
								dbottom, 
								dleft, 
								drightt
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_isContinuous, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_isContinuous")]
		public static int cuda_GpuMat_isContinuous(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_isContinuous(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_elemSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_elemSize")]
		public static ulong cuda_GpuMat_elemSize(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_elemSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_elemSize1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_elemSize1")]
		public static ulong cuda_GpuMat_elemSize1(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_elemSize1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_type")]
		public static int cuda_GpuMat_type(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_type(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_depth, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_depth")]
		public static int cuda_GpuMat_depth(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_depth(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_channels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_channels")]
		public static int cuda_GpuMat_channels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_channels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_step1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_step1")]
		public static ulong cuda_GpuMat_step1(global::System.IntPtr obj)
		{
			// Setup
			ulong unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_step1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_size, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_size")]
		public static global::OpenCvSharp.Size__OpenCvSharp cuda_GpuMat_size(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_size(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_empty")]
		public static int cuda_GpuMat_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_GpuMat_ptr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_GpuMat_ptr")]
		public static byte* cuda_GpuMat_ptr(
					global::System.IntPtr obj, 
					int y)
		{
			// Setup
			byte* unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = (byte*)global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_GpuMat_ptr(
								obj, 
								y
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return (byte*)unsafe___value;
		}

		// Signature, cuda_createContinuous1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_createContinuous1")]
		public static void cuda_createContinuous1(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr gm)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_createContinuous1(
								rows, 
								cols, 
								type, 
								gm
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, cuda_createContinuous2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_createContinuous2")]
		public static global::System.IntPtr cuda_createContinuous2(
					int rows, 
					int cols, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_createContinuous2(
								rows, 
								cols, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, cuda_ensureSizeIsEnough, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "cuda_ensureSizeIsEnough")]
		public static void cuda_ensureSizeIsEnough(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr m)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.cuda_ensureSizeIsEnough(
								rows, 
								cols, 
								type, 
								m
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_createEigenFaceRecognizer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_createEigenFaceRecognizer")]
		public static global::System.IntPtr face_createEigenFaceRecognizer(
					int numComponents, 
					double threshold)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_createEigenFaceRecognizer(
								numComponents, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_createFisherFaceRecognizer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_createFisherFaceRecognizer")]
		public static global::System.IntPtr face_createFisherFaceRecognizer(
					int numComponents, 
					double threshold)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_createFisherFaceRecognizer(
								numComponents, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_createLBPHFaceRecognizer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_createLBPHFaceRecognizer")]
		public static global::System.IntPtr face_createLBPHFaceRecognizer(
					int radius, 
					int neighbors, 
					int gridX, 
					int gridY, 
					double threshold)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_createLBPHFaceRecognizer(
								radius, 
								neighbors, 
								gridX, 
								gridY, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_BasicFaceRecognizer_getNumComponents, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getNumComponents")]
		public static int face_BasicFaceRecognizer_getNumComponents(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getNumComponents(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_BasicFaceRecognizer_setNumComponents, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_setNumComponents")]
		public static void face_BasicFaceRecognizer_setNumComponents(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_setNumComponents(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getThreshold")]
		public static double face_BasicFaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_BasicFaceRecognizer_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_setThreshold")]
		public static void face_BasicFaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getProjections, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getProjections")]
		public static void face_BasicFaceRecognizer_getProjections(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getProjections(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getLabels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getLabels")]
		public static void face_BasicFaceRecognizer_getLabels(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getLabels(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getEigenValues, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getEigenValues")]
		public static void face_BasicFaceRecognizer_getEigenValues(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getEigenValues(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getEigenVectors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getEigenVectors")]
		public static void face_BasicFaceRecognizer_getEigenVectors(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getEigenVectors(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_BasicFaceRecognizer_getMean, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_BasicFaceRecognizer_getMean")]
		public static void face_BasicFaceRecognizer_getMean(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_BasicFaceRecognizer_getMean(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_Ptr_BasicFaceRecognizer_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_BasicFaceRecognizer_get")]
		public static global::System.IntPtr face_Ptr_BasicFaceRecognizer_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_BasicFaceRecognizer_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_Ptr_BasicFaceRecognizer_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_BasicFaceRecognizer_delete")]
		public static void face_Ptr_BasicFaceRecognizer_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_BasicFaceRecognizer_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_FaceRecognizer_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_delete")]
		public static void face_FaceRecognizer_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_FaceRecognizer_train, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_train")]
		public static void face_FaceRecognizer_train(
					global::System.IntPtr obj, 
					global::System.IntPtr[] src, 
					int srcLength, 
					int[] labels, 
					int labelsLength)
		{
			// Setup
			global::System.IntPtr* unsafe_src;
			int* unsafe_labels;
			// Marshalling
			fixed (global::System.IntPtr* pinned_src = global::McgInterop.McgCoreHelpers.GetArrayForCompat(src))
			{
				unsafe_src = (global::System.IntPtr*)pinned_src;
				fixed (int* pinned_labels = global::McgInterop.McgCoreHelpers.GetArrayForCompat(labels))
				{
					unsafe_labels = (int*)pinned_labels;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_train(
										obj, 
										unsafe_src, 
										srcLength, 
										unsafe_labels, 
										labelsLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, face_FaceRecognizer_update, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_update")]
		public static void face_FaceRecognizer_update(
					global::System.IntPtr obj, 
					global::System.IntPtr[] src, 
					int srcLength, 
					int[] labels, 
					int labelsLength)
		{
			// Setup
			global::System.IntPtr* unsafe_src;
			int* unsafe_labels;
			// Marshalling
			fixed (global::System.IntPtr* pinned_src = global::McgInterop.McgCoreHelpers.GetArrayForCompat(src))
			{
				unsafe_src = (global::System.IntPtr*)pinned_src;
				fixed (int* pinned_labels = global::McgInterop.McgCoreHelpers.GetArrayForCompat(labels))
				{
					unsafe_labels = (int*)pinned_labels;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_update(
										obj, 
										unsafe_src, 
										srcLength, 
										unsafe_labels, 
										labelsLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, face_FaceRecognizer_predict1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_predict1")]
		public static int face_FaceRecognizer_predict1(
					global::System.IntPtr obj, 
					global::System.IntPtr src)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_predict1(
								obj, 
								src
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_FaceRecognizer_predict2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_predict2")]
		public static void face_FaceRecognizer_predict2(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					out int label, 
					out double confidence)
		{
			// Setup
			int unsafe_label;
			double unsafe_confidence;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_predict2(
								obj, 
								src, 
								&(unsafe_label), 
								&(unsafe_confidence)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			confidence = unsafe_confidence;
			label = unsafe_label;
			// Return
		}

		// Signature, face_FaceRecognizer_save1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_save1")]
		public static void face_FaceRecognizer_save1(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_save1(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, face_FaceRecognizer_load1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_load1")]
		public static void face_FaceRecognizer_load1(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_load1(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, face_FaceRecognizer_save2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_save2")]
		public static void face_FaceRecognizer_save2(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_save2(
								obj, 
								fs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_FaceRecognizer_load2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_load2")]
		public static void face_FaceRecognizer_load2(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_load2(
								obj, 
								fs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_FaceRecognizer_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_info")]
		public static global::System.IntPtr face_FaceRecognizer_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_FaceRecognizer_setLabelInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_setLabelInfo")]
		public static void face_FaceRecognizer_setLabelInfo(
					global::System.IntPtr obj, 
					int label, 
					string strInfo)
		{
			// Setup
			byte* unsafe_strInfo = default(byte*);
			try
			{
				// Marshalling
				unsafe_strInfo = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(strInfo, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_setLabelInfo(
									obj, 
									label, 
									unsafe_strInfo
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_strInfo);
			}
		}

		// Signature, face_FaceRecognizer_getLabelInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_getLabelInfo")]
		public static void face_FaceRecognizer_getLabelInfo(
					global::System.IntPtr obj, 
					int label, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_getLabelInfo(
								obj, 
								label, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_FaceRecognizer_getLabelsByString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_getLabelsByString")]
		public static void face_FaceRecognizer_getLabelsByString(
					global::System.IntPtr obj, 
					string str, 
					global::System.IntPtr dst)
		{
			// Setup
			byte* unsafe_str = default(byte*);
			try
			{
				// Marshalling
				unsafe_str = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(str, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_getLabelsByString(
									obj, 
									unsafe_str, 
									dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_str);
			}
		}

		// Signature, face_FaceRecognizer_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_getThreshold")]
		public static double face_FaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_FaceRecognizer_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_FaceRecognizer_setThreshold")]
		public static void face_FaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_FaceRecognizer_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_Ptr_FaceRecognizer_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_FaceRecognizer_get")]
		public static global::System.IntPtr face_Ptr_FaceRecognizer_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_FaceRecognizer_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_Ptr_FaceRecognizer_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_FaceRecognizer_delete")]
		public static void face_Ptr_FaceRecognizer_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_FaceRecognizer_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getGridX, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getGridX")]
		public static int face_LBPHFaceRecognizer_getGridX(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getGridX(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_LBPHFaceRecognizer_setGridX, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_setGridX")]
		public static void face_LBPHFaceRecognizer_setGridX(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_setGridX(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getGridY, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getGridY")]
		public static int face_LBPHFaceRecognizer_getGridY(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getGridY(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_LBPHFaceRecognizer_setGridY, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_setGridY")]
		public static void face_LBPHFaceRecognizer_setGridY(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_setGridY(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getRadius, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getRadius")]
		public static int face_LBPHFaceRecognizer_getRadius(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getRadius(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_LBPHFaceRecognizer_setRadius, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_setRadius")]
		public static void face_LBPHFaceRecognizer_setRadius(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_setRadius(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getNeighbors, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getNeighbors")]
		public static int face_LBPHFaceRecognizer_getNeighbors(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getNeighbors(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_LBPHFaceRecognizer_setNeighbors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_setNeighbors")]
		public static void face_LBPHFaceRecognizer_setNeighbors(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_setNeighbors(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getThreshold")]
		public static double face_LBPHFaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_LBPHFaceRecognizer_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_setThreshold")]
		public static void face_LBPHFaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getHistograms, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getHistograms")]
		public static void face_LBPHFaceRecognizer_getHistograms(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getHistograms(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_LBPHFaceRecognizer_getLabels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_LBPHFaceRecognizer_getLabels")]
		public static void face_LBPHFaceRecognizer_getLabels(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_LBPHFaceRecognizer_getLabels(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, face_Ptr_LBPHFaceRecognizer_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_LBPHFaceRecognizer_get")]
		public static global::System.IntPtr face_Ptr_LBPHFaceRecognizer_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_LBPHFaceRecognizer_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, face_Ptr_LBPHFaceRecognizer_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "face_Ptr_LBPHFaceRecognizer_delete")]
		public static void face_Ptr_LBPHFaceRecognizer_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.face_Ptr_LBPHFaceRecognizer_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_drawKeypoints, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_drawKeypoints")]
		public static void features2d_drawKeypoints(
					global::System.IntPtr image, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] keypoints, 
					int keypointsLength, 
					global::System.IntPtr outImage, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_keypoints = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			try
			{
				// Marshalling
				if (keypoints == null)
					unsafe_keypoints = null;
				else
				{
					if (keypoints != null)
						unsafe_keypoints = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(keypoints.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (keypoints != null)
						for (uint mcgIdx = 0; (mcgIdx < keypoints.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp keypoints
							unsafe_keypoints[mcgIdx] = keypoints[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_drawKeypoints(
									image, 
									unsafe_keypoints, 
									keypointsLength, 
									outImage, 
									color, 
									flags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_keypoints);
			}
		}

		// Signature, features2d_drawMatches1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_DMatch__OpenCvSharp__OpenCvSharp__DMatch__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_drawMatches1")]
		public static void features2d_drawMatches1(
					global::System.IntPtr img1, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] keypoints1, 
					int keypoints1Length, 
					global::System.IntPtr img2, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] keypoints2, 
					int keypoints2Length, 
					global::OpenCvSharp.DMatch__OpenCvSharp[] matches1to2, 
					int matches1to2Length, 
					global::System.IntPtr outImg, 
					global::OpenCvSharp.Scalar__OpenCvSharp matchColor, 
					global::OpenCvSharp.Scalar__OpenCvSharp singlePointColor, 
					byte[] matchesMask, 
					int matchesMaskLength, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_keypoints1 = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_keypoints2 = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			global::OpenCvSharp.DMatch__OpenCvSharp* unsafe_matches1to2 = default(global::OpenCvSharp.DMatch__OpenCvSharp*);
			byte* unsafe_matchesMask;
			try
			{
				// Marshalling
				if (keypoints1 == null)
					unsafe_keypoints1 = null;
				else
				{
					if (keypoints1 != null)
						unsafe_keypoints1 = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(keypoints1.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (keypoints1 != null)
						for (uint mcgIdx = 0; (mcgIdx < keypoints1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp keypoints1
							unsafe_keypoints1[mcgIdx] = keypoints1[mcgIdx];
						}
				}
				if (keypoints2 == null)
					unsafe_keypoints2 = null;
				else
				{
					if (keypoints2 != null)
						unsafe_keypoints2 = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(keypoints2.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (keypoints2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < keypoints2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp keypoints2
							unsafe_keypoints2[mcgIdx_2] = keypoints2[mcgIdx_2];
						}
				}
				if (matches1to2 == null)
					unsafe_matches1to2 = null;
				else
				{
					if (matches1to2 != null)
						unsafe_matches1to2 = (global::OpenCvSharp.DMatch__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(matches1to2.Length * sizeof(global::OpenCvSharp.DMatch__OpenCvSharp))));
					if (matches1to2 != null)
						for (uint mcgIdx_4 = 0; (mcgIdx_4 < matches1to2.Length); mcgIdx_4++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_DMatch__OpenCvSharp__OpenCvSharp__DMatch__OpenCvSharp matches1to2
							unsafe_matches1to2[mcgIdx_4] = matches1to2[mcgIdx_4];
						}
				}
				fixed (byte* pinned_matchesMask = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matchesMask))
				{
					unsafe_matchesMask = (byte*)pinned_matchesMask;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_drawMatches1(
										img1, 
										unsafe_keypoints1, 
										keypoints1Length, 
										img2, 
										unsafe_keypoints2, 
										keypoints2Length, 
										unsafe_matches1to2, 
										matches1to2Length, 
										outImg, 
										matchColor, 
										singlePointColor, 
										unsafe_matchesMask, 
										matchesMaskLength, 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_keypoints1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_keypoints2);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_matches1to2);
			}
		}

		// Signature, features2d_drawMatches2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_drawMatches2")]
		public static void features2d_drawMatches2(
					global::System.IntPtr img1, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] keypoints1, 
					int keypoints1Length, 
					global::System.IntPtr img2, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp[] keypoints2, 
					int keypoints2Length, 
					global::System.IntPtr[] matches1to2, 
					int matches1to2Size1, 
					int[] matches1to2Size2, 
					global::System.IntPtr outImg, 
					global::OpenCvSharp.Scalar__OpenCvSharp matchColor, 
					global::OpenCvSharp.Scalar__OpenCvSharp singlePointColor, 
					global::System.IntPtr[] matchesMask, 
					int matchesMaskSize1, 
					int[] matchesMaskSize2, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_keypoints1 = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			global::OpenCvSharp.KeyPoint__OpenCvSharp* unsafe_keypoints2 = default(global::OpenCvSharp.KeyPoint__OpenCvSharp*);
			global::System.IntPtr* unsafe_matches1to2;
			int* unsafe_matches1to2Size2;
			global::System.IntPtr* unsafe_matchesMask;
			int* unsafe_matchesMaskSize2;
			try
			{
				// Marshalling
				if (keypoints1 == null)
					unsafe_keypoints1 = null;
				else
				{
					if (keypoints1 != null)
						unsafe_keypoints1 = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(keypoints1.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (keypoints1 != null)
						for (uint mcgIdx = 0; (mcgIdx < keypoints1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp keypoints1
							unsafe_keypoints1[mcgIdx] = keypoints1[mcgIdx];
						}
				}
				if (keypoints2 == null)
					unsafe_keypoints2 = null;
				else
				{
					if (keypoints2 != null)
						unsafe_keypoints2 = (global::OpenCvSharp.KeyPoint__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(keypoints2.Length * sizeof(global::OpenCvSharp.KeyPoint__OpenCvSharp))));
					if (keypoints2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < keypoints2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_KeyPoint__OpenCvSharp__OpenCvSharp__KeyPoint__OpenCvSharp keypoints2
							unsafe_keypoints2[mcgIdx_2] = keypoints2[mcgIdx_2];
						}
				}
				fixed (global::System.IntPtr* pinned_matches1to2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matches1to2))
				{
					unsafe_matches1to2 = (global::System.IntPtr*)pinned_matches1to2;
					fixed (int* pinned_matches1to2Size2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matches1to2Size2))
					{
						unsafe_matches1to2Size2 = (int*)pinned_matches1to2Size2;
						fixed (global::System.IntPtr* pinned_matchesMask = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matchesMask))
						{
							unsafe_matchesMask = (global::System.IntPtr*)pinned_matchesMask;
							fixed (int* pinned_matchesMaskSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matchesMaskSize2))
							{
								unsafe_matchesMaskSize2 = (int*)pinned_matchesMaskSize2;
								// Call to native method
								global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_drawMatches2(
													img1, 
													unsafe_keypoints1, 
													keypoints1Length, 
													img2, 
													unsafe_keypoints2, 
													keypoints2Length, 
													unsafe_matches1to2, 
													matches1to2Size1, 
													unsafe_matches1to2Size2, 
													outImg, 
													matchColor, 
													singlePointColor, 
													unsafe_matchesMask, 
													matchesMaskSize1, 
													unsafe_matchesMaskSize2, 
													flags
												);
								global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
							}
						}
					}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_keypoints1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_keypoints2);
			}
		}

		// Signature, features2d_evaluateFeatureDetector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_evaluateFeatureDetector")]
		public static void features2d_evaluateFeatureDetector(
					global::System.IntPtr img1, 
					global::System.IntPtr img2, 
					global::System.IntPtr H1to2, 
					global::System.IntPtr keypoints1, 
					global::System.IntPtr keypoints2, 
					out float repeatability, 
					out int correspCount)
		{
			// Setup
			float unsafe_repeatability;
			int unsafe_correspCount;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_evaluateFeatureDetector(
								img1, 
								img2, 
								H1to2, 
								keypoints1, 
								keypoints2, 
								&(unsafe_repeatability), 
								&(unsafe_correspCount)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			correspCount = unsafe_correspCount;
			repeatability = unsafe_repeatability;
			// Return
		}

		// Signature, features2d_computeRecallPrecisionCurve, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_computeRecallPrecisionCurve")]
		public static void features2d_computeRecallPrecisionCurve(
					global::System.IntPtr[] matches1to2, 
					int matches1to2Size1, 
					int[] matches1to2Size2, 
					global::System.IntPtr[] correctMatches1to2Mask, 
					int correctMatches1to2MaskSize1, 
					int[] correctMatches1to2MaskSize2, 
					global::System.IntPtr recallPrecisionCurve)
		{
			// Setup
			global::System.IntPtr* unsafe_matches1to2;
			int* unsafe_matches1to2Size2;
			global::System.IntPtr* unsafe_correctMatches1to2Mask;
			int* unsafe_correctMatches1to2MaskSize2;
			// Marshalling
			fixed (global::System.IntPtr* pinned_matches1to2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matches1to2))
			{
				unsafe_matches1to2 = (global::System.IntPtr*)pinned_matches1to2;
				fixed (int* pinned_matches1to2Size2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(matches1to2Size2))
				{
					unsafe_matches1to2Size2 = (int*)pinned_matches1to2Size2;
					fixed (global::System.IntPtr* pinned_correctMatches1to2Mask = global::McgInterop.McgCoreHelpers.GetArrayForCompat(correctMatches1to2Mask))
					{
						unsafe_correctMatches1to2Mask = (global::System.IntPtr*)pinned_correctMatches1to2Mask;
						fixed (int* pinned_correctMatches1to2MaskSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(correctMatches1to2MaskSize2))
						{
							unsafe_correctMatches1to2MaskSize2 = (int*)pinned_correctMatches1to2MaskSize2;
							// Call to native method
							global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_computeRecallPrecisionCurve(
												unsafe_matches1to2, 
												matches1to2Size1, 
												unsafe_matches1to2Size2, 
												unsafe_correctMatches1to2Mask, 
												correctMatches1to2MaskSize1, 
												unsafe_correctMatches1to2MaskSize2, 
												recallPrecisionCurve
											);
							global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						}
					}
				}
			}
			// Return
		}

		// Signature, features2d_getRecall, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_getRecall")]
		public static float features2d_getRecall(
					global::OpenCvSharp.Point2f__OpenCvSharp[] recallPrecisionCurve, 
					int recallPrecisionCurveSize, 
					float l_precision)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_recallPrecisionCurve = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			float unsafe___value;
			try
			{
				// Marshalling
				if (recallPrecisionCurve == null)
					unsafe_recallPrecisionCurve = null;
				else
				{
					if (recallPrecisionCurve != null)
						unsafe_recallPrecisionCurve = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(recallPrecisionCurve.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (recallPrecisionCurve != null)
						for (uint mcgIdx = 0; (mcgIdx < recallPrecisionCurve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp recallPrecisionCurve
							unsafe_recallPrecisionCurve[mcgIdx] = recallPrecisionCurve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_getRecall(
									unsafe_recallPrecisionCurve, 
									recallPrecisionCurveSize, 
									l_precision
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_recallPrecisionCurve);
			}
		}

		// Signature, features2d_getNearestPoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_getNearestPoint")]
		public static int features2d_getNearestPoint(
					global::OpenCvSharp.Point2f__OpenCvSharp[] recallPrecisionCurve, 
					int recallPrecisionCurveSize, 
					float l_precision)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_recallPrecisionCurve = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (recallPrecisionCurve == null)
					unsafe_recallPrecisionCurve = null;
				else
				{
					if (recallPrecisionCurve != null)
						unsafe_recallPrecisionCurve = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(recallPrecisionCurve.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (recallPrecisionCurve != null)
						for (uint mcgIdx = 0; (mcgIdx < recallPrecisionCurve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp recallPrecisionCurve
							unsafe_recallPrecisionCurve[mcgIdx] = recallPrecisionCurve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_getNearestPoint(
									unsafe_recallPrecisionCurve, 
									recallPrecisionCurveSize, 
									l_precision
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_recallPrecisionCurve);
			}
		}

		// Signature, features2d_AGAST, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AGAST")]
		public static void features2d_AGAST(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSuppression, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AGAST(
								image, 
								keypoints, 
								threshold, 
								nonmaxSuppression, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AgastFeatureDetector_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_create")]
		public static global::System.IntPtr features2d_AgastFeatureDetector_create(
					int threshold, 
					int nonmaxSuppression, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_create(
								threshold, 
								nonmaxSuppression, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_AgastFeatureDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_AgastFeatureDetector_delete")]
		public static void features2d_Ptr_AgastFeatureDetector_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_AgastFeatureDetector_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Ptr_AgastFeatureDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_AgastFeatureDetector_get")]
		public static global::System.IntPtr features2d_Ptr_AgastFeatureDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_AgastFeatureDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AgastFeatureDetector_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_setThreshold")]
		public static void features2d_AgastFeatureDetector_setThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AgastFeatureDetector_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_getThreshold")]
		public static int features2d_AgastFeatureDetector_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AgastFeatureDetector_setNonmaxSuppression, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_setNonmaxSuppression")]
		public static void features2d_AgastFeatureDetector_setNonmaxSuppression(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_setNonmaxSuppression(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AgastFeatureDetector_getNonmaxSuppression, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_getNonmaxSuppression")]
		public static int features2d_AgastFeatureDetector_getNonmaxSuppression(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_getNonmaxSuppression(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AgastFeatureDetector_setType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_setType")]
		public static void features2d_AgastFeatureDetector_setType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_setType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AgastFeatureDetector_getType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AgastFeatureDetector_getType")]
		public static int features2d_AgastFeatureDetector_getType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AgastFeatureDetector_getType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_create")]
		public static global::System.IntPtr features2d_AKAZE_create(
					int descriptor_type, 
					int descriptor_size, 
					int descriptor_channels, 
					float threshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int diffusivity)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_create(
								descriptor_type, 
								descriptor_size, 
								descriptor_channels, 
								threshold, 
								nOctaves, 
								nOctaveLayers, 
								diffusivity
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_AKAZE_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_AKAZE_delete")]
		public static void features2d_Ptr_AKAZE_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_AKAZE_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Ptr_AKAZE_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_AKAZE_get")]
		public static global::System.IntPtr features2d_Ptr_AKAZE_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_AKAZE_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setDescriptorType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setDescriptorType")]
		public static void features2d_AKAZE_setDescriptorType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setDescriptorType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getDescriptorType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getDescriptorType")]
		public static int features2d_AKAZE_getDescriptorType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getDescriptorType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setDescriptorSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setDescriptorSize")]
		public static void features2d_AKAZE_setDescriptorSize(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setDescriptorSize(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getDescriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getDescriptorSize")]
		public static int features2d_AKAZE_getDescriptorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getDescriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setDescriptorChannels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setDescriptorChannels")]
		public static void features2d_AKAZE_setDescriptorChannels(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setDescriptorChannels(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getDescriptorChannels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getDescriptorChannels")]
		public static int features2d_AKAZE_getDescriptorChannels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getDescriptorChannels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setThreshold")]
		public static void features2d_AKAZE_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getThreshold")]
		public static double features2d_AKAZE_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setNOctaves, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setNOctaves")]
		public static void features2d_AKAZE_setNOctaves(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setNOctaves(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getNOctaves, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getNOctaves")]
		public static int features2d_AKAZE_getNOctaves(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getNOctaves(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setNOctaveLayers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setNOctaveLayers")]
		public static void features2d_AKAZE_setNOctaveLayers(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setNOctaveLayers(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getNOctaveLayers, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getNOctaveLayers")]
		public static int features2d_AKAZE_getNOctaveLayers(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getNOctaveLayers(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_AKAZE_setDiffusivity, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_setDiffusivity")]
		public static void features2d_AKAZE_setDiffusivity(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_setDiffusivity(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_AKAZE_getDiffusivity, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_AKAZE_getDiffusivity")]
		public static int features2d_AKAZE_getDiffusivity(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_AKAZE_getDiffusivity(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWTrainer_add, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWTrainer_add")]
		public static void features2d_BOWTrainer_add(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWTrainer_add(
								obj, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWTrainer_getDescriptors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWTrainer_getDescriptors")]
		public static void features2d_BOWTrainer_getDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWTrainer_getDescriptors(
								obj, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWTrainer_descriptorsCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWTrainer_descriptorsCount")]
		public static int features2d_BOWTrainer_descriptorsCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWTrainer_descriptorsCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWTrainer_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWTrainer_clear")]
		public static void features2d_BOWTrainer_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWTrainer_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWKMeansTrainer_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWKMeansTrainer_new")]
		public static global::System.IntPtr features2d_BOWKMeansTrainer_new(
					int clusterCount, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp termcrit, 
					int attempts, 
					int flags)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWKMeansTrainer_new(
								clusterCount, 
								termcrit, 
								attempts, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWKMeansTrainer_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWKMeansTrainer_delete")]
		public static void features2d_BOWKMeansTrainer_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWKMeansTrainer_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWKMeansTrainer_cluster1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWKMeansTrainer_cluster1")]
		public static global::System.IntPtr features2d_BOWKMeansTrainer_cluster1(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWKMeansTrainer_cluster1(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWKMeansTrainer_cluster2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWKMeansTrainer_cluster2")]
		public static global::System.IntPtr features2d_BOWKMeansTrainer_cluster2(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWKMeansTrainer_cluster2(
								obj, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_new1_Ptr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_new1_Ptr")]
		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new1_Ptr(
					global::System.IntPtr dextractor, 
					global::System.IntPtr dmatcher)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_new1_Ptr(
								dextractor, 
								dmatcher
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_new2_Ptr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_new2_Ptr")]
		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new2_Ptr(global::System.IntPtr dmatcher)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_new2_Ptr(dmatcher);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_new1_RawPtr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_new1_RawPtr")]
		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new1_RawPtr(
					global::System.IntPtr dextractor, 
					global::System.IntPtr dmatcher)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_new1_RawPtr(
								dextractor, 
								dmatcher
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_new2_RawPtr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_new2_RawPtr")]
		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new2_RawPtr(global::System.IntPtr dmatcher)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_new2_RawPtr(dmatcher);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_delete")]
		public static void features2d_BOWImgDescriptorExtractor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWImgDescriptorExtractor_setVocabulary, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_setVocabulary")]
		public static void features2d_BOWImgDescriptorExtractor_setVocabulary(
					global::System.IntPtr obj, 
					global::System.IntPtr vocabulary)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_setVocabulary(
								obj, 
								vocabulary
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWImgDescriptorExtractor_getVocabulary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_getVocabulary")]
		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_getVocabulary(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_getVocabulary(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_compute11, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_compute11")]
		public static void features2d_BOWImgDescriptorExtractor_compute11(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr imgDescriptor, 
					global::System.IntPtr pointIdxsOfClusters, 
					global::System.IntPtr descriptors)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_compute11(
								obj, 
								image, 
								keypoints, 
								imgDescriptor, 
								pointIdxsOfClusters, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWImgDescriptorExtractor_compute12, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_compute12")]
		public static void features2d_BOWImgDescriptorExtractor_compute12(
					global::System.IntPtr obj, 
					global::System.IntPtr keypointDescriptors, 
					global::System.IntPtr imgDescriptor, 
					global::System.IntPtr pointIdxsOfClusters)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_compute12(
								obj, 
								keypointDescriptors, 
								imgDescriptor, 
								pointIdxsOfClusters
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWImgDescriptorExtractor_compute2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_compute2")]
		public static void features2d_BOWImgDescriptorExtractor_compute2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr imgDescriptor)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_compute2(
								obj, 
								image, 
								keypoints, 
								imgDescriptor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BOWImgDescriptorExtractor_descriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_descriptorSize")]
		public static int features2d_BOWImgDescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_descriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BOWImgDescriptorExtractor_descriptorType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BOWImgDescriptorExtractor_descriptorType")]
		public static int features2d_BOWImgDescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BOWImgDescriptorExtractor_descriptorType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BRISK_create1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BRISK_create1")]
		public static global::System.IntPtr features2d_BRISK_create1(
					int thresh, 
					int octaves, 
					float patternScale)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BRISK_create1(
								thresh, 
								octaves, 
								patternScale
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BRISK_create2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BRISK_create2")]
		public static global::System.IntPtr features2d_BRISK_create2(
					float[] radiusList, 
					int radiusListLength, 
					int[] numberList, 
					int numberListLength, 
					float dMax, 
					float dMin, 
					int[] indexChange, 
					int indexChangeLength)
		{
			// Setup
			float* unsafe_radiusList;
			int* unsafe_numberList;
			int* unsafe_indexChange;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (float* pinned_radiusList = global::McgInterop.McgCoreHelpers.GetArrayForCompat(radiusList))
			{
				unsafe_radiusList = (float*)pinned_radiusList;
				fixed (int* pinned_numberList = global::McgInterop.McgCoreHelpers.GetArrayForCompat(numberList))
				{
					unsafe_numberList = (int*)pinned_numberList;
					fixed (int* pinned_indexChange = global::McgInterop.McgCoreHelpers.GetArrayForCompat(indexChange))
					{
						unsafe_indexChange = (int*)pinned_indexChange;
						// Call to native method
						unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BRISK_create2(
											unsafe_radiusList, 
											radiusListLength, 
											unsafe_numberList, 
											numberListLength, 
											dMax, 
											dMin, 
											unsafe_indexChange, 
											indexChangeLength
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_BRISK_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_BRISK_delete")]
		public static void features2d_Ptr_BRISK_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_BRISK_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Ptr_BRISK_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_BRISK_get")]
		public static global::System.IntPtr features2d_Ptr_BRISK_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_BRISK_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BRISK_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BRISK_info")]
		public static global::System.IntPtr features2d_BRISK_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BRISK_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_delete")]
		public static void features2d_DescriptorExtractor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorExtractor_compute1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_compute1")]
		public static void features2d_DescriptorExtractor_compute1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoint, 
					global::System.IntPtr descriptors)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_compute1(
								obj, 
								image, 
								keypoint, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorExtractor_compute2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_compute2")]
		public static void features2d_DescriptorExtractor_compute2(
					global::System.IntPtr obj, 
					global::System.IntPtr[] images, 
					int imagesSize, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr[] descriptors, 
					int descriptorsSize)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			global::System.IntPtr* unsafe_descriptors;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (global::System.IntPtr* pinned_descriptors = global::McgInterop.McgCoreHelpers.GetArrayForCompat(descriptors))
				{
					unsafe_descriptors = (global::System.IntPtr*)pinned_descriptors;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_compute2(
										obj, 
										unsafe_images, 
										imagesSize, 
										keypoints, 
										unsafe_descriptors, 
										descriptorsSize
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, features2d_DescriptorExtractor_descriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_descriptorSize")]
		public static int features2d_DescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_descriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorExtractor_descriptorType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_descriptorType")]
		public static int features2d_DescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_descriptorType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorExtractor_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_empty")]
		public static int features2d_DescriptorExtractor_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorExtractor_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_info")]
		public static global::System.IntPtr features2d_DescriptorExtractor_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorExtractor_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorExtractor_create")]
		public static global::System.IntPtr features2d_DescriptorExtractor_create(string descriptorExtractorType)
		{
			// Setup
			byte* unsafe_descriptorExtractorType = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_descriptorExtractorType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(descriptorExtractorType, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorExtractor_create(unsafe_descriptorExtractorType);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_descriptorExtractorType);
			}
		}

		// Signature, features2d_Ptr_DescriptorExtractor_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_DescriptorExtractor_get")]
		public static global::System.IntPtr features2d_Ptr_DescriptorExtractor_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_DescriptorExtractor_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_DescriptorExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_DescriptorExtractor_delete")]
		public static void features2d_Ptr_DescriptorExtractor_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_DescriptorExtractor_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_add, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_add")]
		public static void features2d_DescriptorMatcher_add(
					global::System.IntPtr obj, 
					global::System.IntPtr[] descriptors, 
					int descriptorLength)
		{
			// Setup
			global::System.IntPtr* unsafe_descriptors;
			// Marshalling
			fixed (global::System.IntPtr* pinned_descriptors = global::McgInterop.McgCoreHelpers.GetArrayForCompat(descriptors))
			{
				unsafe_descriptors = (global::System.IntPtr*)pinned_descriptors;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_add(
									obj, 
									unsafe_descriptors, 
									descriptorLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, features2d_DescriptorMatcher_getTrainDescriptors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_getTrainDescriptors")]
		public static void features2d_DescriptorMatcher_getTrainDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_getTrainDescriptors(
								obj, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_clear")]
		public static void features2d_DescriptorMatcher_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_empty")]
		public static int features2d_DescriptorMatcher_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorMatcher_isMaskSupported, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_isMaskSupported")]
		public static int features2d_DescriptorMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_isMaskSupported(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_DescriptorMatcher_train, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_train")]
		public static void features2d_DescriptorMatcher_train(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_train(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_match1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_match1")]
		public static void features2d_DescriptorMatcher_match1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_match1(
								obj, 
								queryDescriptors, 
								trainDescriptors, 
								matches, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_knnMatch1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_knnMatch1")]
		public static void features2d_DescriptorMatcher_knnMatch1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					int k, 
					global::System.IntPtr mask, 
					int compactResult)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_knnMatch1(
								obj, 
								queryDescriptors, 
								trainDescriptors, 
								matches, 
								k, 
								mask, 
								compactResult
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_radiusMatch1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_radiusMatch1")]
		public static void features2d_DescriptorMatcher_radiusMatch1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					float maxDistance, 
					global::System.IntPtr mask, 
					int compactResult)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_radiusMatch1(
								obj, 
								queryDescriptors, 
								trainDescriptors, 
								matches, 
								maxDistance, 
								mask, 
								compactResult
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_DescriptorMatcher_match2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_match2")]
		public static void features2d_DescriptorMatcher_match2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					global::System.IntPtr[] masks, 
					int masksSize)
		{
			// Setup
			global::System.IntPtr* unsafe_masks;
			// Marshalling
			fixed (global::System.IntPtr* pinned_masks = global::McgInterop.McgCoreHelpers.GetArrayForCompat(masks))
			{
				unsafe_masks = (global::System.IntPtr*)pinned_masks;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_match2(
									obj, 
									queryDescriptors, 
									matches, 
									unsafe_masks, 
									masksSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, features2d_DescriptorMatcher_knnMatch2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_knnMatch2")]
		public static void features2d_DescriptorMatcher_knnMatch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					int k, 
					global::System.IntPtr[] masks, 
					int masksSize, 
					int compactResult)
		{
			// Setup
			global::System.IntPtr* unsafe_masks;
			// Marshalling
			fixed (global::System.IntPtr* pinned_masks = global::McgInterop.McgCoreHelpers.GetArrayForCompat(masks))
			{
				unsafe_masks = (global::System.IntPtr*)pinned_masks;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_knnMatch2(
									obj, 
									queryDescriptors, 
									matches, 
									k, 
									unsafe_masks, 
									masksSize, 
									compactResult
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, features2d_DescriptorMatcher_radiusMatch2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_radiusMatch2")]
		public static void features2d_DescriptorMatcher_radiusMatch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					float maxDistance, 
					global::System.IntPtr[] masks, 
					int masksSize, 
					int compactResult)
		{
			// Setup
			global::System.IntPtr* unsafe_masks;
			// Marshalling
			fixed (global::System.IntPtr* pinned_masks = global::McgInterop.McgCoreHelpers.GetArrayForCompat(masks))
			{
				unsafe_masks = (global::System.IntPtr*)pinned_masks;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_radiusMatch2(
									obj, 
									queryDescriptors, 
									matches, 
									maxDistance, 
									unsafe_masks, 
									masksSize, 
									compactResult
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, features2d_DescriptorMatcher_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_create")]
		public static global::System.IntPtr features2d_DescriptorMatcher_create(string descriptorMatcherType)
		{
			// Setup
			byte* unsafe_descriptorMatcherType = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_descriptorMatcherType = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(descriptorMatcherType, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_create(unsafe_descriptorMatcherType);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_descriptorMatcherType);
			}
		}

		// Signature, features2d_DescriptorMatcher_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_DescriptorMatcher_info")]
		public static global::System.IntPtr features2d_DescriptorMatcher_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_DescriptorMatcher_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_DescriptorMatcher_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_DescriptorMatcher_get")]
		public static global::System.IntPtr features2d_Ptr_DescriptorMatcher_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_DescriptorMatcher_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_DescriptorMatcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_DescriptorMatcher_delete")]
		public static void features2d_Ptr_DescriptorMatcher_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_DescriptorMatcher_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BFMatcher_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BFMatcher_new")]
		public static global::System.IntPtr features2d_BFMatcher_new(
					int normType, 
					int crossCheck)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BFMatcher_new(
								normType, 
								crossCheck
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BFMatcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BFMatcher_delete")]
		public static void features2d_BFMatcher_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BFMatcher_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_BFMatcher_isMaskSupported, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BFMatcher_isMaskSupported")]
		public static int features2d_BFMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BFMatcher_isMaskSupported(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_BFMatcher_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_BFMatcher_info")]
		public static global::System.IntPtr features2d_BFMatcher_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_BFMatcher_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_BFMatcher_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_BFMatcher_get")]
		public static global::System.IntPtr features2d_Ptr_BFMatcher_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_BFMatcher_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_BFMatcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_BFMatcher_delete")]
		public static void features2d_Ptr_BFMatcher_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_BFMatcher_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FlannBasedMatcher_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_new")]
		public static global::System.IntPtr features2d_FlannBasedMatcher_new(
					global::System.IntPtr indexParams, 
					global::System.IntPtr searchParams)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_new(
								indexParams, 
								searchParams
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_FlannBasedMatcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_delete")]
		public static void features2d_FlannBasedMatcher_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FlannBasedMatcher_add, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_add")]
		public static void features2d_FlannBasedMatcher_add(
					global::System.IntPtr obj, 
					global::System.IntPtr[] descriptors, 
					int descriptorsSize)
		{
			// Setup
			global::System.IntPtr* unsafe_descriptors;
			// Marshalling
			fixed (global::System.IntPtr* pinned_descriptors = global::McgInterop.McgCoreHelpers.GetArrayForCompat(descriptors))
			{
				unsafe_descriptors = (global::System.IntPtr*)pinned_descriptors;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_add(
									obj, 
									unsafe_descriptors, 
									descriptorsSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, features2d_FlannBasedMatcher_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_clear")]
		public static void features2d_FlannBasedMatcher_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FlannBasedMatcher_train, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_train")]
		public static void features2d_FlannBasedMatcher_train(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_train(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FlannBasedMatcher_isMaskSupported, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_isMaskSupported")]
		public static int features2d_FlannBasedMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_isMaskSupported(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_FlannBasedMatcher_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FlannBasedMatcher_info")]
		public static global::System.IntPtr features2d_FlannBasedMatcher_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FlannBasedMatcher_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_FlannBasedMatcher_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_FlannBasedMatcher_get")]
		public static global::System.IntPtr features2d_Ptr_FlannBasedMatcher_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_FlannBasedMatcher_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_FlannBasedMatcher_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_FlannBasedMatcher_delete")]
		public static void features2d_Ptr_FlannBasedMatcher_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_FlannBasedMatcher_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FAST1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FAST1")]
		public static void features2d_FAST1(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSupression)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FAST1(
								image, 
								keypoints, 
								threshold, 
								nonmaxSupression
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FAST2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FAST2")]
		public static void features2d_FAST2(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSupression, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FAST2(
								image, 
								keypoints, 
								threshold, 
								nonmaxSupression, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FastFeatureDetector_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_create")]
		public static global::System.IntPtr features2d_FastFeatureDetector_create(
					int threshold, 
					int nonmaxSuppression)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_create(
								threshold, 
								nonmaxSuppression
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_FastFeatureDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_FastFeatureDetector_delete")]
		public static void features2d_Ptr_FastFeatureDetector_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_FastFeatureDetector_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FastFeatureDetector_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_info")]
		public static global::System.IntPtr features2d_FastFeatureDetector_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_FastFeatureDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_FastFeatureDetector_get")]
		public static global::System.IntPtr features2d_Ptr_FastFeatureDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_FastFeatureDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_FastFeatureDetector_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_setThreshold")]
		public static void features2d_FastFeatureDetector_setThreshold(
					global::System.IntPtr obj, 
					int threshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_setThreshold(
								obj, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FastFeatureDetector_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_getThreshold")]
		public static int features2d_FastFeatureDetector_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_FastFeatureDetector_setNonmaxSuppression, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_setNonmaxSuppression")]
		public static void features2d_FastFeatureDetector_setNonmaxSuppression(
					global::System.IntPtr obj, 
					int f)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_setNonmaxSuppression(
								obj, 
								f
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FastFeatureDetector_getNonmaxSuppression, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_getNonmaxSuppression")]
		public static int features2d_FastFeatureDetector_getNonmaxSuppression(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_getNonmaxSuppression(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_FastFeatureDetector_setType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_setType")]
		public static void features2d_FastFeatureDetector_setType(
					global::System.IntPtr obj, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_setType(
								obj, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_FastFeatureDetector_getType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_FastFeatureDetector_getType")]
		public static int features2d_FastFeatureDetector_getType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_FastFeatureDetector_getType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_Feature2D_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_Feature2D_get")]
		public static global::System.IntPtr features2d_Ptr_Feature2D_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_Feature2D_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_Feature2D_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_Feature2D_delete")]
		public static void features2d_Ptr_Feature2D_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_Feature2D_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Feature2D_detect_Mat1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_detect_Mat1")]
		public static void features2d_Feature2D_detect_Mat1(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_detect_Mat1(
								detector, 
								image, 
								keypoints, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Feature2D_detect_Mat2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_detect_Mat2")]
		public static void features2d_Feature2D_detect_Mat2(
					global::System.IntPtr detector, 
					global::System.IntPtr[] images, 
					int imageLength, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr[] mask)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			global::System.IntPtr* unsafe_mask;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (global::System.IntPtr* pinned_mask = global::McgInterop.McgCoreHelpers.GetArrayForCompat(mask))
				{
					unsafe_mask = (global::System.IntPtr*)pinned_mask;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_detect_Mat2(
										detector, 
										unsafe_images, 
										imageLength, 
										keypoints, 
										unsafe_mask
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, features2d_Feature2D_detect_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_detect_InputArray")]
		public static void features2d_Feature2D_detect_InputArray(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_detect_InputArray(
								detector, 
								image, 
								keypoints, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Feature2D_compute1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_compute1")]
		public static void features2d_Feature2D_compute1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr descriptors)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_compute1(
								obj, 
								image, 
								keypoints, 
								descriptors
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Feature2D_compute2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_compute2")]
		public static void features2d_Feature2D_compute2(
					global::System.IntPtr detector, 
					global::System.IntPtr[] images, 
					int imageLength, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr[] descriptors, 
					int descriptorsLength)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			global::System.IntPtr* unsafe_descriptors;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (global::System.IntPtr* pinned_descriptors = global::McgInterop.McgCoreHelpers.GetArrayForCompat(descriptors))
				{
					unsafe_descriptors = (global::System.IntPtr*)pinned_descriptors;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_compute2(
										detector, 
										unsafe_images, 
										imageLength, 
										keypoints, 
										unsafe_descriptors, 
										descriptorsLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, features2d_Feature2D_detectAndCompute, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_detectAndCompute")]
		public static void features2d_Feature2D_detectAndCompute(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr mask, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr descriptors, 
					int useProvidedKeypoints)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_detectAndCompute(
								detector, 
								image, 
								mask, 
								keypoints, 
								descriptors, 
								useProvidedKeypoints
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_Feature2D_descriptorSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_descriptorSize")]
		public static int features2d_Feature2D_descriptorSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_descriptorSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Feature2D_descriptorType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_descriptorType")]
		public static int features2d_Feature2D_descriptorType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_descriptorType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Feature2D_defaultNorm, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_defaultNorm")]
		public static int features2d_Feature2D_defaultNorm(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_defaultNorm(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Feature2D_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Feature2D_empty")]
		public static int features2d_Feature2D_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Feature2D_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_create")]
		public static global::System.IntPtr features2d_GFTTDetector_create(
					int maxCorners, 
					double qualityLevel, 
					double minDistance, 
					int blockSize, 
					int useHarrisDetector, 
					double k)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_create(
								maxCorners, 
								qualityLevel, 
								minDistance, 
								blockSize, 
								useHarrisDetector, 
								k
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_delete")]
		public static void features2d_GFTTDetector_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_info")]
		public static global::System.IntPtr features2d_GFTTDetector_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_GFTTDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_GFTTDetector_get")]
		public static global::System.IntPtr features2d_Ptr_GFTTDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_GFTTDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_GFTTDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_GFTTDetector_delete")]
		public static void features2d_Ptr_GFTTDetector_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_GFTTDetector_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_setMaxFeatures, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setMaxFeatures")]
		public static void features2d_GFTTDetector_setMaxFeatures(
					global::System.IntPtr obj, 
					int maxFeatures)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setMaxFeatures(
								obj, 
								maxFeatures
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getMaxFeatures, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getMaxFeatures")]
		public static int features2d_GFTTDetector_getMaxFeatures(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getMaxFeatures(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_setQualityLevel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setQualityLevel")]
		public static void features2d_GFTTDetector_setQualityLevel(
					global::System.IntPtr obj, 
					double qlevel)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setQualityLevel(
								obj, 
								qlevel
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getQualityLevel, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getQualityLevel")]
		public static double features2d_GFTTDetector_getQualityLevel(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getQualityLevel(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_setMinDistance, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setMinDistance")]
		public static void features2d_GFTTDetector_setMinDistance(
					global::System.IntPtr obj, 
					double minDistance)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setMinDistance(
								obj, 
								minDistance
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getMinDistance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getMinDistance")]
		public static double features2d_GFTTDetector_getMinDistance(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getMinDistance(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_setBlockSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setBlockSize")]
		public static void features2d_GFTTDetector_setBlockSize(
					global::System.IntPtr obj, 
					int blockSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setBlockSize(
								obj, 
								blockSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getBlockSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getBlockSize")]
		public static int features2d_GFTTDetector_getBlockSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getBlockSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_setHarrisDetector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setHarrisDetector")]
		public static void features2d_GFTTDetector_setHarrisDetector(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setHarrisDetector(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getHarrisDetector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getHarrisDetector")]
		public static int features2d_GFTTDetector_getHarrisDetector(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getHarrisDetector(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_GFTTDetector_setK, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_setK")]
		public static void features2d_GFTTDetector_setK(
					global::System.IntPtr obj, 
					double k)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_setK(
								obj, 
								k
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_GFTTDetector_getK, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_GFTTDetector_getK")]
		public static double features2d_GFTTDetector_getK(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_GFTTDetector_getK(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_create")]
		public static global::System.IntPtr features2d_KAZE_create(
					bool extended, 
					bool upright, 
					float threshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int diffusivity)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_create(
								(extended ? 1 : 0), 
								(upright ? 1 : 0), 
								threshold, 
								nOctaves, 
								nOctaveLayers, 
								diffusivity
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_KAZE_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_KAZE_delete")]
		public static void features2d_Ptr_KAZE_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_KAZE_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_info")]
		public static global::System.IntPtr features2d_KAZE_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_KAZE_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_KAZE_get")]
		public static global::System.IntPtr features2d_Ptr_KAZE_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_KAZE_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_setDiffusivity, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setDiffusivity")]
		public static void features2d_KAZE_setDiffusivity(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setDiffusivity(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getDiffusivity, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getDiffusivity")]
		public static int features2d_KAZE_getDiffusivity(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getDiffusivity(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_setExtended, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setExtended")]
		public static void features2d_KAZE_setExtended(
					global::System.IntPtr obj, 
					bool val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setExtended(
								obj, 
								(val ? 1 : 0)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getExtended, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getExtended")]
		public static bool features2d_KAZE_getExtended(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getExtended(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, features2d_KAZE_setNOctaveLayers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setNOctaveLayers")]
		public static void features2d_KAZE_setNOctaveLayers(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setNOctaveLayers(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getNOctaveLayers, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getNOctaveLayers")]
		public static int features2d_KAZE_getNOctaveLayers(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getNOctaveLayers(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_setNOctaves, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setNOctaves")]
		public static void features2d_KAZE_setNOctaves(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setNOctaves(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getNOctaves, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getNOctaves")]
		public static int features2d_KAZE_getNOctaves(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getNOctaves(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_setThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setThreshold")]
		public static void features2d_KAZE_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getThreshold")]
		public static double features2d_KAZE_getThreshold(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_KAZE_setUpright, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_setUpright")]
		public static void features2d_KAZE_setUpright(
					global::System.IntPtr obj, 
					bool val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_setUpright(
								obj, 
								(val ? 1 : 0)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KAZE_getUpright, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KAZE_getUpright")]
		public static bool features2d_KAZE_getUpright(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KAZE_getUpright(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, features2d_KeyPointsFilter_runByImageBorder, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KeyPointsFilter_runByImageBorder")]
		public static void features2d_KeyPointsFilter_runByImageBorder(
					global::System.IntPtr keypoints, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					int borderSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KeyPointsFilter_runByImageBorder(
								keypoints, 
								imageSize, 
								borderSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KeyPointsFilter_runByKeypointSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KeyPointsFilter_runByKeypointSize")]
		public static void features2d_KeyPointsFilter_runByKeypointSize(
					global::System.IntPtr keypoints, 
					float minSize, 
					float maxSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KeyPointsFilter_runByKeypointSize(
								keypoints, 
								minSize, 
								maxSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KeyPointsFilter_runByPixelsMask, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KeyPointsFilter_runByPixelsMask")]
		public static void features2d_KeyPointsFilter_runByPixelsMask(
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KeyPointsFilter_runByPixelsMask(
								keypoints, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KeyPointsFilter_removeDuplicated, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KeyPointsFilter_removeDuplicated")]
		public static void features2d_KeyPointsFilter_removeDuplicated(global::System.IntPtr keypoints)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KeyPointsFilter_removeDuplicated(keypoints);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_KeyPointsFilter_retainBest, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_KeyPointsFilter_retainBest")]
		public static void features2d_KeyPointsFilter_retainBest(
					global::System.IntPtr keypoints, 
					int npoints)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_KeyPointsFilter_retainBest(
								keypoints, 
								npoints
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_create")]
		public static global::System.IntPtr features2d_MSER_create(
					int delta, 
					int minArea, 
					int maxArea, 
					double maxVariation, 
					double minDiversity, 
					int maxEvolution, 
					double areaThreshold, 
					double minMargin, 
					int edgeBlurSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_create(
								delta, 
								minArea, 
								maxArea, 
								maxVariation, 
								minDiversity, 
								maxEvolution, 
								areaThreshold, 
								minMargin, 
								edgeBlurSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_MSER_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_MSER_delete")]
		public static void features2d_Ptr_MSER_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_MSER_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_detect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_detect")]
		public static void features2d_MSER_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					out global::System.IntPtr msers, 
					global::System.IntPtr mask)
		{
			// Setup
			global::System.IntPtr unsafe_msers;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_detect(
								obj, 
								image, 
								&(unsafe_msers), 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			msers = unsafe_msers;
			// Return
		}

		// Signature, features2d_MSER_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_info")]
		public static global::System.IntPtr features2d_MSER_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_MSER_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_MSER_get")]
		public static global::System.IntPtr features2d_Ptr_MSER_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_MSER_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_MSER_detectRegions, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_detectRegions")]
		public static void features2d_MSER_detectRegions(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr msers, 
					global::System.IntPtr bboxes)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_detectRegions(
								obj, 
								image, 
								msers, 
								bboxes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_setDelta, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_setDelta")]
		public static void features2d_MSER_setDelta(
					global::System.IntPtr obj, 
					int delta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_setDelta(
								obj, 
								delta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_getDelta, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_getDelta")]
		public static int features2d_MSER_getDelta(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_getDelta(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_MSER_setMinArea, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_setMinArea")]
		public static void features2d_MSER_setMinArea(
					global::System.IntPtr obj, 
					int minArea)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_setMinArea(
								obj, 
								minArea
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_getMinArea, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_getMinArea")]
		public static int features2d_MSER_getMinArea(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_getMinArea(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_MSER_setMaxArea, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_setMaxArea")]
		public static void features2d_MSER_setMaxArea(
					global::System.IntPtr obj, 
					int maxArea)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_setMaxArea(
								obj, 
								maxArea
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_getMaxArea, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_getMaxArea")]
		public static int features2d_MSER_getMaxArea(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_getMaxArea(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_MSER_setPass2Only, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_setPass2Only")]
		public static void features2d_MSER_setPass2Only(
					global::System.IntPtr obj, 
					int f)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_setPass2Only(
								obj, 
								f
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_MSER_getPass2Only, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_MSER_getPass2Only")]
		public static int features2d_MSER_getPass2Only(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_MSER_getPass2Only(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_create")]
		public static global::System.IntPtr features2d_ORB_create(
					int nFeatures, 
					float scaleFactor, 
					int nlevels, 
					int edgeThreshold, 
					int firstLevel, 
					int wtaK, 
					int scoreType, 
					int patchSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_create(
								nFeatures, 
								scaleFactor, 
								nlevels, 
								edgeThreshold, 
								firstLevel, 
								wtaK, 
								scoreType, 
								patchSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_ORB_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_ORB_delete")]
		public static void features2d_Ptr_ORB_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_ORB_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_info")]
		public static global::System.IntPtr features2d_ORB_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_ORB_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_ORB_get")]
		public static global::System.IntPtr features2d_Ptr_ORB_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_ORB_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setMaxFeatures, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setMaxFeatures")]
		public static void features2d_ORB_setMaxFeatures(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setMaxFeatures(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getMaxFeatures, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getMaxFeatures")]
		public static int features2d_ORB_getMaxFeatures(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getMaxFeatures(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setScaleFactor, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setScaleFactor")]
		public static void features2d_ORB_setScaleFactor(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setScaleFactor(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getScaleFactor, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getScaleFactor")]
		public static double features2d_ORB_getScaleFactor(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getScaleFactor(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setNLevels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setNLevels")]
		public static void features2d_ORB_setNLevels(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setNLevels(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getNLevels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getNLevels")]
		public static int features2d_ORB_getNLevels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getNLevels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setEdgeThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setEdgeThreshold")]
		public static void features2d_ORB_setEdgeThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setEdgeThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getEdgeThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getEdgeThreshold")]
		public static int features2d_ORB_getEdgeThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getEdgeThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setFirstLevel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setFirstLevel")]
		public static void features2d_ORB_setFirstLevel(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setFirstLevel(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getFirstLevel, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getFirstLevel")]
		public static int features2d_ORB_getFirstLevel(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getFirstLevel(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setWTA_K, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setWTA_K")]
		public static void features2d_ORB_setWTA_K(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setWTA_K(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getWTA_K, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getWTA_K")]
		public static int features2d_ORB_getWTA_K(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getWTA_K(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setScoreType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setScoreType")]
		public static void features2d_ORB_setScoreType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setScoreType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getScoreType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getScoreType")]
		public static int features2d_ORB_getScoreType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getScoreType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setPatchSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setPatchSize")]
		public static void features2d_ORB_setPatchSize(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setPatchSize(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getPatchSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getPatchSize")]
		public static int features2d_ORB_getPatchSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getPatchSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_ORB_setFastThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_setFastThreshold")]
		public static void features2d_ORB_setFastThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_setFastThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, features2d_ORB_getFastThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_ORB_getFastThreshold")]
		public static int features2d_ORB_getFastThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_ORB_getFastThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_SimpleBlobDetector_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_SimpleBlobDetector_WParams__OpenCvSharp__OpenCvSharp__SimpleBlobDetector_WParams__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_SimpleBlobDetector_create")]
		public static global::System.IntPtr features2d_SimpleBlobDetector_create(ref global::OpenCvSharp.SimpleBlobDetector_WParams__OpenCvSharp parameters)
		{
			// Setup
			global::OpenCvSharp.SimpleBlobDetector_WParams__OpenCvSharp unsafe_parameters;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_parameters = parameters;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_SimpleBlobDetector_create(&(unsafe_parameters));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			parameters = unsafe_parameters;
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_SimpleBlobDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_SimpleBlobDetector_get")]
		public static global::System.IntPtr features2d_Ptr_SimpleBlobDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_SimpleBlobDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, features2d_Ptr_SimpleBlobDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "features2d_Ptr_SimpleBlobDetector_delete")]
		public static void features2d_Ptr_SimpleBlobDetector_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.features2d_Ptr_SimpleBlobDetector_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_getGaussianKernel, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getGaussianKernel")]
		public static global::System.IntPtr imgproc_getGaussianKernel(
					int ksize, 
					double sigma, 
					int ktype)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getGaussianKernel(
								ksize, 
								sigma, 
								ktype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_getDerivKernels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getDerivKernels")]
		public static void imgproc_getDerivKernels(
					global::System.IntPtr kx, 
					global::System.IntPtr ky, 
					int dx, 
					int dy, 
					int ksize, 
					int normalize, 
					int ktype)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getDerivKernels(
								kx, 
								ky, 
								dx, 
								dy, 
								ksize, 
								normalize, 
								ktype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_getGaborKernel, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getGaborKernel")]
		public static global::System.IntPtr imgproc_getGaborKernel(
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					double sigma, 
					double theta, 
					double lambd, 
					double gamma, 
					double psi, 
					int ktype)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getGaborKernel(
								ksize, 
								sigma, 
								theta, 
								lambd, 
								gamma, 
								psi, 
								ktype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_getStructuringElement, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getStructuringElement")]
		public static global::System.IntPtr imgproc_getStructuringElement(
					int shape, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getStructuringElement(
								shape, 
								ksize, 
								anchor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_copyMakeBorder, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_copyMakeBorder")]
		public static void imgproc_copyMakeBorder(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int top, 
					int bottom, 
					int left, 
					int right, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_copyMakeBorder(
								src, 
								dst, 
								top, 
								bottom, 
								left, 
								right, 
								borderType, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_medianBlur, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_medianBlur")]
		public static void imgproc_medianBlur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ksize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_medianBlur(
								src, 
								dst, 
								ksize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GaussianBlur, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GaussianBlur")]
		public static void imgproc_GaussianBlur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					double sigmaX, 
					double sigmaY, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GaussianBlur(
								src, 
								dst, 
								ksize, 
								sigmaX, 
								sigmaY, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_bilateralFilter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_bilateralFilter")]
		public static void imgproc_bilateralFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int d, 
					double sigmaColor, 
					double sigmaSpace, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_bilateralFilter(
								src, 
								dst, 
								d, 
								sigmaColor, 
								sigmaSpace, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_boxFilter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_boxFilter")]
		public static void imgproc_boxFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int normalize, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_boxFilter(
								src, 
								dst, 
								ddepth, 
								ksize, 
								anchor, 
								normalize, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_blur, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_blur")]
		public static void imgproc_blur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_blur(
								src, 
								dst, 
								ksize, 
								anchor, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_filter2D, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_filter2D")]
		public static void imgproc_filter2D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					double delta, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_filter2D(
								src, 
								dst, 
								ddepth, 
								kernel, 
								anchor, 
								delta, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_sepFilter2D, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_sepFilter2D")]
		public static void imgproc_sepFilter2D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::System.IntPtr kernelX, 
					global::System.IntPtr kernelY, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					double delta, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_sepFilter2D(
								src, 
								dst, 
								ddepth, 
								kernelX, 
								kernelY, 
								anchor, 
								delta, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Sobel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Sobel")]
		public static void imgproc_Sobel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int dx, 
					int dy, 
					int ksize, 
					double scale, 
					double delta, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Sobel(
								src, 
								dst, 
								ddepth, 
								dx, 
								dy, 
								ksize, 
								scale, 
								delta, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Scharr, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Scharr")]
		public static void imgproc_Scharr(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int dx, 
					int dy, 
					double scale, 
					double delta, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Scharr(
								src, 
								dst, 
								ddepth, 
								dx, 
								dy, 
								scale, 
								delta, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Laplacian, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Laplacian")]
		public static void imgproc_Laplacian(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int ksize, 
					double scale, 
					double delta, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Laplacian(
								src, 
								dst, 
								ddepth, 
								ksize, 
								scale, 
								delta, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Canny, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Canny")]
		public static void imgproc_Canny(
					global::System.IntPtr src, 
					global::System.IntPtr edges, 
					double threshold1, 
					double threshold2, 
					int apertureSize, 
					int L2gradient)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Canny(
								src, 
								edges, 
								threshold1, 
								threshold2, 
								apertureSize, 
								L2gradient
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_cornerEigenValsAndVecs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_cornerEigenValsAndVecs")]
		public static void imgproc_cornerEigenValsAndVecs(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int blockSize, 
					int ksize, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_cornerEigenValsAndVecs(
								src, 
								dst, 
								blockSize, 
								ksize, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_preCornerDetect, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_preCornerDetect")]
		public static void imgproc_preCornerDetect(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ksize, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_preCornerDetect(
								src, 
								dst, 
								ksize, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_cornerSubPix, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_cornerSubPix")]
		public static void imgproc_cornerSubPix(
					global::System.IntPtr image, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					global::OpenCvSharp.Size__OpenCvSharp zeroZone, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_cornerSubPix(
								image, 
								corners, 
								winSize, 
								zeroZone, 
								criteria
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_goodFeaturesToTrack, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_goodFeaturesToTrack")]
		public static void imgproc_goodFeaturesToTrack(
					global::System.IntPtr src, 
					global::System.IntPtr corners, 
					int maxCorners, 
					double qualityLevel, 
					double minDistance, 
					global::System.IntPtr mask, 
					int blockSize, 
					int useHarrisDetector, 
					double k)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_goodFeaturesToTrack(
								src, 
								corners, 
								maxCorners, 
								qualityLevel, 
								minDistance, 
								mask, 
								blockSize, 
								useHarrisDetector, 
								k
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_HoughLines, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_HoughLines")]
		public static void imgproc_HoughLines(
					global::System.IntPtr src, 
					global::System.IntPtr lines, 
					double rho, 
					double theta, 
					int threshold, 
					double srn, 
					double stn)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_HoughLines(
								src, 
								lines, 
								rho, 
								theta, 
								threshold, 
								srn, 
								stn
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_HoughLinesP, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_HoughLinesP")]
		public static void imgproc_HoughLinesP(
					global::System.IntPtr src, 
					global::System.IntPtr lines, 
					double rho, 
					double theta, 
					int threshold, 
					double minLineLength, 
					double maxLineG)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_HoughLinesP(
								src, 
								lines, 
								rho, 
								theta, 
								threshold, 
								minLineLength, 
								maxLineG
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_HoughCircles, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_HoughCircles")]
		public static void imgproc_HoughCircles(
					global::System.IntPtr src, 
					global::System.IntPtr circles, 
					int method, 
					double dp, 
					double minDist, 
					double param1, 
					double param2, 
					int minRadius, 
					int maxRadius)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_HoughCircles(
								src, 
								circles, 
								method, 
								dp, 
								minDist, 
								param1, 
								param2, 
								minRadius, 
								maxRadius
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_erode, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_erode")]
		public static void imgproc_erode(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_erode(
								src, 
								dst, 
								kernel, 
								anchor, 
								iterations, 
								borderType, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_dilate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_dilate")]
		public static void imgproc_dilate(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_dilate(
								src, 
								dst, 
								kernel, 
								anchor, 
								iterations, 
								borderType, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_morphologyEx, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_morphologyEx")]
		public static void imgproc_morphologyEx(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int op, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_morphologyEx(
								src, 
								dst, 
								op, 
								kernel, 
								anchor, 
								iterations, 
								borderType, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_resize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_resize")]
		public static void imgproc_resize(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					double fx, 
					double fy, 
					int interpolation)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_resize(
								src, 
								dst, 
								dsize, 
								fx, 
								fy, 
								interpolation
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_warpAffine, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_warpAffine")]
		public static void imgproc_warpAffine(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_warpAffine(
								src, 
								dst, 
								m, 
								dsize, 
								flags, 
								borderMode, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_warpPerspective_MisInputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_warpPerspective_MisInputArray")]
		public static void imgproc_warpPerspective_MisInputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_warpPerspective_MisInputArray(
								src, 
								dst, 
								m, 
								dsize, 
								flags, 
								borderMode, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_warpPerspective_MisArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_warpPerspective_MisArray")]
		public static void imgproc_warpPerspective_MisArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float[] m, 
					int mRow, 
					int mCol, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Setup
			float* unsafe_m;
			// Marshalling
			fixed (float* pinned_m = global::McgInterop.McgCoreHelpers.GetArrayForCompat(m))
			{
				unsafe_m = (float*)pinned_m;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_warpPerspective_MisArray(
									src, 
									dst, 
									unsafe_m, 
									mRow, 
									mCol, 
									dsize, 
									flags, 
									borderMode, 
									borderValue
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, imgproc_remap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_remap")]
		public static void imgproc_remap(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					int interpolation, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_remap(
								src, 
								dst, 
								map1, 
								map2, 
								interpolation, 
								borderMode, 
								borderValue
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_convertMaps, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convertMaps")]
		public static void imgproc_convertMaps(
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					global::System.IntPtr dstmap1, 
					global::System.IntPtr dstmap2, 
					int dstmap1Type, 
					int nninterpolation)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convertMaps(
								map1, 
								map2, 
								dstmap1, 
								dstmap2, 
								dstmap1Type, 
								nninterpolation
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_getRotationMatrix2D, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getRotationMatrix2D")]
		public static global::System.IntPtr imgproc_getRotationMatrix2D(
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double angle, 
					double scale)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getRotationMatrix2D(
								center, 
								angle, 
								scale
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_invertAffineTransform, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_invertAffineTransform")]
		public static void imgproc_invertAffineTransform(
					global::System.IntPtr m, 
					global::System.IntPtr im)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_invertAffineTransform(
								m, 
								im
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_getPerspectiveTransform1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getPerspectiveTransform1")]
		public static global::System.IntPtr imgproc_getPerspectiveTransform1(
					global::OpenCvSharp.Point2f__OpenCvSharp[] src, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] dst)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getPerspectiveTransform1(
									unsafe_src, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, imgproc_getPerspectiveTransform2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getPerspectiveTransform2")]
		public static global::System.IntPtr imgproc_getPerspectiveTransform2(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getPerspectiveTransform2(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_getAffineTransform1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getAffineTransform1")]
		public static global::System.IntPtr imgproc_getAffineTransform1(
					global::OpenCvSharp.Point2f__OpenCvSharp[] src, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] dst)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_src = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_dst = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				if (src == null)
					unsafe_src = null;
				else
				{
					if (src != null)
						unsafe_src = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(src.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (src != null)
						for (uint mcgIdx = 0; (mcgIdx < src.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp src
							unsafe_src[mcgIdx] = src[mcgIdx];
						}
				}
				if (dst == null)
					unsafe_dst = null;
				else
				{
					if (dst != null)
						unsafe_dst = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(dst.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (dst != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < dst.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp dst
							unsafe_dst[mcgIdx_2] = dst[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getAffineTransform1(
									unsafe_src, 
									unsafe_dst
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_src);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_dst);
			}
		}

		// Signature, imgproc_getAffineTransform2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getAffineTransform2")]
		public static global::System.IntPtr imgproc_getAffineTransform2(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getAffineTransform2(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_getRectSubPix, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getRectSubPix")]
		public static void imgproc_getRectSubPix(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patchSize, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					global::System.IntPtr patch, 
					int patchType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getRectSubPix(
								image, 
								patchSize, 
								center, 
								patch, 
								patchType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_logPolar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_logPolar")]
		public static void imgproc_logPolar(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double m, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_logPolar(
								src, 
								dst, 
								center, 
								m, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_linearPolar, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_linearPolar")]
		public static void imgproc_linearPolar(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double maxRadius, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_linearPolar(
								src, 
								dst, 
								center, 
								maxRadius, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_integral1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_integral1")]
		public static void imgproc_integral1(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					int sdepth)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_integral1(
								src, 
								sum, 
								sdepth
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_integral2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_integral2")]
		public static void imgproc_integral2(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					global::System.IntPtr sqsum, 
					int sdepth)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_integral2(
								src, 
								sum, 
								sqsum, 
								sdepth
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_integral3, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_integral3")]
		public static void imgproc_integral3(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					global::System.IntPtr sqsum, 
					global::System.IntPtr tilted, 
					int sdepth)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_integral3(
								src, 
								sum, 
								sqsum, 
								tilted, 
								sdepth
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_accumulate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_accumulate")]
		public static void imgproc_accumulate(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_accumulate(
								src, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_accumulateSquare, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_accumulateSquare")]
		public static void imgproc_accumulateSquare(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_accumulateSquare(
								src, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_accumulateProduct, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_accumulateProduct")]
		public static void imgproc_accumulateProduct(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_accumulateProduct(
								src1, 
								src2, 
								dst, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_accumulateWeighted, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_accumulateWeighted")]
		public static void imgproc_accumulateWeighted(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_accumulateWeighted(
								src, 
								dst, 
								alpha, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_PSNR, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_PSNR")]
		public static double imgproc_PSNR(
					global::System.IntPtr src1, 
					global::System.IntPtr src2)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_PSNR(
								src1, 
								src2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_phaseCorrelate, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_phaseCorrelate")]
		public static global::OpenCvSharp.Point2d__OpenCvSharp imgproc_phaseCorrelate(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr window)
		{
			// Setup
			global::OpenCvSharp.Point2d__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_phaseCorrelate(
								src1, 
								src2, 
								window
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_phaseCorrelateRes, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2d__OpenCvSharp__OpenCvSharp__Point2d__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_phaseCorrelateRes")]
		public static global::OpenCvSharp.Point2d__OpenCvSharp imgproc_phaseCorrelateRes(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr window, 
					out double response)
		{
			// Setup
			double unsafe_response;
			global::OpenCvSharp.Point2d__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_phaseCorrelateRes(
								src1, 
								src2, 
								window, 
								&(unsafe_response)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			response = unsafe_response;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_createHanningWindow, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_createHanningWindow")]
		public static void imgproc_createHanningWindow(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_createHanningWindow(
								dst, 
								winSize, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_threshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_threshold")]
		public static double imgproc_threshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double thresh, 
					double maxval, 
					int type)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_threshold(
								src, 
								dst, 
								thresh, 
								maxval, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_adaptiveThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_adaptiveThreshold")]
		public static void imgproc_adaptiveThreshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double maxValue, 
					int adaptiveMethod, 
					int thresholdType, 
					int blockSize, 
					double c)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_adaptiveThreshold(
								src, 
								dst, 
								maxValue, 
								adaptiveMethod, 
								thresholdType, 
								blockSize, 
								c
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_pyrDown, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pyrDown")]
		public static void imgproc_pyrDown(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dstsize, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pyrDown(
								src, 
								dst, 
								dstsize, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_pyrUp, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pyrUp")]
		public static void imgproc_pyrUp(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dstsize, 
					int borderType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pyrUp(
								src, 
								dst, 
								dstsize, 
								borderType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_undistort, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_undistort")]
		public static void imgproc_undistort(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr newCameraMatrix)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_undistort(
								src, 
								dst, 
								cameraMatrix, 
								distCoeffs, 
								newCameraMatrix
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_initUndistortRectifyMap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_initUndistortRectifyMap")]
		public static void imgproc_initUndistortRectifyMap(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr r, 
					global::System.IntPtr newCameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int m1Type, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_initUndistortRectifyMap(
								cameraMatrix, 
								distCoeffs, 
								r, 
								newCameraMatrix, 
								size, 
								m1Type, 
								map1, 
								map2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_initWideAngleProjMap, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_initWideAngleProjMap")]
		public static float imgproc_initWideAngleProjMap(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					int destImageWidth, 
					int m1Type, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					int projType, 
					double alpha)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_initWideAngleProjMap(
								cameraMatrix, 
								distCoeffs, 
								imageSize, 
								destImageWidth, 
								m1Type, 
								map1, 
								map2, 
								projType, 
								alpha
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_getDefaultNewCameraMatrix, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_getDefaultNewCameraMatrix")]
		public static global::System.IntPtr imgproc_getDefaultNewCameraMatrix(
					global::System.IntPtr cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					int centerPrincipalPoint)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_getDefaultNewCameraMatrix(
								cameraMatrix, 
								imgSize, 
								centerPrincipalPoint
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_undistortPoints, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_undistortPoints")]
		public static void imgproc_undistortPoints(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr r, 
					global::System.IntPtr p)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_undistortPoints(
								src, 
								dst, 
								cameraMatrix, 
								distCoeffs, 
								r, 
								p
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_calcHist1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_calcHist1")]
		public static void imgproc_calcHist1(
					global::System.IntPtr[] images, 
					int nimages, 
					int[] channels, 
					global::System.IntPtr mask, 
					global::System.IntPtr hist, 
					int dims, 
					int[] histSize, 
					global::System.IntPtr[] ranges, 
					int uniform, 
					int accumulate)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			int* unsafe_channels;
			int* unsafe_histSize;
			global::System.IntPtr* unsafe_ranges;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (int* pinned_channels = global::McgInterop.McgCoreHelpers.GetArrayForCompat(channels))
				{
					unsafe_channels = (int*)pinned_channels;
					fixed (int* pinned_histSize = global::McgInterop.McgCoreHelpers.GetArrayForCompat(histSize))
					{
						unsafe_histSize = (int*)pinned_histSize;
						fixed (global::System.IntPtr* pinned_ranges = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ranges))
						{
							unsafe_ranges = (global::System.IntPtr*)pinned_ranges;
							// Call to native method
							global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_calcHist1(
												unsafe_images, 
												nimages, 
												unsafe_channels, 
												mask, 
												hist, 
												dims, 
												unsafe_histSize, 
												unsafe_ranges, 
												uniform, 
												accumulate
											);
							global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						}
					}
				}
			}
			// Return
		}

		// Signature, imgproc_calcBackProject, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_calcBackProject")]
		public static void imgproc_calcBackProject(
					global::System.IntPtr[] images, 
					int nimages, 
					int[] channels, 
					global::System.IntPtr hist, 
					global::System.IntPtr backProject, 
					global::System.IntPtr[] ranges, 
					int uniform)
		{
			// Setup
			global::System.IntPtr* unsafe_images;
			int* unsafe_channels;
			global::System.IntPtr* unsafe_ranges;
			// Marshalling
			fixed (global::System.IntPtr* pinned_images = global::McgInterop.McgCoreHelpers.GetArrayForCompat(images))
			{
				unsafe_images = (global::System.IntPtr*)pinned_images;
				fixed (int* pinned_channels = global::McgInterop.McgCoreHelpers.GetArrayForCompat(channels))
				{
					unsafe_channels = (int*)pinned_channels;
					fixed (global::System.IntPtr* pinned_ranges = global::McgInterop.McgCoreHelpers.GetArrayForCompat(ranges))
					{
						unsafe_ranges = (global::System.IntPtr*)pinned_ranges;
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_calcBackProject(
											unsafe_images, 
											nimages, 
											unsafe_channels, 
											hist, 
											backProject, 
											unsafe_ranges, 
											uniform
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
			}
			// Return
		}

		// Signature, imgproc_compareHist1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_compareHist1")]
		public static double imgproc_compareHist1(
					global::System.IntPtr h1, 
					global::System.IntPtr h2, 
					int method)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_compareHist1(
								h1, 
								h2, 
								method
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_equalizeHist, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_equalizeHist")]
		public static void imgproc_equalizeHist(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_equalizeHist(
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_EMD, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_EMD")]
		public static float imgproc_EMD(
					global::System.IntPtr signature1, 
					global::System.IntPtr signature2, 
					int distType, 
					global::System.IntPtr cost, 
					out float lowerBound, 
					global::System.IntPtr flow)
		{
			// Setup
			float unsafe_lowerBound;
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_EMD(
								signature1, 
								signature2, 
								distType, 
								cost, 
								&(unsafe_lowerBound), 
								flow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			lowerBound = unsafe_lowerBound;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_watershed, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_watershed")]
		public static void imgproc_watershed(
					global::System.IntPtr image, 
					global::System.IntPtr markers)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_watershed(
								image, 
								markers
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_pyrMeanShiftFiltering, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pyrMeanShiftFiltering")]
		public static void imgproc_pyrMeanShiftFiltering(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double sp, 
					double sr, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp termcrit)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pyrMeanShiftFiltering(
								src, 
								dst, 
								sp, 
								sr, 
								maxLevel, 
								termcrit
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_grabCut, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_grabCut")]
		public static void imgproc_grabCut(
					global::System.IntPtr img, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::System.IntPtr bgdModel, 
					global::System.IntPtr fgdModel, 
					int iterCount, 
					int mode)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_grabCut(
								img, 
								mask, 
								rect, 
								bgdModel, 
								fgdModel, 
								iterCount, 
								mode
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_distanceTransformWithLabels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_distanceTransformWithLabels")]
		public static void imgproc_distanceTransformWithLabels(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr labels, 
					int distanceType, 
					int maskSize, 
					int labelType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_distanceTransformWithLabels(
								src, 
								dst, 
								labels, 
								distanceType, 
								maskSize, 
								labelType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_distanceTransform, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_distanceTransform")]
		public static void imgproc_distanceTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int distanceType, 
					int maskSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_distanceTransform(
								src, 
								dst, 
								distanceType, 
								maskSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_floodFill, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_floodFill")]
		public static int imgproc_floodFill(
					global::System.IntPtr image, 
					global::OpenCvSharp.Point__OpenCvSharp seedPoint, 
					global::OpenCvSharp.Scalar__OpenCvSharp newVal, 
					out global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp loDiff, 
					global::OpenCvSharp.Scalar__OpenCvSharp upDiff, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_rect;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_floodFill(
								image, 
								seedPoint, 
								newVal, 
								&(unsafe_rect), 
								loDiff, 
								upDiff, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			rect = unsafe_rect;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_floodFill__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_floodFill")]
		public static int imgproc_floodFill__0(
					global::System.IntPtr image, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Point__OpenCvSharp seedPoint, 
					global::OpenCvSharp.Scalar__OpenCvSharp newVal, 
					out global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp loDiff, 
					global::OpenCvSharp.Scalar__OpenCvSharp upDiff, 
					int flags)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_rect;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_floodFill__0(
								image, 
								mask, 
								seedPoint, 
								newVal, 
								&(unsafe_rect), 
								loDiff, 
								upDiff, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			rect = unsafe_rect;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_cvtColor, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_cvtColor")]
		public static void imgproc_cvtColor(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int code, 
					int dstCn)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_cvtColor(
								src, 
								dst, 
								code, 
								dstCn
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_moments, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Moments_NativeStruct__OpenCvSharp__OpenCvSharp__Moments_NativeStruct__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_moments")]
		public static global::OpenCvSharp.Moments_NativeStruct__OpenCvSharp imgproc_moments(
					global::System.IntPtr arr, 
					int binaryImage)
		{
			// Setup
			global::OpenCvSharp.Moments_NativeStruct__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_moments(
								arr, 
								binaryImage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_matchTemplate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_matchTemplate")]
		public static void imgproc_matchTemplate(
					global::System.IntPtr image, 
					global::System.IntPtr templ, 
					global::System.IntPtr result, 
					int method, 
					global::System.IntPtr mask)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_matchTemplate(
								image, 
								templ, 
								result, 
								method, 
								mask
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_connectedComponents, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_connectedComponents")]
		public static int imgproc_connectedComponents(
					global::System.IntPtr image, 
					global::System.IntPtr labels, 
					int connectivity, 
					int ltype)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_connectedComponents(
								image, 
								labels, 
								connectivity, 
								ltype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_connectedComponentsWithStats, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_connectedComponentsWithStats")]
		public static int imgproc_connectedComponentsWithStats(
					global::System.IntPtr image, 
					global::System.IntPtr labels, 
					global::System.IntPtr stats, 
					global::System.IntPtr centroids, 
					int connectivity, 
					int ltype)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_connectedComponentsWithStats(
								image, 
								labels, 
								stats, 
								centroids, 
								connectivity, 
								ltype
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_findContours1_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_findContours1_vector")]
		public static void imgproc_findContours1_vector(
					global::System.IntPtr image, 
					out global::System.IntPtr contours, 
					out global::System.IntPtr hierarchy, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr unsafe_contours;
			global::System.IntPtr unsafe_hierarchy;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_findContours1_vector(
								image, 
								&(unsafe_contours), 
								&(unsafe_hierarchy), 
								mode, 
								method, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			hierarchy = unsafe_hierarchy;
			contours = unsafe_contours;
			// Return
		}

		// Signature, imgproc_findContours1_OutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_findContours1_OutputArray")]
		public static void imgproc_findContours1_OutputArray(
					global::System.IntPtr image, 
					out global::System.IntPtr contours, 
					global::System.IntPtr hierarchy, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr unsafe_contours;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_findContours1_OutputArray(
								image, 
								&(unsafe_contours), 
								hierarchy, 
								mode, 
								method, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			contours = unsafe_contours;
			// Return
		}

		// Signature, imgproc_findContours2_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_findContours2_vector")]
		public static void imgproc_findContours2_vector(
					global::System.IntPtr image, 
					out global::System.IntPtr contours, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr unsafe_contours;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_findContours2_vector(
								image, 
								&(unsafe_contours), 
								mode, 
								method, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			contours = unsafe_contours;
			// Return
		}

		// Signature, imgproc_findContours2_OutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_findContours2_OutputArray")]
		public static void imgproc_findContours2_OutputArray(
					global::System.IntPtr image, 
					out global::System.IntPtr contours, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr unsafe_contours;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_findContours2_OutputArray(
								image, 
								&(unsafe_contours), 
								mode, 
								method, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			contours = unsafe_contours;
			// Return
		}

		// Signature, imgproc_drawContours_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_drawContours_vector")]
		public static void imgproc_drawContours_vector(
					global::System.IntPtr image, 
					global::System.IntPtr[] contours, 
					int contoursSize1, 
					int[] contoursSize2, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::OpenCvSharp.Vec4i__OpenCvSharp[] hierarchy, 
					int hiearchyLength, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr* unsafe_contours;
			int* unsafe_contoursSize2;
			global::OpenCvSharp.Vec4i__OpenCvSharp* unsafe_hierarchy = default(global::OpenCvSharp.Vec4i__OpenCvSharp*);
			try
			{
				// Marshalling
				fixed (global::System.IntPtr* pinned_contours = global::McgInterop.McgCoreHelpers.GetArrayForCompat(contours))
				{
					unsafe_contours = (global::System.IntPtr*)pinned_contours;
					fixed (int* pinned_contoursSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(contoursSize2))
					{
						unsafe_contoursSize2 = (int*)pinned_contoursSize2;
						if (hierarchy == null)
							unsafe_hierarchy = null;
						else
						{
							if (hierarchy != null)
								unsafe_hierarchy = (global::OpenCvSharp.Vec4i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(hierarchy.Length * sizeof(global::OpenCvSharp.Vec4i__OpenCvSharp))));
							if (hierarchy != null)
								for (uint mcgIdx = 0; (mcgIdx < hierarchy.Length); mcgIdx++)
								{
									// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec4i__OpenCvSharp__OpenCvSharp__Vec4i__OpenCvSharp hierarchy
									unsafe_hierarchy[mcgIdx] = hierarchy[mcgIdx];
								}
						}
						// Call to native method
						global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_drawContours_vector(
											image, 
											unsafe_contours, 
											contoursSize1, 
											unsafe_contoursSize2, 
											contourIdx, 
											color, 
											thickness, 
											lineType, 
											unsafe_hierarchy, 
											hiearchyLength, 
											maxLevel, 
											offset
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					}
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_hierarchy);
			}
		}

		// Signature, imgproc_drawContours_vector__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_drawContours_vector")]
		public static void imgproc_drawContours_vector__0(
					global::System.IntPtr image, 
					global::System.IntPtr[] contours, 
					int contoursSize1, 
					int[] contoursSize2, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::System.IntPtr hierarchy, 
					int hiearchyLength, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr* unsafe_contours;
			int* unsafe_contoursSize2;
			// Marshalling
			fixed (global::System.IntPtr* pinned_contours = global::McgInterop.McgCoreHelpers.GetArrayForCompat(contours))
			{
				unsafe_contours = (global::System.IntPtr*)pinned_contours;
				fixed (int* pinned_contoursSize2 = global::McgInterop.McgCoreHelpers.GetArrayForCompat(contoursSize2))
				{
					unsafe_contoursSize2 = (int*)pinned_contoursSize2;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_drawContours_vector__0(
										image, 
										unsafe_contours, 
										contoursSize1, 
										unsafe_contoursSize2, 
										contourIdx, 
										color, 
										thickness, 
										lineType, 
										hierarchy, 
										hiearchyLength, 
										maxLevel, 
										offset
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, imgproc_drawContours_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_drawContours_InputArray")]
		public static void imgproc_drawContours_InputArray(
					global::System.IntPtr image, 
					global::System.IntPtr[] contours, 
					int contoursLength, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::System.IntPtr hierarchy, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr* unsafe_contours;
			// Marshalling
			fixed (global::System.IntPtr* pinned_contours = global::McgInterop.McgCoreHelpers.GetArrayForCompat(contours))
			{
				unsafe_contours = (global::System.IntPtr*)pinned_contours;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_drawContours_InputArray(
									image, 
									unsafe_contours, 
									contoursLength, 
									contourIdx, 
									color, 
									thickness, 
									lineType, 
									hierarchy, 
									maxLevel, 
									offset
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, imgproc_approxPolyDP_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_approxPolyDP_InputArray")]
		public static void imgproc_approxPolyDP_InputArray(
					global::System.IntPtr curve, 
					global::System.IntPtr approxCurve, 
					double epsilon, 
					int closed)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_approxPolyDP_InputArray(
								curve, 
								approxCurve, 
								epsilon, 
								closed
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_approxPolyDP_Point, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_approxPolyDP_Point")]
		public static void imgproc_approxPolyDP_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] curve, 
					int curveLength, 
					out global::System.IntPtr approxCurve, 
					double epsilon, 
					int closed)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::System.IntPtr unsafe_approxCurve;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_approxPolyDP_Point(
									unsafe_curve, 
									curveLength, 
									&(unsafe_approxCurve), 
									epsilon, 
									closed
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				approxCurve = unsafe_approxCurve;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_approxPolyDP_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_approxPolyDP_Point2f")]
		public static void imgproc_approxPolyDP_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] curve, 
					int curveLength, 
					out global::System.IntPtr approxCurve, 
					double epsilon, 
					int closed)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe_approxCurve;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_approxPolyDP_Point2f(
									unsafe_curve, 
									curveLength, 
									&(unsafe_approxCurve), 
									epsilon, 
									closed
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				approxCurve = unsafe_approxCurve;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_arcLength_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_arcLength_InputArray")]
		public static double imgproc_arcLength_InputArray(
					global::System.IntPtr curve, 
					int closed)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_arcLength_InputArray(
								curve, 
								closed
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_arcLength_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_arcLength_Point")]
		public static double imgproc_arcLength_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] curve, 
					int curveLength, 
					int closed)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_arcLength_Point(
									unsafe_curve, 
									curveLength, 
									closed
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_arcLength_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_arcLength_Point2f")]
		public static double imgproc_arcLength_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] curve, 
					int curveLength, 
					int closed)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_arcLength_Point2f(
									unsafe_curve, 
									curveLength, 
									closed
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_boundingRect_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_boundingRect_InputArray")]
		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_InputArray(global::System.IntPtr curve)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_boundingRect_InputArray(curve);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_boundingRect_Point, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_boundingRect_Point")]
		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] curve, 
					int curveLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_boundingRect_Point(
									unsafe_curve, 
									curveLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_boundingRect_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_boundingRect_Point2f")]
		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] curve, 
					int curveLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_curve = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.Rect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (curve == null)
					unsafe_curve = null;
				else
				{
					if (curve != null)
						unsafe_curve = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(curve.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (curve != null)
						for (uint mcgIdx = 0; (mcgIdx < curve.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp curve
							unsafe_curve[mcgIdx] = curve[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_boundingRect_Point2f(
									unsafe_curve, 
									curveLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_curve);
			}
		}

		// Signature, imgproc_contourArea_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_contourArea_InputArray")]
		public static double imgproc_contourArea_InputArray(
					global::System.IntPtr contour, 
					int oriented)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_contourArea_InputArray(
								contour, 
								oriented
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_contourArea_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_contourArea_Point")]
		public static double imgproc_contourArea_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] contour, 
					int contourLength, 
					int oriented)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_contourArea_Point(
									unsafe_contour, 
									contourLength, 
									oriented
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_contourArea_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_contourArea_Point2f")]
		public static double imgproc_contourArea_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] contour, 
					int contourLength, 
					int oriented)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_contourArea_Point2f(
									unsafe_contour, 
									contourLength, 
									oriented
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_minAreaRect_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minAreaRect_InputArray")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_InputArray(global::System.IntPtr points)
		{
			// Setup
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minAreaRect_InputArray(points);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_minAreaRect_Point, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minAreaRect_Point")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minAreaRect_Point(
									unsafe_points, 
									pointsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_minAreaRect_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minAreaRect_Point2f")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minAreaRect_Point2f(
									unsafe_points, 
									pointsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_minEnclosingCircle_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minEnclosingCircle_InputArray")]
		public static void imgproc_minEnclosingCircle_InputArray(
					global::System.IntPtr points, 
					out global::OpenCvSharp.Point2f__OpenCvSharp center, 
					out float radius)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_center;
			float unsafe_radius;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minEnclosingCircle_InputArray(
								points, 
								&(unsafe_center), 
								&(unsafe_radius)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			radius = unsafe_radius;
			center = unsafe_center;
			// Return
		}

		// Signature, imgproc_minEnclosingCircle_Point, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minEnclosingCircle_Point")]
		public static void imgproc_minEnclosingCircle_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength, 
					out global::OpenCvSharp.Point2f__OpenCvSharp center, 
					out float radius)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_center;
			float unsafe_radius;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minEnclosingCircle_Point(
									unsafe_points, 
									pointsLength, 
									&(unsafe_center), 
									&(unsafe_radius)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				radius = unsafe_radius;
				center = unsafe_center;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_minEnclosingCircle_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_minEnclosingCircle_Point2f")]
		public static void imgproc_minEnclosingCircle_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength, 
					out global::OpenCvSharp.Point2f__OpenCvSharp center, 
					out float radius)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_center;
			float unsafe_radius;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_minEnclosingCircle_Point2f(
									unsafe_points, 
									pointsLength, 
									&(unsafe_center), 
									&(unsafe_radius)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				radius = unsafe_radius;
				center = unsafe_center;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_matchShapes_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_matchShapes_InputArray")]
		public static double imgproc_matchShapes_InputArray(
					global::System.IntPtr contour1, 
					global::System.IntPtr contour2, 
					int method, 
					double parameter)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_matchShapes_InputArray(
								contour1, 
								contour2, 
								method, 
								parameter
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_matchShapes_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_matchShapes_Point")]
		public static double imgproc_matchShapes_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] contour1, 
					int contour1Length, 
					global::OpenCvSharp.Point__OpenCvSharp[] contour2, 
					int contour2Length, 
					int method, 
					double parameter)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour1 = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour2 = default(global::OpenCvSharp.Point__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (contour1 == null)
					unsafe_contour1 = null;
				else
				{
					if (contour1 != null)
						unsafe_contour1 = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour1.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour1 != null)
						for (uint mcgIdx = 0; (mcgIdx < contour1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour1
							unsafe_contour1[mcgIdx] = contour1[mcgIdx];
						}
				}
				if (contour2 == null)
					unsafe_contour2 = null;
				else
				{
					if (contour2 != null)
						unsafe_contour2 = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour2.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < contour2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour2
							unsafe_contour2[mcgIdx_2] = contour2[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_matchShapes_Point(
									unsafe_contour1, 
									contour1Length, 
									unsafe_contour2, 
									contour2Length, 
									method, 
									parameter
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour2);
			}
		}

		// Signature, imgproc_convexHull_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexHull_InputArray")]
		public static void imgproc_convexHull_InputArray(
					global::System.IntPtr points, 
					global::System.IntPtr hull, 
					int clockwise, 
					int returnPoints)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexHull_InputArray(
								points, 
								hull, 
								clockwise, 
								returnPoints
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_convexHull_Point_ReturnsPoints, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexHull_Point_ReturnsPoints")]
		public static void imgproc_convexHull_Point_ReturnsPoints(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength, 
					out global::System.IntPtr hull, 
					int clockwise)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::System.IntPtr unsafe_hull;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexHull_Point_ReturnsPoints(
									unsafe_points, 
									pointsLength, 
									&(unsafe_hull), 
									clockwise
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				hull = unsafe_hull;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_convexHull_Point2f_ReturnsPoints, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexHull_Point2f_ReturnsPoints")]
		public static void imgproc_convexHull_Point2f_ReturnsPoints(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength, 
					out global::System.IntPtr hull, 
					int clockwise)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe_hull;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexHull_Point2f_ReturnsPoints(
									unsafe_points, 
									pointsLength, 
									&(unsafe_hull), 
									clockwise
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				hull = unsafe_hull;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_convexHull_Point_ReturnsIndices, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexHull_Point_ReturnsIndices")]
		public static void imgproc_convexHull_Point_ReturnsIndices(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength, 
					out global::System.IntPtr hull, 
					int clockwise)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::System.IntPtr unsafe_hull;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexHull_Point_ReturnsIndices(
									unsafe_points, 
									pointsLength, 
									&(unsafe_hull), 
									clockwise
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				hull = unsafe_hull;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_convexHull_Point2f_ReturnsIndices, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexHull_Point2f_ReturnsIndices")]
		public static void imgproc_convexHull_Point2f_ReturnsIndices(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength, 
					out global::System.IntPtr hull, 
					int clockwise)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe_hull;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexHull_Point2f_ReturnsIndices(
									unsafe_points, 
									pointsLength, 
									&(unsafe_hull), 
									clockwise
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				hull = unsafe_hull;
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_convexityDefects_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexityDefects_InputArray")]
		public static void imgproc_convexityDefects_InputArray(
					global::System.IntPtr contour, 
					global::System.IntPtr convexHull, 
					global::System.IntPtr convexityDefects)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexityDefects_InputArray(
								contour, 
								convexHull, 
								convexityDefects
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_convexityDefects_Point, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexityDefects_Point")]
		public static void imgproc_convexityDefects_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] contour, 
					int contourLength, 
					int[] convexHull, 
					int convexHullLength, 
					out global::System.IntPtr convexityDefects)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int* unsafe_convexHull;
			global::System.IntPtr unsafe_convexityDefects;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				fixed (int* pinned_convexHull = global::McgInterop.McgCoreHelpers.GetArrayForCompat(convexHull))
				{
					unsafe_convexHull = (int*)pinned_convexHull;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexityDefects_Point(
										unsafe_contour, 
										contourLength, 
										unsafe_convexHull, 
										convexHullLength, 
										&(unsafe_convexityDefects)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					convexityDefects = unsafe_convexityDefects;
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_convexityDefects_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_convexityDefects_Point2f")]
		public static void imgproc_convexityDefects_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] contour, 
					int contourLength, 
					int[] convexHull, 
					int convexHullLength, 
					out global::System.IntPtr convexityDefects)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int* unsafe_convexHull;
			global::System.IntPtr unsafe_convexityDefects;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				fixed (int* pinned_convexHull = global::McgInterop.McgCoreHelpers.GetArrayForCompat(convexHull))
				{
					unsafe_convexHull = (int*)pinned_convexHull;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_convexityDefects_Point2f(
										unsafe_contour, 
										contourLength, 
										unsafe_convexHull, 
										convexHullLength, 
										&(unsafe_convexityDefects)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					convexityDefects = unsafe_convexityDefects;
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_isContourConvex_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_isContourConvex_InputArray")]
		public static int imgproc_isContourConvex_InputArray(global::System.IntPtr contour)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_isContourConvex_InputArray(contour);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_isContourConvex_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_isContourConvex_Point")]
		public static int imgproc_isContourConvex_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] contour, 
					int contourLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_isContourConvex_Point(
									unsafe_contour, 
									contourLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_isContourConvex_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_isContourConvex_Point2f")]
		public static int imgproc_isContourConvex_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] contour, 
					int contourLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_isContourConvex_Point2f(
									unsafe_contour, 
									contourLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_intersectConvexConvex_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_intersectConvexConvex_InputArray")]
		public static float imgproc_intersectConvexConvex_InputArray(
					global::System.IntPtr p1, 
					global::System.IntPtr p2, 
					global::System.IntPtr p12, 
					int handleNested)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_intersectConvexConvex_InputArray(
								p1, 
								p2, 
								p12, 
								handleNested
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_intersectConvexConvex_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_intersectConvexConvex_Point")]
		public static float imgproc_intersectConvexConvex_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] p1, 
					int p1Length, 
					global::OpenCvSharp.Point__OpenCvSharp[] p2, 
					int p2Length, 
					out global::System.IntPtr p12, 
					int handleNested)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_p1 = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_p2 = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::System.IntPtr unsafe_p12;
			float unsafe___value;
			try
			{
				// Marshalling
				if (p1 == null)
					unsafe_p1 = null;
				else
				{
					if (p1 != null)
						unsafe_p1 = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(p1.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (p1 != null)
						for (uint mcgIdx = 0; (mcgIdx < p1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp p1
							unsafe_p1[mcgIdx] = p1[mcgIdx];
						}
				}
				if (p2 == null)
					unsafe_p2 = null;
				else
				{
					if (p2 != null)
						unsafe_p2 = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(p2.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (p2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < p2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp p2
							unsafe_p2[mcgIdx_2] = p2[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_intersectConvexConvex_Point(
									unsafe_p1, 
									p1Length, 
									unsafe_p2, 
									p2Length, 
									&(unsafe_p12), 
									handleNested
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				p12 = unsafe_p12;
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_p1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_p2);
			}
		}

		// Signature, imgproc_intersectConvexConvex_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_intersectConvexConvex_Point2f")]
		public static float imgproc_intersectConvexConvex_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] p1, 
					int p1Length, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] p2, 
					int p2Length, 
					out global::System.IntPtr p12, 
					int handleNested)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_p1 = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_p2 = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::System.IntPtr unsafe_p12;
			float unsafe___value;
			try
			{
				// Marshalling
				if (p1 == null)
					unsafe_p1 = null;
				else
				{
					if (p1 != null)
						unsafe_p1 = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(p1.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (p1 != null)
						for (uint mcgIdx = 0; (mcgIdx < p1.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp p1
							unsafe_p1[mcgIdx] = p1[mcgIdx];
						}
				}
				if (p2 == null)
					unsafe_p2 = null;
				else
				{
					if (p2 != null)
						unsafe_p2 = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(p2.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (p2 != null)
						for (uint mcgIdx_2 = 0; (mcgIdx_2 < p2.Length); mcgIdx_2++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp p2
							unsafe_p2[mcgIdx_2] = p2[mcgIdx_2];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_intersectConvexConvex_Point2f(
									unsafe_p1, 
									p1Length, 
									unsafe_p2, 
									p2Length, 
									&(unsafe_p12), 
									handleNested
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				p12 = unsafe_p12;
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_p1);
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_p2);
			}
		}

		// Signature, imgproc_fitEllipse_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitEllipse_InputArray")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_InputArray(global::System.IntPtr points)
		{
			// Setup
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitEllipse_InputArray(points);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_fitEllipse_Point, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitEllipse_Point")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitEllipse_Point(
									unsafe_points, 
									pointsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_fitEllipse_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitEllipse_Point2f")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitEllipse_Point2f(
									unsafe_points, 
									pointsLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_fitLine_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitLine_InputArray")]
		public static void imgproc_fitLine_InputArray(
					global::System.IntPtr points, 
					global::System.IntPtr line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitLine_InputArray(
								points, 
								line, 
								distType, 
								param, 
								reps, 
								aeps
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_fitLine_Point, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitLine_Point")]
		public static void imgproc_fitLine_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] points, 
					int pointsLength, 
					float[] line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point__OpenCvSharp*);
			float* unsafe_line;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (float* pinned_line = global::McgInterop.McgCoreHelpers.GetArrayForCompat(line))
				{
					unsafe_line = (float*)pinned_line;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitLine_Point(
										unsafe_points, 
										pointsLength, 
										unsafe_line, 
										distType, 
										param, 
										reps, 
										aeps
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_fitLine_Point2f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitLine_Point2f")]
		public static void imgproc_fitLine_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] points, 
					int pointsLength, 
					float[] line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			float* unsafe_line;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (float* pinned_line = global::McgInterop.McgCoreHelpers.GetArrayForCompat(line))
				{
					unsafe_line = (float*)pinned_line;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitLine_Point2f(
										unsafe_points, 
										pointsLength, 
										unsafe_line, 
										distType, 
										param, 
										reps, 
										aeps
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_fitLine_Point3i, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitLine_Point3i")]
		public static void imgproc_fitLine_Point3i(
					global::OpenCvSharp.Point3i__OpenCvSharp[] points, 
					int pointsLength, 
					float[] line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			// Setup
			global::OpenCvSharp.Point3i__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point3i__OpenCvSharp*);
			float* unsafe_line;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point3i__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point3i__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3i__OpenCvSharp__OpenCvSharp__Point3i__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (float* pinned_line = global::McgInterop.McgCoreHelpers.GetArrayForCompat(line))
				{
					unsafe_line = (float*)pinned_line;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitLine_Point3i(
										unsafe_points, 
										pointsLength, 
										unsafe_line, 
										distType, 
										param, 
										reps, 
										aeps
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_fitLine_Point3f, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fitLine_Point3f")]
		public static void imgproc_fitLine_Point3f(
					global::OpenCvSharp.Point3f__OpenCvSharp[] points, 
					int pointsLength, 
					float[] line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			// Setup
			global::OpenCvSharp.Point3f__OpenCvSharp* unsafe_points = default(global::OpenCvSharp.Point3f__OpenCvSharp*);
			float* unsafe_line;
			try
			{
				// Marshalling
				if (points == null)
					unsafe_points = null;
				else
				{
					if (points != null)
						unsafe_points = (global::OpenCvSharp.Point3f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(points.Length * sizeof(global::OpenCvSharp.Point3f__OpenCvSharp))));
					if (points != null)
						for (uint mcgIdx = 0; (mcgIdx < points.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point3f__OpenCvSharp__OpenCvSharp__Point3f__OpenCvSharp points
							unsafe_points[mcgIdx] = points[mcgIdx];
						}
				}
				fixed (float* pinned_line = global::McgInterop.McgCoreHelpers.GetArrayForCompat(line))
				{
					unsafe_line = (float*)pinned_line;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fitLine_Point3f(
										unsafe_points, 
										pointsLength, 
										unsafe_line, 
										distType, 
										param, 
										reps, 
										aeps
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_points);
			}
		}

		// Signature, imgproc_pointPolygonTest_InputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pointPolygonTest_InputArray")]
		public static double imgproc_pointPolygonTest_InputArray(
					global::System.IntPtr contour, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pointPolygonTest_InputArray(
								contour, 
								pt, 
								measureDist
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_pointPolygonTest_Point, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pointPolygonTest_Point")]
		public static double imgproc_pointPolygonTest_Point(
					global::OpenCvSharp.Point__OpenCvSharp[] contour, 
					int contourLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pointPolygonTest_Point(
									unsafe_contour, 
									contourLength, 
									pt, 
									measureDist
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_pointPolygonTest_Point2f, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_pointPolygonTest_Point2f")]
		public static double imgproc_pointPolygonTest_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp[] contour, 
					int contourLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_contour = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			double unsafe___value;
			try
			{
				// Marshalling
				if (contour == null)
					unsafe_contour = null;
				else
				{
					if (contour != null)
						unsafe_contour = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(contour.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (contour != null)
						for (uint mcgIdx = 0; (mcgIdx < contour.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp contour
							unsafe_contour[mcgIdx] = contour[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_pointPolygonTest_Point2f(
									unsafe_contour, 
									contourLength, 
									pt, 
									measureDist
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_contour);
			}
		}

		// Signature, imgproc_rotatedRectangleIntersection_OutputArray, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_rotatedRectangleIntersection_OutputArray")]
		public static int imgproc_rotatedRectangleIntersection_OutputArray(
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect1, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect2, 
					global::System.IntPtr intersectingRegion)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_rotatedRectangleIntersection_OutputArray(
								rect1, 
								rect2, 
								intersectingRegion
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_rotatedRectangleIntersection_vector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_rotatedRectangleIntersection_vector")]
		public static int imgproc_rotatedRectangleIntersection_vector(
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect1, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect2, 
					global::System.IntPtr intersectingRegion)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_rotatedRectangleIntersection_vector(
								rect1, 
								rect2, 
								intersectingRegion
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_applyColorMap, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_applyColorMap")]
		public static void imgproc_applyColorMap(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int colormap)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_applyColorMap(
								src, 
								dst, 
								colormap
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_line, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_line")]
		public static void imgproc_line(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_line(
								img, 
								pt1, 
								pt2, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_arrowedLine, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_arrowedLine")]
		public static void imgproc_arrowedLine(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift, 
					double tipLength)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_arrowedLine(
								img, 
								pt1, 
								pt2, 
								color, 
								thickness, 
								lineType, 
								shift, 
								tipLength
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_rectangle_InputOutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_rectangle_InputOutputArray")]
		public static void imgproc_rectangle_InputOutputArray(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_rectangle_InputOutputArray(
								img, 
								pt1, 
								pt2, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_rectangle_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_rectangle_Mat")]
		public static void imgproc_rectangle_Mat(
					global::System.IntPtr img, 
					global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_rectangle_Mat(
								img, 
								rect, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_circle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_circle")]
		public static void imgproc_circle(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp center, 
					int radius, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_circle(
								img, 
								center, 
								radius, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_ellipse1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_ellipse1")]
		public static void imgproc_ellipse1(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp center, 
					global::OpenCvSharp.Size__OpenCvSharp axes, 
					double angle, 
					double startAngle, 
					double endAngle, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_ellipse1(
								img, 
								center, 
								axes, 
								angle, 
								startAngle, 
								endAngle, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_ellipse2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_ellipse2")]
		public static void imgproc_ellipse2(
					global::System.IntPtr img, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp box, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_ellipse2(
								img, 
								box, 
								color, 
								thickness, 
								lineType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_fillConvexPoly_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fillConvexPoly_Mat")]
		public static void imgproc_fillConvexPoly_Mat(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp[] pts, 
					int npts, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp* unsafe_pts = default(global::OpenCvSharp.Point__OpenCvSharp*);
			try
			{
				// Marshalling
				if (pts == null)
					unsafe_pts = null;
				else
				{
					if (pts != null)
						unsafe_pts = (global::OpenCvSharp.Point__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(pts.Length * sizeof(global::OpenCvSharp.Point__OpenCvSharp))));
					if (pts != null)
						for (uint mcgIdx = 0; (mcgIdx < pts.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp pts
							unsafe_pts[mcgIdx] = pts[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fillConvexPoly_Mat(
									img, 
									unsafe_pts, 
									npts, 
									color, 
									lineType, 
									shift
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_pts);
			}
		}

		// Signature, imgproc_fillConvexPoly_InputOutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fillConvexPoly_InputOutputArray")]
		public static void imgproc_fillConvexPoly_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr points, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fillConvexPoly_InputOutputArray(
								img, 
								points, 
								color, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_fillPoly_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fillPoly_Mat")]
		public static void imgproc_fillPoly_Mat(
					global::System.IntPtr img, 
					global::System.IntPtr[] pts, 
					int[] npts, 
					int ncontours, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Setup
			global::System.IntPtr* unsafe_pts;
			int* unsafe_npts;
			// Marshalling
			fixed (global::System.IntPtr* pinned_pts = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pts))
			{
				unsafe_pts = (global::System.IntPtr*)pinned_pts;
				fixed (int* pinned_npts = global::McgInterop.McgCoreHelpers.GetArrayForCompat(npts))
				{
					unsafe_npts = (int*)pinned_npts;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fillPoly_Mat(
										img, 
										unsafe_pts, 
										unsafe_npts, 
										ncontours, 
										color, 
										lineType, 
										shift, 
										offset
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, imgproc_fillPoly_InputOutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_fillPoly_InputOutputArray")]
		public static void imgproc_fillPoly_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr pts, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_fillPoly_InputOutputArray(
								img, 
								pts, 
								color, 
								lineType, 
								shift, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_polylines_Mat, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_polylines_Mat")]
		public static void imgproc_polylines_Mat(
					global::System.IntPtr img, 
					global::System.IntPtr[] pts, 
					int[] npts, 
					int ncontours, 
					int isClosed, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Setup
			global::System.IntPtr* unsafe_pts;
			int* unsafe_npts;
			// Marshalling
			fixed (global::System.IntPtr* pinned_pts = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pts))
			{
				unsafe_pts = (global::System.IntPtr*)pinned_pts;
				fixed (int* pinned_npts = global::McgInterop.McgCoreHelpers.GetArrayForCompat(npts))
				{
					unsafe_npts = (int*)pinned_npts;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_polylines_Mat(
										img, 
										unsafe_pts, 
										unsafe_npts, 
										ncontours, 
										isClosed, 
										color, 
										thickness, 
										lineType, 
										shift
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, imgproc_polylines_InputOutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_polylines_InputOutputArray")]
		public static void imgproc_polylines_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr pts, 
					int isClosed, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_polylines_InputOutputArray(
								img, 
								pts, 
								isClosed, 
								color, 
								thickness, 
								lineType, 
								shift
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_clipLine1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_clipLine1")]
		public static int imgproc_clipLine1(
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					ref global::OpenCvSharp.Point__OpenCvSharp pt1, 
					ref global::OpenCvSharp.Point__OpenCvSharp pt2)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp unsafe_pt1;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_pt2;
			int unsafe___value;
			// Marshalling
			unsafe_pt1 = pt1;
			unsafe_pt2 = pt2;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_clipLine1(
								imgSize, 
								&(unsafe_pt1), 
								&(unsafe_pt2)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pt2 = unsafe_pt2;
			pt1 = unsafe_pt1;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_clipLine2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_clipLine2")]
		public static int imgproc_clipLine2(
					global::OpenCvSharp.Rect__OpenCvSharp imgRect, 
					ref global::OpenCvSharp.Point__OpenCvSharp pt1, 
					ref global::OpenCvSharp.Point__OpenCvSharp pt2)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp unsafe_pt1;
			global::OpenCvSharp.Point__OpenCvSharp unsafe_pt2;
			int unsafe___value;
			// Marshalling
			unsafe_pt1 = pt1;
			unsafe_pt2 = pt2;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_clipLine2(
								imgRect, 
								&(unsafe_pt1), 
								&(unsafe_pt2)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			pt2 = unsafe_pt2;
			pt1 = unsafe_pt1;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_ellipse2Poly, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_ellipse2Poly")]
		public static void imgproc_ellipse2Poly(
					global::OpenCvSharp.Point__OpenCvSharp center, 
					global::OpenCvSharp.Size__OpenCvSharp axes, 
					int angle, 
					int arcStart, 
					int arcEnd, 
					int delta, 
					global::System.IntPtr pts)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_ellipse2Poly(
								center, 
								axes, 
								angle, 
								arcStart, 
								arcEnd, 
								delta, 
								pts
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, core_putText, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Scalar__OpenCvSharp__OpenCvSharp__Scalar__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_putText")]
		public static void core_putText(
					global::System.IntPtr img, 
					string text, 
					global::OpenCvSharp.Point__OpenCvSharp org, 
					int fontFace, 
					double fontScale, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int bottomLeftOrigin)
		{
			// Setup
			byte* unsafe_text = default(byte*);
			try
			{
				// Marshalling
				unsafe_text = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(text, false, true);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.core_putText(
									img, 
									unsafe_text, 
									org, 
									fontFace, 
									fontScale, 
									color, 
									thickness, 
									lineType, 
									bottomLeftOrigin
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_text);
			}
		}

		// Signature, core_getTextSize, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "core_getTextSize")]
		public static global::OpenCvSharp.Size__OpenCvSharp core_getTextSize(
					string text, 
					int fontFace, 
					double fontScale, 
					int thickness, 
					out int baseLine)
		{
			// Setup
			byte* unsafe_text = default(byte*);
			int unsafe_baseLine;
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			try
			{
				// Marshalling
				unsafe_text = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(text, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.core_getTextSize(
									unsafe_text, 
									fontFace, 
									fontScale, 
									thickness, 
									&(unsafe_baseLine)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				baseLine = unsafe_baseLine;
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_text);
			}
		}

		// Signature, imgproc_createCLAHE, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_createCLAHE")]
		public static global::System.IntPtr imgproc_createCLAHE(
					double clipLimit, 
					global::OpenCvSharp.Size__OpenCvSharp tileGridSize)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_createCLAHE(
								clipLimit, 
								tileGridSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_CLAHE_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_CLAHE_delete")]
		public static void imgproc_Ptr_CLAHE_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_CLAHE_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Ptr_CLAHE_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_CLAHE_get")]
		public static global::System.IntPtr imgproc_Ptr_CLAHE_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_CLAHE_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_CLAHE_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_info")]
		public static global::System.IntPtr imgproc_CLAHE_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_CLAHE_apply, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_apply")]
		public static void imgproc_CLAHE_apply(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_apply(
								obj, 
								src, 
								dst
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_CLAHE_setClipLimit, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_setClipLimit")]
		public static void imgproc_CLAHE_setClipLimit(
					global::System.IntPtr obj, 
					double clipLimit)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_setClipLimit(
								obj, 
								clipLimit
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_CLAHE_getClipLimit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_getClipLimit")]
		public static double imgproc_CLAHE_getClipLimit(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_getClipLimit(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_CLAHE_setTilesGridSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_setTilesGridSize")]
		public static void imgproc_CLAHE_setTilesGridSize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp tileGridSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_setTilesGridSize(
								obj, 
								tileGridSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_CLAHE_getTilesGridSize, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_getTilesGridSize")]
		public static global::OpenCvSharp.Size__OpenCvSharp imgproc_CLAHE_getTilesGridSize(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Size__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_getTilesGridSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_CLAHE_collectGarbage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_CLAHE_collectGarbage")]
		public static void imgproc_CLAHE_collectGarbage(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_CLAHE_collectGarbage(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_setTemplate1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setTemplate1")]
		public static void imgproc_GeneralizedHough_setTemplate1(
					global::System.IntPtr obj, 
					global::System.IntPtr templ, 
					global::OpenCvSharp.Point__OpenCvSharp templCenter)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setTemplate1(
								obj, 
								templ, 
								templCenter
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_setTemplate2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setTemplate2")]
		public static void imgproc_GeneralizedHough_setTemplate2(
					global::System.IntPtr obj, 
					global::System.IntPtr edges, 
					global::System.IntPtr dx, 
					global::System.IntPtr dy, 
					global::OpenCvSharp.Point__OpenCvSharp templCenter)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setTemplate2(
								obj, 
								edges, 
								dx, 
								dy, 
								templCenter
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_detect1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_detect1")]
		public static void imgproc_GeneralizedHough_detect1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr positions, 
					global::System.IntPtr votes)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_detect1(
								obj, 
								image, 
								positions, 
								votes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_detect2, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_detect2")]
		public static void imgproc_GeneralizedHough_detect2(
					global::System.IntPtr obj, 
					global::System.IntPtr edges, 
					global::System.IntPtr dx, 
					global::System.IntPtr dy, 
					global::System.IntPtr positions, 
					global::System.IntPtr votes)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_detect2(
								obj, 
								edges, 
								dx, 
								dy, 
								positions, 
								votes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_setCannyLowThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setCannyLowThresh")]
		public static void imgproc_GeneralizedHough_setCannyLowThresh(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setCannyLowThresh(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_getCannyLowThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_getCannyLowThresh")]
		public static int imgproc_GeneralizedHough_getCannyLowThresh(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_getCannyLowThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHough_setCannyHighThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setCannyHighThresh")]
		public static void imgproc_GeneralizedHough_setCannyHighThresh(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setCannyHighThresh(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_getCannyHighThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_getCannyHighThresh")]
		public static int imgproc_GeneralizedHough_getCannyHighThresh(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_getCannyHighThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHough_setMinDist, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setMinDist")]
		public static void imgproc_GeneralizedHough_setMinDist(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setMinDist(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_getMinDist, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_getMinDist")]
		public static double imgproc_GeneralizedHough_getMinDist(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_getMinDist(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHough_setDp, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setDp")]
		public static void imgproc_GeneralizedHough_setDp(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setDp(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_getDp, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_getDp")]
		public static double imgproc_GeneralizedHough_getDp(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_getDp(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHough_setMaxBufferSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_setMaxBufferSize")]
		public static void imgproc_GeneralizedHough_setMaxBufferSize(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_setMaxBufferSize(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHough_getMaxBufferSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHough_getMaxBufferSize")]
		public static int imgproc_GeneralizedHough_getMaxBufferSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHough_getMaxBufferSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_createGeneralizedHoughBallard, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_createGeneralizedHoughBallard")]
		public static global::System.IntPtr imgproc_createGeneralizedHoughBallard()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_createGeneralizedHoughBallard();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_GeneralizedHoughBallard_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_GeneralizedHoughBallard_get")]
		public static global::System.IntPtr imgproc_Ptr_GeneralizedHoughBallard_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_GeneralizedHoughBallard_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_GeneralizedHoughBallard_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_GeneralizedHoughBallard_delete")]
		public static void imgproc_Ptr_GeneralizedHoughBallard_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_GeneralizedHoughBallard_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughBallard_setLevels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughBallard_setLevels")]
		public static void imgproc_GeneralizedHoughBallard_setLevels(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughBallard_setLevels(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughBallard_getLevels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughBallard_getLevels")]
		public static int imgproc_GeneralizedHoughBallard_getLevels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughBallard_getLevels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughBallard_setVotesThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughBallard_setVotesThreshold")]
		public static void imgproc_GeneralizedHoughBallard_setVotesThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughBallard_setVotesThreshold(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughBallard_getVotesThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughBallard_getVotesThreshold")]
		public static int imgproc_GeneralizedHoughBallard_getVotesThreshold(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughBallard_getVotesThreshold(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_createGeneralizedHoughGuil, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_createGeneralizedHoughGuil")]
		public static global::System.IntPtr imgproc_createGeneralizedHoughGuil()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_createGeneralizedHoughGuil();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_GeneralizedHoughGuil_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_GeneralizedHoughGuil_get")]
		public static global::System.IntPtr imgproc_Ptr_GeneralizedHoughGuil_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_GeneralizedHoughGuil_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_GeneralizedHoughGuil_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_GeneralizedHoughGuil_delete")]
		public static void imgproc_Ptr_GeneralizedHoughGuil_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_GeneralizedHoughGuil_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_setXi, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setXi")]
		public static void imgproc_GeneralizedHoughGuil_setXi(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setXi(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getXi, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getXi")]
		public static double imgproc_GeneralizedHoughGuil_getXi(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getXi(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setLevels, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setLevels")]
		public static void imgproc_GeneralizedHoughGuil_setLevels(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setLevels(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getLevels, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getLevels")]
		public static int imgproc_GeneralizedHoughGuil_getLevels(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getLevels(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setAngleEpsilon, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setAngleEpsilon")]
		public static void imgproc_GeneralizedHoughGuil_setAngleEpsilon(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setAngleEpsilon(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getAngleEpsilon, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getAngleEpsilon")]
		public static double imgproc_GeneralizedHoughGuil_getAngleEpsilon(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getAngleEpsilon(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setMinAngle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setMinAngle")]
		public static void imgproc_GeneralizedHoughGuil_setMinAngle(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setMinAngle(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getMinAngle, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getMinAngle")]
		public static double imgproc_GeneralizedHoughGuil_getMinAngle(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getMinAngle(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setMaxAngle, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setMaxAngle")]
		public static void imgproc_GeneralizedHoughGuil_setMaxAngle(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setMaxAngle(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getMaxAngle, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getMaxAngle")]
		public static double imgproc_GeneralizedHoughGuil_getMaxAngle(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getMaxAngle(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setAngleStep, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setAngleStep")]
		public static void imgproc_GeneralizedHoughGuil_setAngleStep(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setAngleStep(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getAngleStep, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getAngleStep")]
		public static double imgproc_GeneralizedHoughGuil_getAngleStep(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getAngleStep(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setAngleThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setAngleThresh")]
		public static void imgproc_GeneralizedHoughGuil_setAngleThresh(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setAngleThresh(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getAngleThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getAngleThresh")]
		public static int imgproc_GeneralizedHoughGuil_getAngleThresh(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getAngleThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setMinScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setMinScale")]
		public static void imgproc_GeneralizedHoughGuil_setMinScale(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setMinScale(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getMinScale, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getMinScale")]
		public static double imgproc_GeneralizedHoughGuil_getMinScale(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getMinScale(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setMaxScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setMaxScale")]
		public static void imgproc_GeneralizedHoughGuil_setMaxScale(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setMaxScale(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getMaxScale, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getMaxScale")]
		public static double imgproc_GeneralizedHoughGuil_getMaxScale(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getMaxScale(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setScaleStep, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setScaleStep")]
		public static void imgproc_GeneralizedHoughGuil_setScaleStep(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setScaleStep(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getScaleStep, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getScaleStep")]
		public static double imgproc_GeneralizedHoughGuil_getScaleStep(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getScaleStep(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setScaleThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setScaleThresh")]
		public static void imgproc_GeneralizedHoughGuil_setScaleThresh(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setScaleThresh(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getScaleThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getScaleThresh")]
		public static int imgproc_GeneralizedHoughGuil_getScaleThresh(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getScaleThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_GeneralizedHoughGuil_setPosThresh, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_setPosThresh")]
		public static void imgproc_GeneralizedHoughGuil_setPosThresh(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_setPosThresh(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_GeneralizedHoughGuil_getPosThresh, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_GeneralizedHoughGuil_getPosThresh")]
		public static int imgproc_GeneralizedHoughGuil_getPosThresh(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_GeneralizedHoughGuil_getPosThresh(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_new")]
		public static global::System.IntPtr imgproc_LineIterator_new(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					int connectivity, 
					int leftToRight)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_new(
								img, 
								pt1, 
								pt2, 
								connectivity, 
								leftToRight
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_delete")]
		public static void imgproc_LineIterator_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_operatorEntity, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_operatorEntity")]
		public static global::System.IntPtr imgproc_LineIterator_operatorEntity(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_operatorEntity(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_operatorPP, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_operatorPP")]
		public static void imgproc_LineIterator_operatorPP(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_operatorPP(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_pos, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_pos")]
		public static global::OpenCvSharp.Point__OpenCvSharp imgproc_LineIterator_pos(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.Point__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_pos(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_ptr_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_ptr_get")]
		public static global::System.IntPtr imgproc_LineIterator_ptr_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_ptr_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_ptr_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_ptr_set")]
		public static void imgproc_LineIterator_ptr_set(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_ptr_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_ptr0_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_ptr0_get")]
		public static global::System.IntPtr imgproc_LineIterator_ptr0_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_ptr0_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_step_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_step_get")]
		public static int imgproc_LineIterator_step_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_step_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_step_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_step_set")]
		public static void imgproc_LineIterator_step_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_step_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_elemSize_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_elemSize_get")]
		public static int imgproc_LineIterator_elemSize_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_elemSize_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_elemSize_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_elemSize_set")]
		public static void imgproc_LineIterator_elemSize_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_elemSize_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_err_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_err_get")]
		public static int imgproc_LineIterator_err_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_err_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_err_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_err_set")]
		public static void imgproc_LineIterator_err_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_err_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_count_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_count_get")]
		public static int imgproc_LineIterator_count_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_count_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_count_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_count_set")]
		public static void imgproc_LineIterator_count_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_count_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_minusDelta_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_minusDelta_get")]
		public static int imgproc_LineIterator_minusDelta_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_minusDelta_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_minusDelta_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_minusDelta_set")]
		public static void imgproc_LineIterator_minusDelta_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_minusDelta_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_plusDelta_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_plusDelta_get")]
		public static int imgproc_LineIterator_plusDelta_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_plusDelta_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_plusDelta_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_plusDelta_set")]
		public static void imgproc_LineIterator_plusDelta_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_plusDelta_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_minusStep_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_minusStep_get")]
		public static int imgproc_LineIterator_minusStep_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_minusStep_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_minusStep_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_minusStep_set")]
		public static void imgproc_LineIterator_minusStep_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_minusStep_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineIterator_plusStep_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_plusStep_get")]
		public static int imgproc_LineIterator_plusStep_get(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_plusStep_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_LineIterator_plusStep_set, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineIterator_plusStep_set")]
		public static void imgproc_LineIterator_plusStep_set(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineIterator_plusStep_set(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineSegmentDetector_detect_OutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineSegmentDetector_detect_OutputArray")]
		public static void imgproc_LineSegmentDetector_detect_OutputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					global::System.IntPtr width, 
					global::System.IntPtr prec, 
					global::System.IntPtr nfa)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineSegmentDetector_detect_OutputArray(
								obj, 
								image, 
								lines, 
								width, 
								prec, 
								nfa
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineSegmentDetector_detect_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineSegmentDetector_detect_vector")]
		public static void imgproc_LineSegmentDetector_detect_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					global::System.IntPtr width, 
					global::System.IntPtr prec, 
					global::System.IntPtr nfa)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineSegmentDetector_detect_vector(
								obj, 
								image, 
								lines, 
								width, 
								prec, 
								nfa
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineSegmentDetector_drawSegments, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineSegmentDetector_drawSegments")]
		public static void imgproc_LineSegmentDetector_drawSegments(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineSegmentDetector_drawSegments(
								obj, 
								image, 
								lines
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_LineSegmentDetector_compareSegments, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_LineSegmentDetector_compareSegments")]
		public static int imgproc_LineSegmentDetector_compareSegments(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					global::System.IntPtr lines1, 
					global::System.IntPtr lines2, 
					global::System.IntPtr image)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_LineSegmentDetector_compareSegments(
								obj, 
								size, 
								lines1, 
								lines2, 
								image
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_createLineSegmentDetector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_createLineSegmentDetector")]
		public static global::System.IntPtr imgproc_createLineSegmentDetector(
					int refine, 
					double scale, 
					double sigma_scale, 
					double quant, 
					double ang_th, 
					double log_eps, 
					double density_th, 
					int n_bins)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_createLineSegmentDetector(
								refine, 
								scale, 
								sigma_scale, 
								quant, 
								ang_th, 
								log_eps, 
								density_th, 
								n_bins
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Ptr_LineSegmentDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_LineSegmentDetector_delete")]
		public static void imgproc_Ptr_LineSegmentDetector_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_LineSegmentDetector_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Ptr_LineSegmentDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Ptr_LineSegmentDetector_get")]
		public static global::System.IntPtr imgproc_Ptr_LineSegmentDetector_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Ptr_LineSegmentDetector_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_new, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_new")]
		public static global::System.IntPtr imgproc_Subdiv2D_new()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_new();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_new__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_new")]
		public static global::System.IntPtr imgproc_Subdiv2D_new__0(global::OpenCvSharp.Rect__OpenCvSharp rect)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_new__0(rect);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_delete")]
		public static void imgproc_Subdiv2D_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Subdiv2D_initDelaunay, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_initDelaunay")]
		public static void imgproc_Subdiv2D_initDelaunay(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp rect)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_initDelaunay(
								obj, 
								rect
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, imgproc_Subdiv2D_insert, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_insert")]
		public static int imgproc_Subdiv2D_insert(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_insert(
								obj, 
								pt
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_insert__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_insert")]
		public static void imgproc_Subdiv2D_insert__0(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] ptArray, 
					int length)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_ptArray = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (ptArray == null)
					unsafe_ptArray = null;
				else
				{
					if (ptArray != null)
						unsafe_ptArray = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(ptArray.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (ptArray != null)
						for (uint mcgIdx = 0; (mcgIdx < ptArray.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp ptArray
							unsafe_ptArray[mcgIdx] = ptArray[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_insert__0(
									obj, 
									unsafe_ptArray, 
									length
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_ptArray);
			}
		}

		// Signature, imgproc_Subdiv2D_locate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_locate")]
		public static int imgproc_Subdiv2D_locate(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					out int edge, 
					out int vertex)
		{
			// Setup
			int unsafe_edge;
			int unsafe_vertex;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_locate(
								obj, 
								pt, 
								&(unsafe_edge), 
								&(unsafe_vertex)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			vertex = unsafe_vertex;
			edge = unsafe_edge;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_findNearest, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_findNearest")]
		public static int imgproc_Subdiv2D_findNearest(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					out global::OpenCvSharp.Point2f__OpenCvSharp nearestPt)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_nearestPt;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_findNearest(
								obj, 
								pt, 
								&(unsafe_nearestPt)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			nearestPt = unsafe_nearestPt;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_getEdgeList, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getEdgeList")]
		public static void imgproc_Subdiv2D_getEdgeList(
					global::System.IntPtr obj, 
					out global::System.IntPtr edgeList)
		{
			// Setup
			global::System.IntPtr unsafe_edgeList;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getEdgeList(
								obj, 
								&(unsafe_edgeList)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			edgeList = unsafe_edgeList;
			// Return
		}

		// Signature, imgproc_Subdiv2D_getTriangleList, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getTriangleList")]
		public static void imgproc_Subdiv2D_getTriangleList(
					global::System.IntPtr obj, 
					out global::System.IntPtr triangleList)
		{
			// Setup
			global::System.IntPtr unsafe_triangleList;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getTriangleList(
								obj, 
								&(unsafe_triangleList)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			triangleList = unsafe_triangleList;
			// Return
		}

		// Signature, imgproc_Subdiv2D_getVoronoiFacetList, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_int__int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getVoronoiFacetList")]
		public static void imgproc_Subdiv2D_getVoronoiFacetList(
					global::System.IntPtr obj, 
					int[] idx, 
					int idxCount, 
					out global::System.IntPtr facetList, 
					out global::System.IntPtr facetCenters)
		{
			// Setup
			int* unsafe_idx;
			global::System.IntPtr unsafe_facetList;
			global::System.IntPtr unsafe_facetCenters;
			// Marshalling
			fixed (int* pinned_idx = global::McgInterop.McgCoreHelpers.GetArrayForCompat(idx))
			{
				unsafe_idx = (int*)pinned_idx;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getVoronoiFacetList(
									obj, 
									unsafe_idx, 
									idxCount, 
									&(unsafe_facetList), 
									&(unsafe_facetCenters)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				facetCenters = unsafe_facetCenters;
				facetList = unsafe_facetList;
			}
			// Return
		}

		// Signature, imgproc_Subdiv2D_getVoronoiFacetList__0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getVoronoiFacetList")]
		public static void imgproc_Subdiv2D_getVoronoiFacetList__0(
					global::System.IntPtr obj, 
					global::System.IntPtr idx, 
					int idxCount, 
					out global::System.IntPtr facetList, 
					out global::System.IntPtr facetCenters)
		{
			// Setup
			global::System.IntPtr unsafe_facetList;
			global::System.IntPtr unsafe_facetCenters;
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getVoronoiFacetList__0(
								obj, 
								idx, 
								idxCount, 
								&(unsafe_facetList), 
								&(unsafe_facetCenters)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			facetCenters = unsafe_facetCenters;
			facetList = unsafe_facetList;
			// Return
		}

		// Signature, imgproc_Subdiv2D_getVertex, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getVertex")]
		public static global::OpenCvSharp.Point2f__OpenCvSharp imgproc_Subdiv2D_getVertex(
					global::System.IntPtr obj, 
					int vertex, 
					out int firstEdge)
		{
			// Setup
			int unsafe_firstEdge;
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getVertex(
								obj, 
								vertex, 
								&(unsafe_firstEdge)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			firstEdge = unsafe_firstEdge;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_getEdge, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_getEdge")]
		public static int imgproc_Subdiv2D_getEdge(
					global::System.IntPtr obj, 
					int edge, 
					int nextEdgeType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_getEdge(
								obj, 
								edge, 
								nextEdgeType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_nextEdge, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_nextEdge")]
		public static int imgproc_Subdiv2D_nextEdge(
					global::System.IntPtr obj, 
					int edge)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_nextEdge(
								obj, 
								edge
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_rotateEdge, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_rotateEdge")]
		public static int imgproc_Subdiv2D_rotateEdge(
					global::System.IntPtr obj, 
					int edge, 
					int rotate)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_rotateEdge(
								obj, 
								edge, 
								rotate
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_symEdge, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_symEdge")]
		public static int imgproc_Subdiv2D_symEdge(
					global::System.IntPtr obj, 
					int edge)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_symEdge(
								obj, 
								edge
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_edgeOrg, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_edgeOrg")]
		public static int imgproc_Subdiv2D_edgeOrg(
					global::System.IntPtr obj, 
					int edge, 
					out global::OpenCvSharp.Point2f__OpenCvSharp orgpt)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_orgpt;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_edgeOrg(
								obj, 
								edge, 
								&(unsafe_orgpt)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			orgpt = unsafe_orgpt;
			// Return
			return unsafe___value;
		}

		// Signature, imgproc_Subdiv2D_edgeDst, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "imgproc_Subdiv2D_edgeDst")]
		public static int imgproc_Subdiv2D_edgeDst(
					global::System.IntPtr obj, 
					int edge, 
					out global::OpenCvSharp.Point2f__OpenCvSharp dstpt)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp unsafe_dstpt;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.imgproc_Subdiv2D_edgeDst(
								obj, 
								edge, 
								&(unsafe_dstpt)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			dstpt = unsafe_dstpt;
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setTrainMethod, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setTrainMethod")]
		public static void ml_ANN_MLP_setTrainMethod(
					global::System.IntPtr obj, 
					int method, 
					double param1, 
					double param2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setTrainMethod(
								obj, 
								method, 
								param1, 
								param2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getTrainMethod, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getTrainMethod")]
		public static int ml_ANN_MLP_getTrainMethod(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getTrainMethod(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setActivationFunction, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setActivationFunction")]
		public static void ml_ANN_MLP_setActivationFunction(
					global::System.IntPtr obj, 
					int type, 
					double param1, 
					double param2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setActivationFunction(
								obj, 
								type, 
								param1, 
								param2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_setLayerSizes, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setLayerSizes")]
		public static void ml_ANN_MLP_setLayerSizes(
					global::System.IntPtr obj, 
					global::System.IntPtr layerSizes)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setLayerSizes(
								obj, 
								layerSizes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getLayerSizes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getLayerSizes")]
		public static global::System.IntPtr ml_ANN_MLP_getLayerSizes(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getLayerSizes(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_getTermCriteria, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getTermCriteria")]
		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_ANN_MLP_getTermCriteria(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.TermCriteria__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getTermCriteria(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setTermCriteria, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setTermCriteria")]
		public static void ml_ANN_MLP_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setTermCriteria(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getBackpropWeightScale, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getBackpropWeightScale")]
		public static double ml_ANN_MLP_getBackpropWeightScale(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getBackpropWeightScale(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setBackpropWeightScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setBackpropWeightScale")]
		public static void ml_ANN_MLP_setBackpropWeightScale(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setBackpropWeightScale(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getBackpropMomentumScale, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getBackpropMomentumScale")]
		public static double ml_ANN_MLP_getBackpropMomentumScale(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getBackpropMomentumScale(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setBackpropMomentumScale, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setBackpropMomentumScale")]
		public static void ml_ANN_MLP_setBackpropMomentumScale(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setBackpropMomentumScale(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getRpropDW0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getRpropDW0")]
		public static double ml_ANN_MLP_getRpropDW0(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getRpropDW0(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setRpropDW0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setRpropDW0")]
		public static void ml_ANN_MLP_setRpropDW0(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setRpropDW0(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getRpropDWPlus, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getRpropDWPlus")]
		public static double ml_ANN_MLP_getRpropDWPlus(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getRpropDWPlus(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setRpropDWPlus, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setRpropDWPlus")]
		public static void ml_ANN_MLP_setRpropDWPlus(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setRpropDWPlus(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getRpropDWMinus, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getRpropDWMinus")]
		public static double ml_ANN_MLP_getRpropDWMinus(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getRpropDWMinus(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setRpropDWMinus, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setRpropDWMinus")]
		public static void ml_ANN_MLP_setRpropDWMinus(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setRpropDWMinus(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getRpropDWMin, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getRpropDWMin")]
		public static double ml_ANN_MLP_getRpropDWMin(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getRpropDWMin(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setRpropDWMin, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setRpropDWMin")]
		public static void ml_ANN_MLP_setRpropDWMin(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setRpropDWMin(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getRpropDWMax, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getRpropDWMax")]
		public static double ml_ANN_MLP_getRpropDWMax(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getRpropDWMax(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_setRpropDWMax, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_setRpropDWMax")]
		public static void ml_ANN_MLP_setRpropDWMax(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_setRpropDWMax(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_ANN_MLP_getWeights, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_getWeights")]
		public static global::System.IntPtr ml_ANN_MLP_getWeights(
					global::System.IntPtr obj, 
					int layerIdx)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_getWeights(
								obj, 
								layerIdx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_ANN_MLP_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_ANN_MLP_create")]
		public static global::System.IntPtr ml_ANN_MLP_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_ANN_MLP_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_ANN_MLP_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_ANN_MLP_delete")]
		public static void ml_Ptr_ANN_MLP_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_ANN_MLP_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_ANN_MLP_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_ANN_MLP_get")]
		public static global::System.IntPtr ml_Ptr_ANN_MLP_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_ANN_MLP_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Boost_getBoostType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_getBoostType")]
		public static int ml_Boost_getBoostType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_getBoostType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Boost_setBoostType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_setBoostType")]
		public static void ml_Boost_setBoostType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_setBoostType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Boost_getWeakCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_getWeakCount")]
		public static int ml_Boost_getWeakCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_getWeakCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Boost_setWeakCount, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_setWeakCount")]
		public static void ml_Boost_setWeakCount(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_setWeakCount(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Boost_getWeightTrimRate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_getWeightTrimRate")]
		public static double ml_Boost_getWeightTrimRate(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_getWeightTrimRate(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Boost_setWeightTrimRate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_setWeightTrimRate")]
		public static void ml_Boost_setWeightTrimRate(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_setWeightTrimRate(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Boost_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Boost_create")]
		public static global::System.IntPtr ml_Boost_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Boost_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_Boost_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_Boost_delete")]
		public static void ml_Ptr_Boost_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_Boost_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_Boost_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_Boost_get")]
		public static global::System.IntPtr ml_Ptr_Boost_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_Boost_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_getMaxCategories, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getMaxCategories")]
		public static int ml_DTrees_getMaxCategories(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getMaxCategories(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setMaxCategories, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setMaxCategories")]
		public static void ml_DTrees_setMaxCategories(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setMaxCategories(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getMaxDepth, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getMaxDepth")]
		public static int ml_DTrees_getMaxDepth(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getMaxDepth(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setMaxDepth, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setMaxDepth")]
		public static void ml_DTrees_setMaxDepth(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setMaxDepth(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getMinSampleCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getMinSampleCount")]
		public static int ml_DTrees_getMinSampleCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getMinSampleCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setMinSampleCount, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setMinSampleCount")]
		public static void ml_DTrees_setMinSampleCount(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setMinSampleCount(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getCVFolds, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getCVFolds")]
		public static int ml_DTrees_getCVFolds(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getCVFolds(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setCVFolds, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setCVFolds")]
		public static void ml_DTrees_setCVFolds(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setCVFolds(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getUseSurrogates, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getUseSurrogates")]
		public static int ml_DTrees_getUseSurrogates(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getUseSurrogates(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setUseSurrogates, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setUseSurrogates")]
		public static void ml_DTrees_setUseSurrogates(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setUseSurrogates(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getUse1SERule, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getUse1SERule")]
		public static int ml_DTrees_getUse1SERule(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getUse1SERule(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setUse1SERule, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setUse1SERule")]
		public static void ml_DTrees_setUse1SERule(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setUse1SERule(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getTruncatePrunedTree, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getTruncatePrunedTree")]
		public static int ml_DTrees_getTruncatePrunedTree(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getTruncatePrunedTree(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setTruncatePrunedTree, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setTruncatePrunedTree")]
		public static void ml_DTrees_setTruncatePrunedTree(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setTruncatePrunedTree(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getRegressionAccuracy, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getRegressionAccuracy")]
		public static float ml_DTrees_getRegressionAccuracy(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getRegressionAccuracy(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setRegressionAccuracy, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setRegressionAccuracy")]
		public static void ml_DTrees_setRegressionAccuracy(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setRegressionAccuracy(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getPriors, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getPriors")]
		public static global::System.IntPtr ml_DTrees_getPriors(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getPriors(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_DTrees_setPriors, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_setPriors")]
		public static void ml_DTrees_setPriors(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_setPriors(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getRoots, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getRoots")]
		public static void ml_DTrees_getRoots(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getRoots(
								obj, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getNodes, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getNodes")]
		public static void ml_DTrees_getNodes(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getNodes(
								obj, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getSplits, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getSplits")]
		public static void ml_DTrees_getSplits(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getSplits(
								obj, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_getSubsets, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_getSubsets")]
		public static void ml_DTrees_getSubsets(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_getSubsets(
								obj, 
								result
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_DTrees_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_DTrees_create")]
		public static global::System.IntPtr ml_DTrees_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_DTrees_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_DTrees_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_DTrees_delete")]
		public static void ml_Ptr_DTrees_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_DTrees_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_DTrees_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_DTrees_get")]
		public static global::System.IntPtr ml_Ptr_DTrees_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_DTrees_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_getClustersNumber, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getClustersNumber")]
		public static int ml_EM_getClustersNumber(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getClustersNumber(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_setClustersNumber, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_setClustersNumber")]
		public static void ml_EM_setClustersNumber(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_setClustersNumber(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_EM_getCovarianceMatrixType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getCovarianceMatrixType")]
		public static int ml_EM_getCovarianceMatrixType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getCovarianceMatrixType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_setCovarianceMatrixType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_setCovarianceMatrixType")]
		public static void ml_EM_setCovarianceMatrixType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_setCovarianceMatrixType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_EM_getTermCriteria, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getTermCriteria")]
		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_EM_getTermCriteria(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.TermCriteria__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getTermCriteria(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_setTermCriteria, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_setTermCriteria")]
		public static void ml_EM_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_setTermCriteria(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_EM_getWeights, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getWeights")]
		public static global::System.IntPtr ml_EM_getWeights(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getWeights(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_getMeans, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getMeans")]
		public static global::System.IntPtr ml_EM_getMeans(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getMeans(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_getCovs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_getCovs")]
		public static void ml_EM_getCovs(
					global::System.IntPtr obj, 
					global::System.IntPtr covs)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_getCovs(
								obj, 
								covs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_EM_predict2, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Vec2d__OpenCvSharp__OpenCvSharp__Vec2d__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_predict2")]
		public static global::OpenCvSharp.Vec2d__OpenCvSharp ml_EM_predict2(
					global::System.IntPtr model, 
					global::System.IntPtr sample, 
					global::System.IntPtr probs)
		{
			// Setup
			global::OpenCvSharp.Vec2d__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_predict2(
								model, 
								sample, 
								probs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_trainEM, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_trainEM")]
		public static int ml_EM_trainEM(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_trainEM(
								obj, 
								samples, 
								logLikelihoods, 
								labels, 
								probs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_trainE, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_trainE")]
		public static int ml_EM_trainE(
					global::System.IntPtr model, 
					global::System.IntPtr samples, 
					global::System.IntPtr means0, 
					global::System.IntPtr covs0, 
					global::System.IntPtr weights0, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_trainE(
								model, 
								samples, 
								means0, 
								covs0, 
								weights0, 
								logLikelihoods, 
								labels, 
								probs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_trainM, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_trainM")]
		public static int ml_EM_trainM(
					global::System.IntPtr model, 
					global::System.IntPtr samples, 
					global::System.IntPtr probs0, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_trainM(
								model, 
								samples, 
								probs0, 
								logLikelihoods, 
								labels, 
								probs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_EM_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_EM_create")]
		public static global::System.IntPtr ml_EM_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_EM_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_EM_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_EM_get")]
		public static global::System.IntPtr ml_Ptr_EM_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_EM_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_EM_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_EM_delete")]
		public static void ml_Ptr_EM_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_EM_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_KNearest_getDefaultK, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_getDefaultK")]
		public static int ml_KNearest_getDefaultK(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_getDefaultK(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_KNearest_setDefaultK, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_setDefaultK")]
		public static void ml_KNearest_setDefaultK(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_setDefaultK(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_KNearest_getIsClassifier, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_getIsClassifier")]
		public static int ml_KNearest_getIsClassifier(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_getIsClassifier(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_KNearest_setIsClassifier, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_setIsClassifier")]
		public static void ml_KNearest_setIsClassifier(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_setIsClassifier(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_KNearest_getEmax, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_getEmax")]
		public static int ml_KNearest_getEmax(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_getEmax(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_KNearest_setEmax, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_setEmax")]
		public static void ml_KNearest_setEmax(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_setEmax(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_KNearest_getAlgorithmType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_getAlgorithmType")]
		public static int ml_KNearest_getAlgorithmType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_getAlgorithmType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_KNearest_setAlgorithmType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_setAlgorithmType")]
		public static void ml_KNearest_setAlgorithmType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_setAlgorithmType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_KNearest_findNearest, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_findNearest")]
		public static float ml_KNearest_findNearest(
					global::System.IntPtr samples, 
					int k, 
					global::System.IntPtr results, 
					global::System.IntPtr neighborResponses, 
					global::System.IntPtr dist)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_findNearest(
								samples, 
								k, 
								results, 
								neighborResponses, 
								dist
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_KNearest_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_KNearest_create")]
		public static global::System.IntPtr ml_KNearest_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_KNearest_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_KNearest_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_KNearest_delete")]
		public static void ml_Ptr_KNearest_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_KNearest_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_KNearest_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_KNearest_get")]
		public static global::System.IntPtr ml_Ptr_KNearest_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_KNearest_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_getLearningRate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getLearningRate")]
		public static double ml_LogisticRegression_getLearningRate(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getLearningRate(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setLearningRate, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setLearningRate")]
		public static void ml_LogisticRegression_setLearningRate(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setLearningRate(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_getIterations, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getIterations")]
		public static int ml_LogisticRegression_getIterations(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getIterations(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setIterations, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setIterations")]
		public static void ml_LogisticRegression_setIterations(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setIterations(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_getRegularization, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getRegularization")]
		public static int ml_LogisticRegression_getRegularization(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getRegularization(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setRegularization, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setRegularization")]
		public static void ml_LogisticRegression_setRegularization(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setRegularization(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_getTrainMethod, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getTrainMethod")]
		public static int ml_LogisticRegression_getTrainMethod(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getTrainMethod(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setTrainMethod, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setTrainMethod")]
		public static void ml_LogisticRegression_setTrainMethod(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setTrainMethod(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_getMiniBatchSize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getMiniBatchSize")]
		public static int ml_LogisticRegression_getMiniBatchSize(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getMiniBatchSize(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setMiniBatchSize, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setMiniBatchSize")]
		public static void ml_LogisticRegression_setMiniBatchSize(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setMiniBatchSize(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_getTermCriteria, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_getTermCriteria")]
		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_LogisticRegression_getTermCriteria(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.TermCriteria__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_getTermCriteria(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_setTermCriteria, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_setTermCriteria")]
		public static void ml_LogisticRegression_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_setTermCriteria(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_LogisticRegression_predict, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_predict")]
		public static float ml_LogisticRegression_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr results, 
					int flags)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_predict(
								obj, 
								samples, 
								results, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_get_learnt_thetas, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_get_learnt_thetas")]
		public static global::System.IntPtr ml_LogisticRegression_get_learnt_thetas(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_get_learnt_thetas(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_LogisticRegression_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_LogisticRegression_create")]
		public static global::System.IntPtr ml_LogisticRegression_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_LogisticRegression_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_LogisticRegression_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_LogisticRegression_delete")]
		public static void ml_Ptr_LogisticRegression_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_LogisticRegression_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_LogisticRegression_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_LogisticRegression_get")]
		public static global::System.IntPtr ml_Ptr_LogisticRegression_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_LogisticRegression_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_NormalBayesClassifier_predictProb, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_NormalBayesClassifier_predictProb")]
		public static float ml_NormalBayesClassifier_predictProb(
					global::System.IntPtr obj, 
					global::System.IntPtr inputs, 
					global::System.IntPtr samples, 
					global::System.IntPtr outputProbs, 
					int flags)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_NormalBayesClassifier_predictProb(
								obj, 
								inputs, 
								samples, 
								outputProbs, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_NormalBayesClassifier_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_NormalBayesClassifier_create")]
		public static global::System.IntPtr ml_NormalBayesClassifier_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_NormalBayesClassifier_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_NormalBayesClassifier_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_NormalBayesClassifier_delete")]
		public static void ml_Ptr_NormalBayesClassifier_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_NormalBayesClassifier_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_NormalBayesClassifier_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_NormalBayesClassifier_get")]
		public static global::System.IntPtr ml_Ptr_NormalBayesClassifier_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_NormalBayesClassifier_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_RTrees_getCalculateVarImportance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_getCalculateVarImportance")]
		public static int ml_RTrees_getCalculateVarImportance(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_getCalculateVarImportance(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_RTrees_setCalculateVarImportance, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_setCalculateVarImportance")]
		public static void ml_RTrees_setCalculateVarImportance(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_setCalculateVarImportance(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_RTrees_getActiveVarCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_getActiveVarCount")]
		public static int ml_RTrees_getActiveVarCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_getActiveVarCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_RTrees_setActiveVarCount, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_setActiveVarCount")]
		public static void ml_RTrees_setActiveVarCount(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_setActiveVarCount(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_RTrees_getTermCriteria, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_getTermCriteria")]
		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_RTrees_getTermCriteria(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.TermCriteria__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_getTermCriteria(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_RTrees_setTermCriteria, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_setTermCriteria")]
		public static void ml_RTrees_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_setTermCriteria(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_RTrees_getVarImportance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_getVarImportance")]
		public static global::System.IntPtr ml_RTrees_getVarImportance(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_getVarImportance(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_RTrees_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_RTrees_create")]
		public static global::System.IntPtr ml_RTrees_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_RTrees_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_RTrees_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_RTrees_delete")]
		public static void ml_Ptr_RTrees_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_RTrees_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_RTrees_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_RTrees_get")]
		public static global::System.IntPtr ml_Ptr_RTrees_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_RTrees_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_clear, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_clear")]
		public static void ml_StatModel_clear(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_clear(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_StatModel_getVarCount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_getVarCount")]
		public static int ml_StatModel_getVarCount(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_getVarCount(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_empty, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_empty")]
		public static int ml_StatModel_empty(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_empty(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_isTrained, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_isTrained")]
		public static int ml_StatModel_isTrained(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_isTrained(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_isClassifier, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_isClassifier")]
		public static int ml_StatModel_isClassifier(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_isClassifier(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_train1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_train1")]
		public static int ml_StatModel_train1(
					global::System.IntPtr obj, 
					global::System.IntPtr trainData, 
					int flags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_train1(
								obj, 
								trainData, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_train2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_train2")]
		public static int ml_StatModel_train2(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					int layout, 
					global::System.IntPtr responses)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_train2(
								obj, 
								samples, 
								layout, 
								responses
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_calcError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_calcError")]
		public static float ml_StatModel_calcError(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					int test, 
					global::System.IntPtr resp)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_calcError(
								obj, 
								data, 
								test, 
								resp
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_predict, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_predict")]
		public static float ml_StatModel_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr results, 
					int flags)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_predict(
								obj, 
								samples, 
								results, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_StatModel_save, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_StatModel_save")]
		public static void ml_StatModel_save(
					global::System.IntPtr obj, 
					string filename)
		{
			// Setup
			byte* unsafe_filename = default(byte*);
			try
			{
				// Marshalling
				unsafe_filename = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(filename, true, false);
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.ml_StatModel_save(
									obj, 
									unsafe_filename
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_filename);
			}
		}

		// Signature, ml_SVM_getType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getType")]
		public static int ml_SVM_getType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setType, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setType")]
		public static void ml_SVM_setType(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setType(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getGamma, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getGamma")]
		public static double ml_SVM_getGamma(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getGamma(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setGamma, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setGamma")]
		public static void ml_SVM_setGamma(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setGamma(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getCoef0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getCoef0")]
		public static double ml_SVM_getCoef0(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getCoef0(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setCoef0, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setCoef0")]
		public static void ml_SVM_setCoef0(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setCoef0(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getDegree, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getDegree")]
		public static double ml_SVM_getDegree(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getDegree(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setDegree, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setDegree")]
		public static void ml_SVM_setDegree(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setDegree(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getC, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getC")]
		public static double ml_SVM_getC(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getC(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setC, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setC")]
		public static void ml_SVM_setC(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setC(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getP, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getP")]
		public static double ml_SVM_getP(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getP(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setP, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setP")]
		public static void ml_SVM_setP(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setP(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getNu, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getNu")]
		public static double ml_SVM_getNu(global::System.IntPtr obj)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getNu(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setNu, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setNu")]
		public static void ml_SVM_setNu(
					global::System.IntPtr obj, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setNu(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getClassWeights, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getClassWeights")]
		public static global::System.IntPtr ml_SVM_getClassWeights(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getClassWeights(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setClassWeights, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setClassWeights")]
		public static void ml_SVM_setClassWeights(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setClassWeights(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getTermCriteria, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getTermCriteria")]
		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_SVM_getTermCriteria(global::System.IntPtr obj)
		{
			// Setup
			global::OpenCvSharp.TermCriteria__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getTermCriteria(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setTermCriteria, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setTermCriteria")]
		public static void ml_SVM_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setTermCriteria(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getKernelType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getKernelType")]
		public static int ml_SVM_getKernelType(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getKernelType(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_setKernel, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_setKernel")]
		public static void ml_SVM_setKernel(
					global::System.IntPtr obj, 
					int kernelType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_setKernel(
								obj, 
								kernelType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_SVM_getSupportVectors, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getSupportVectors")]
		public static global::System.IntPtr ml_SVM_getSupportVectors(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getSupportVectors(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_getDecisionFunction, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getDecisionFunction")]
		public static double ml_SVM_getDecisionFunction(
					global::System.IntPtr obj, 
					int i, 
					global::System.IntPtr alpha, 
					global::System.IntPtr svidx)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getDecisionFunction(
								obj, 
								i, 
								alpha, 
								svidx
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_getDefaultGrid, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_ML_ParamGrid__OpenCvSharp__OpenCvSharp_ML__ParamGrid__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_getDefaultGrid")]
		public static global::OpenCvSharp.ML.ParamGrid__OpenCvSharp ml_SVM_getDefaultGrid(int paramId)
		{
			// Setup
			global::OpenCvSharp.ML.ParamGrid__OpenCvSharp unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_getDefaultGrid(paramId);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_SVM_create, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_SVM_create")]
		public static global::System.IntPtr ml_SVM_create()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_SVM_create();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ml_Ptr_SVM_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_SVM_delete")]
		public static void ml_Ptr_SVM_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_SVM_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ml_Ptr_SVM_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ml_Ptr_SVM_get")]
		public static global::System.IntPtr ml_Ptr_SVM_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ml_Ptr_SVM_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, photo_inpaint, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_inpaint")]
		public static void photo_inpaint(
					global::System.IntPtr src, 
					global::System.IntPtr inpaintMask, 
					global::System.IntPtr dst, 
					double inpaintRadius, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_inpaint(
								src, 
								inpaintMask, 
								dst, 
								inpaintRadius, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_fastNlMeansDenoising, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_fastNlMeansDenoising")]
		public static void photo_fastNlMeansDenoising(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float h, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_fastNlMeansDenoising(
								src, 
								dst, 
								h, 
								templateWindowSize, 
								searchWindowSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_fastNlMeansDenoisingColored, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_fastNlMeansDenoisingColored")]
		public static void photo_fastNlMeansDenoisingColored(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float h, 
					float hColor, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_fastNlMeansDenoisingColored(
								src, 
								dst, 
								h, 
								hColor, 
								templateWindowSize, 
								searchWindowSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_fastNlMeansDenoisingMulti, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_fastNlMeansDenoisingMulti")]
		public static void photo_fastNlMeansDenoisingMulti(
					global::System.IntPtr[] srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					int imgToDenoiseIndex, 
					int temporalWindowSize, 
					float h, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			// Setup
			global::System.IntPtr* unsafe_srcImgs;
			// Marshalling
			fixed (global::System.IntPtr* pinned_srcImgs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(srcImgs))
			{
				unsafe_srcImgs = (global::System.IntPtr*)pinned_srcImgs;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.photo_fastNlMeansDenoisingMulti(
									unsafe_srcImgs, 
									srcImgsLength, 
									dst, 
									imgToDenoiseIndex, 
									temporalWindowSize, 
									h, 
									templateWindowSize, 
									searchWindowSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, photo_fastNlMeansDenoisingColoredMulti, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_fastNlMeansDenoisingColoredMulti")]
		public static void photo_fastNlMeansDenoisingColoredMulti(
					global::System.IntPtr[] srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					int imgToDenoiseIndex, 
					int temporalWindowSize, 
					float h, 
					float hColor, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			// Setup
			global::System.IntPtr* unsafe_srcImgs;
			// Marshalling
			fixed (global::System.IntPtr* pinned_srcImgs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(srcImgs))
			{
				unsafe_srcImgs = (global::System.IntPtr*)pinned_srcImgs;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.photo_fastNlMeansDenoisingColoredMulti(
									unsafe_srcImgs, 
									srcImgsLength, 
									dst, 
									imgToDenoiseIndex, 
									temporalWindowSize, 
									h, 
									hColor, 
									templateWindowSize, 
									searchWindowSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, photo_denoise_TVL1, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_denoise_TVL1")]
		public static void photo_denoise_TVL1(
					global::System.IntPtr[] observations, 
					int observationsSize, 
					global::System.IntPtr result, 
					double lambda, 
					int niters)
		{
			// Setup
			global::System.IntPtr* unsafe_observations;
			// Marshalling
			fixed (global::System.IntPtr* pinned_observations = global::McgInterop.McgCoreHelpers.GetArrayForCompat(observations))
			{
				unsafe_observations = (global::System.IntPtr*)pinned_observations;
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.photo_denoise_TVL1(
									unsafe_observations, 
									observationsSize, 
									result, 
									lambda, 
									niters
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, photo_decolor, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_decolor")]
		public static void photo_decolor(
					global::System.IntPtr src, 
					global::System.IntPtr grayscale, 
					global::System.IntPtr color_boost)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_decolor(
								src, 
								grayscale, 
								color_boost
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_seamlessClone, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point__OpenCvSharp__OpenCvSharp__Point__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_seamlessClone")]
		public static void photo_seamlessClone(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Point__OpenCvSharp p, 
					global::System.IntPtr blend, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_seamlessClone(
								src, 
								dst, 
								mask, 
								p, 
								blend, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_colorChange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_colorChange")]
		public static void photo_colorChange(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float red_mul, 
					float green_mul, 
					float blue_mul)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_colorChange(
								src, 
								mask, 
								dst, 
								red_mul, 
								green_mul, 
								blue_mul
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_illuminationChange, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_illuminationChange")]
		public static void photo_illuminationChange(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float alpha, 
					float beta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_illuminationChange(
								src, 
								mask, 
								dst, 
								alpha, 
								beta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_textureFlattening, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_textureFlattening")]
		public static void photo_textureFlattening(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float low_threshold, 
					float high_threshold, 
					int kernel_size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_textureFlattening(
								src, 
								mask, 
								dst, 
								low_threshold, 
								high_threshold, 
								kernel_size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_edgePreservingFilter, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_edgePreservingFilter")]
		public static void photo_edgePreservingFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					float sigma_s, 
					float sigma_r)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_edgePreservingFilter(
								src, 
								dst, 
								flags, 
								sigma_s, 
								sigma_r
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_detailEnhance, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_detailEnhance")]
		public static void photo_detailEnhance(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float sigma_s, 
					float sigma_r)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_detailEnhance(
								src, 
								dst, 
								sigma_s, 
								sigma_r
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_pencilSketch, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_pencilSketch")]
		public static void photo_pencilSketch(
					global::System.IntPtr src, 
					global::System.IntPtr dst1, 
					global::System.IntPtr dst2, 
					float sigma_s, 
					float sigma_r, 
					float shade_factor)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_pencilSketch(
								src, 
								dst1, 
								dst2, 
								sigma_s, 
								sigma_r, 
								shade_factor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_stylization, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_stylization")]
		public static void photo_stylization(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float sigma_s, 
					float sigma_r)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_stylization(
								src, 
								dst, 
								sigma_s, 
								sigma_r
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_createCalibrateDebevec, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_createCalibrateDebevec")]
		public static global::System.IntPtr photo_createCalibrateDebevec(
					int samples, 
					float lambda, 
					int random)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.photo_createCalibrateDebevec(
								samples, 
								lambda, 
								random
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, photo_createCalibrateRobertson, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_createCalibrateRobertson")]
		public static global::System.IntPtr photo_createCalibrateRobertson(
					int maxIter, 
					float threshold)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.photo_createCalibrateRobertson(
								maxIter, 
								threshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, photo_Ptr_CalibrateDebevec_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_Ptr_CalibrateDebevec_delete")]
		public static void photo_Ptr_CalibrateDebevec_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_Ptr_CalibrateDebevec_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_Ptr_CalibrateRobertson_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_Ptr_CalibrateRobertson_delete")]
		public static void photo_Ptr_CalibrateRobertson_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.photo_Ptr_CalibrateRobertson_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, photo_Ptr_CalibrateDebevec_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_Ptr_CalibrateDebevec_get")]
		public static global::System.IntPtr photo_Ptr_CalibrateDebevec_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.photo_Ptr_CalibrateDebevec_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, photo_Ptr_CalibrateRobertson_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_Ptr_CalibrateRobertson_get")]
		public static global::System.IntPtr photo_Ptr_CalibrateRobertson_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.photo_Ptr_CalibrateRobertson_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, photo_CalibrateCRF_process, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_float__float *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "photo_CalibrateCRF_process")]
		public static void photo_CalibrateCRF_process(
					global::System.IntPtr obj, 
					global::System.IntPtr[] srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					float[] times)
		{
			// Setup
			global::System.IntPtr* unsafe_srcImgs;
			float* unsafe_times;
			// Marshalling
			fixed (global::System.IntPtr* pinned_srcImgs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(srcImgs))
			{
				unsafe_srcImgs = (global::System.IntPtr*)pinned_srcImgs;
				fixed (float* pinned_times = global::McgInterop.McgCoreHelpers.GetArrayForCompat(times))
				{
					unsafe_times = (float*)pinned_times;
					// Call to native method
					global::McgInterop.OpenCvSharpExtern_PInvokes.photo_CalibrateCRF_process(
										obj, 
										unsafe_srcImgs, 
										srcImgsLength, 
										dst, 
										unsafe_times
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
		}

		// Signature, shape_ShapeDistanceExtractor_computeDistance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeDistanceExtractor_computeDistance")]
		public static float shape_ShapeDistanceExtractor_computeDistance(
					global::System.IntPtr obj, 
					global::System.IntPtr contour1, 
					global::System.IntPtr contour2)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeDistanceExtractor_computeDistance(
								obj, 
								contour1, 
								contour2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_Ptr_ShapeContextDistanceExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_Ptr_ShapeContextDistanceExtractor_delete")]
		public static void shape_Ptr_ShapeContextDistanceExtractor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_Ptr_ShapeContextDistanceExtractor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_Ptr_ShapeContextDistanceExtractor_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_Ptr_ShapeContextDistanceExtractor_get")]
		public static global::System.IntPtr shape_Ptr_ShapeContextDistanceExtractor_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_Ptr_ShapeContextDistanceExtractor_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setAngularBins, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setAngularBins")]
		public static void shape_ShapeContextDistanceExtractor_setAngularBins(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setAngularBins(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getAngularBins, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getAngularBins")]
		public static int shape_ShapeContextDistanceExtractor_getAngularBins(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getAngularBins(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setRadialBins, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setRadialBins")]
		public static void shape_ShapeContextDistanceExtractor_setRadialBins(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setRadialBins(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getRadialBins, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getRadialBins")]
		public static int shape_ShapeContextDistanceExtractor_getRadialBins(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getRadialBins(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setInnerRadius, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setInnerRadius")]
		public static void shape_ShapeContextDistanceExtractor_setInnerRadius(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setInnerRadius(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getInnerRadius, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getInnerRadius")]
		public static float shape_ShapeContextDistanceExtractor_getInnerRadius(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getInnerRadius(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setOuterRadius, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setOuterRadius")]
		public static void shape_ShapeContextDistanceExtractor_setOuterRadius(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setOuterRadius(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getOuterRadius, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getOuterRadius")]
		public static float shape_ShapeContextDistanceExtractor_getOuterRadius(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getOuterRadius(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setRotationInvariant, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setRotationInvariant")]
		public static void shape_ShapeContextDistanceExtractor_setRotationInvariant(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setRotationInvariant(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getRotationInvariant, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getRotationInvariant")]
		public static int shape_ShapeContextDistanceExtractor_getRotationInvariant(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getRotationInvariant(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setShapeContextWeight, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setShapeContextWeight")]
		public static void shape_ShapeContextDistanceExtractor_setShapeContextWeight(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setShapeContextWeight(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getShapeContextWeight, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getShapeContextWeight")]
		public static float shape_ShapeContextDistanceExtractor_getShapeContextWeight(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getShapeContextWeight(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setImageAppearanceWeight, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setImageAppearanceWeight")]
		public static void shape_ShapeContextDistanceExtractor_setImageAppearanceWeight(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setImageAppearanceWeight(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getImageAppearanceWeight, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getImageAppearanceWeight")]
		public static float shape_ShapeContextDistanceExtractor_getImageAppearanceWeight(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getImageAppearanceWeight(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setBendingEnergyWeight, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setBendingEnergyWeight")]
		public static void shape_ShapeContextDistanceExtractor_setBendingEnergyWeight(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setBendingEnergyWeight(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getBendingEnergyWeight, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getBendingEnergyWeight")]
		public static float shape_ShapeContextDistanceExtractor_getBendingEnergyWeight(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getBendingEnergyWeight(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setImages, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setImages")]
		public static void shape_ShapeContextDistanceExtractor_setImages(
					global::System.IntPtr obj, 
					global::System.IntPtr image1, 
					global::System.IntPtr image2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setImages(
								obj, 
								image1, 
								image2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getImages, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getImages")]
		public static void shape_ShapeContextDistanceExtractor_getImages(
					global::System.IntPtr obj, 
					global::System.IntPtr image1, 
					global::System.IntPtr image2)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getImages(
								obj, 
								image1, 
								image2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_setIterations, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setIterations")]
		public static void shape_ShapeContextDistanceExtractor_setIterations(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setIterations(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getIterations, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getIterations")]
		public static int shape_ShapeContextDistanceExtractor_getIterations(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getIterations(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_ShapeContextDistanceExtractor_setStdDev, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_setStdDev")]
		public static void shape_ShapeContextDistanceExtractor_setStdDev(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_setStdDev(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_ShapeContextDistanceExtractor_getStdDev, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_ShapeContextDistanceExtractor_getStdDev")]
		public static float shape_ShapeContextDistanceExtractor_getStdDev(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_ShapeContextDistanceExtractor_getStdDev(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_createShapeContextDistanceExtractor, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_createShapeContextDistanceExtractor")]
		public static global::System.IntPtr shape_createShapeContextDistanceExtractor(
					int nAngularBins, 
					int nRadialBins, 
					float innerRadius, 
					float outerRadius, 
					int iterations)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_createShapeContextDistanceExtractor(
								nAngularBins, 
								nRadialBins, 
								innerRadius, 
								outerRadius, 
								iterations
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_Ptr_HausdorffDistanceExtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_Ptr_HausdorffDistanceExtractor_delete")]
		public static void shape_Ptr_HausdorffDistanceExtractor_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_Ptr_HausdorffDistanceExtractor_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_Ptr_HausdorffDistanceExtractor_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_Ptr_HausdorffDistanceExtractor_get")]
		public static global::System.IntPtr shape_Ptr_HausdorffDistanceExtractor_get(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_Ptr_HausdorffDistanceExtractor_get(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_HausdorffDistanceExtractor_setDistanceFlag, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_HausdorffDistanceExtractor_setDistanceFlag")]
		public static void shape_HausdorffDistanceExtractor_setDistanceFlag(
					global::System.IntPtr obj, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_HausdorffDistanceExtractor_setDistanceFlag(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_HausdorffDistanceExtractor_getDistanceFlag, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_HausdorffDistanceExtractor_getDistanceFlag")]
		public static int shape_HausdorffDistanceExtractor_getDistanceFlag(global::System.IntPtr obj)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_HausdorffDistanceExtractor_getDistanceFlag(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_HausdorffDistanceExtractor_setRankProportion, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_HausdorffDistanceExtractor_setRankProportion")]
		public static void shape_HausdorffDistanceExtractor_setRankProportion(
					global::System.IntPtr obj, 
					float val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.shape_HausdorffDistanceExtractor_setRankProportion(
								obj, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, shape_HausdorffDistanceExtractor_getRankProportion, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_HausdorffDistanceExtractor_getRankProportion")]
		public static float shape_HausdorffDistanceExtractor_getRankProportion(global::System.IntPtr obj)
		{
			// Setup
			float unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_HausdorffDistanceExtractor_getRankProportion(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, shape_createHausdorffDistanceExtractor, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "shape_createHausdorffDistanceExtractor")]
		public static global::System.IntPtr shape_createHausdorffDistanceExtractor(
					int distanceFlag, 
					float rankProp)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.shape_createHausdorffDistanceExtractor(
								distanceFlag, 
								rankProp
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_CamShift, [fwd] [return] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_RotatedRect__OpenCvSharp__OpenCvSharp__RotatedRect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_CamShift")]
		public static global::OpenCvSharp.RotatedRect__OpenCvSharp video_CamShift(
					global::System.IntPtr probImage, 
					ref global::OpenCvSharp.Rect__OpenCvSharp window, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_window;
			global::OpenCvSharp.RotatedRect__OpenCvSharp unsafe___value;
			// Marshalling
			unsafe_window = window;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_CamShift(
								probImage, 
								&(unsafe_window), 
								criteria
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			window = unsafe_window;
			// Return
			return unsafe___value;
		}

		// Signature, video_meanShift, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Rect__OpenCvSharp__OpenCvSharp__Rect__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_meanShift")]
		public static int video_meanShift(
					global::System.IntPtr probImage, 
					ref global::OpenCvSharp.Rect__OpenCvSharp window, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			// Setup
			global::OpenCvSharp.Rect__OpenCvSharp unsafe_window;
			int unsafe___value;
			// Marshalling
			unsafe_window = window;
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_meanShift(
								probImage, 
								&(unsafe_window), 
								criteria
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			window = unsafe_window;
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_new1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_new1")]
		public static global::System.IntPtr video_KalmanFilter_new1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_new1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_new2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_new2")]
		public static global::System.IntPtr video_KalmanFilter_new2(
					int dynamParams, 
					int measureParams, 
					int controlParams, 
					int type)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_new2(
								dynamParams, 
								measureParams, 
								controlParams, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_init, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_init")]
		public static void video_KalmanFilter_init(
					global::System.IntPtr obj, 
					int dynamParams, 
					int measureParams, 
					int controlParams, 
					int type)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_init(
								obj, 
								dynamParams, 
								measureParams, 
								controlParams, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_KalmanFilter_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_delete")]
		public static void video_KalmanFilter_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_KalmanFilter_predict, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_predict")]
		public static global::System.IntPtr video_KalmanFilter_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr control)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_predict(
								obj, 
								control
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_correct, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_correct")]
		public static global::System.IntPtr video_KalmanFilter_correct(
					global::System.IntPtr obj, 
					global::System.IntPtr measurement)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_correct(
								obj, 
								measurement
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_statePre, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_statePre")]
		public static global::System.IntPtr video_KalmanFilter_statePre(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_statePre(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_statePost, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_statePost")]
		public static global::System.IntPtr video_KalmanFilter_statePost(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_statePost(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_transitionMatrix, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_transitionMatrix")]
		public static global::System.IntPtr video_KalmanFilter_transitionMatrix(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_transitionMatrix(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_controlMatrix, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_controlMatrix")]
		public static global::System.IntPtr video_KalmanFilter_controlMatrix(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_controlMatrix(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_measurementMatrix, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_measurementMatrix")]
		public static global::System.IntPtr video_KalmanFilter_measurementMatrix(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_measurementMatrix(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_processNoiseCov, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_processNoiseCov")]
		public static global::System.IntPtr video_KalmanFilter_processNoiseCov(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_processNoiseCov(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_measurementNoiseCov, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_measurementNoiseCov")]
		public static global::System.IntPtr video_KalmanFilter_measurementNoiseCov(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_measurementNoiseCov(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_errorCovPre, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_errorCovPre")]
		public static global::System.IntPtr video_KalmanFilter_errorCovPre(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_errorCovPre(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_gain, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_gain")]
		public static global::System.IntPtr video_KalmanFilter_gain(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_gain(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_KalmanFilter_errorCovPost, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_KalmanFilter_errorCovPost")]
		public static global::System.IntPtr video_KalmanFilter_errorCovPost(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_KalmanFilter_errorCovPost(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_buildOpticalFlowPyramid1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_buildOpticalFlowPyramid1")]
		public static int video_buildOpticalFlowPyramid1(
					global::System.IntPtr img, 
					global::System.IntPtr pyramid, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					int withDerivatives, 
					int pyrBorder, 
					int derivBorder, 
					int tryReuseInputImage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_buildOpticalFlowPyramid1(
								img, 
								pyramid, 
								winSize, 
								maxLevel, 
								withDerivatives, 
								pyrBorder, 
								derivBorder, 
								tryReuseInputImage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_buildOpticalFlowPyramid2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_buildOpticalFlowPyramid2")]
		public static int video_buildOpticalFlowPyramid2(
					global::System.IntPtr img, 
					global::System.IntPtr pyramidVec, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					int withDerivatives, 
					int pyrBorder, 
					int derivBorder, 
					int tryReuseInputImage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_buildOpticalFlowPyramid2(
								img, 
								pyramidVec, 
								winSize, 
								maxLevel, 
								withDerivatives, 
								pyrBorder, 
								derivBorder, 
								tryReuseInputImage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_calcOpticalFlowPyrLK_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_calcOpticalFlowPyrLK_InputArray")]
		public static void video_calcOpticalFlowPyrLK_InputArray(
					global::System.IntPtr prevImg, 
					global::System.IntPtr nextImg, 
					global::System.IntPtr prevPts, 
					global::System.IntPtr nextPts, 
					global::System.IntPtr status, 
					global::System.IntPtr err, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int flags, 
					double minEigThreshold)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_calcOpticalFlowPyrLK_InputArray(
								prevImg, 
								nextImg, 
								prevPts, 
								nextPts, 
								status, 
								err, 
								winSize, 
								maxLevel, 
								criteria, 
								flags, 
								minEigThreshold
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_calcOpticalFlowPyrLK_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Size__OpenCvSharp__OpenCvSharp__Size__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_TermCriteria__OpenCvSharp__OpenCvSharp__TermCriteria__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_calcOpticalFlowPyrLK_vector")]
		public static void video_calcOpticalFlowPyrLK_vector(
					global::System.IntPtr prevImg, 
					global::System.IntPtr nextImg, 
					global::OpenCvSharp.Point2f__OpenCvSharp[] prevPts, 
					int prevPtsSize, 
					global::System.IntPtr nextPts, 
					global::System.IntPtr status, 
					global::System.IntPtr err, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int flags, 
					double minEigThreshold)
		{
			// Setup
			global::OpenCvSharp.Point2f__OpenCvSharp* unsafe_prevPts = default(global::OpenCvSharp.Point2f__OpenCvSharp*);
			try
			{
				// Marshalling
				if (prevPts == null)
					unsafe_prevPts = null;
				else
				{
					if (prevPts != null)
						unsafe_prevPts = (global::OpenCvSharp.Point2f__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(prevPts.Length * sizeof(global::OpenCvSharp.Point2f__OpenCvSharp))));
					if (prevPts != null)
						for (uint mcgIdx = 0; (mcgIdx < prevPts.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Point2f__OpenCvSharp__OpenCvSharp__Point2f__OpenCvSharp prevPts
							unsafe_prevPts[mcgIdx] = prevPts[mcgIdx];
						}
				}
				// Call to native method
				global::McgInterop.OpenCvSharpExtern_PInvokes.video_calcOpticalFlowPyrLK_vector(
									prevImg, 
									nextImg, 
									unsafe_prevPts, 
									prevPtsSize, 
									nextPts, 
									status, 
									err, 
									winSize, 
									maxLevel, 
									criteria, 
									flags, 
									minEigThreshold
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_prevPts);
			}
		}

		// Signature, video_calcOpticalFlowFarneback, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_calcOpticalFlowFarneback")]
		public static void video_calcOpticalFlowFarneback(
					global::System.IntPtr prev, 
					global::System.IntPtr next, 
					global::System.IntPtr flow, 
					double pyrScale, 
					int levels, 
					int winSize, 
					int iterations, 
					int polyN, 
					double polySigma, 
					int flags)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_calcOpticalFlowFarneback(
								prev, 
								next, 
								flow, 
								pyrScale, 
								levels, 
								winSize, 
								iterations, 
								polyN, 
								polySigma, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_estimateRigidTransform, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_estimateRigidTransform")]
		public static global::System.IntPtr video_estimateRigidTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int fullAffine)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_estimateRigidTransform(
								src, 
								dst, 
								fullAffine
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_DenseOpticalFlow_calc, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_DenseOpticalFlow_calc")]
		public static void video_DenseOpticalFlow_calc(
					global::System.IntPtr obj, 
					global::System.IntPtr i0, 
					global::System.IntPtr i1, 
					global::System.IntPtr flow)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_DenseOpticalFlow_calc(
								obj, 
								i0, 
								i1, 
								flow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_DenseOpticalFlow_collectGarbage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_DenseOpticalFlow_collectGarbage")]
		public static void video_DenseOpticalFlow_collectGarbage(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_DenseOpticalFlow_collectGarbage(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_DenseOpticalFlow_info, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_DenseOpticalFlow_info")]
		public static global::System.IntPtr video_DenseOpticalFlow_info(global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_DenseOpticalFlow_info(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_createOptFlow_DualTVL1, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_createOptFlow_DualTVL1")]
		public static global::System.IntPtr video_createOptFlow_DualTVL1()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_createOptFlow_DualTVL1();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_Ptr_DenseOpticalFlow_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_DenseOpticalFlow_get")]
		public static global::System.IntPtr video_Ptr_DenseOpticalFlow_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_DenseOpticalFlow_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_Ptr_DenseOpticalFlow_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_DenseOpticalFlow_delete")]
		public static void video_Ptr_DenseOpticalFlow_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_DenseOpticalFlow_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractor_getBackgroundImage, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractor_getBackgroundImage")]
		public static void video_BackgroundSubtractor_getBackgroundImage(
					global::System.IntPtr self, 
					global::System.IntPtr backgroundImage)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractor_getBackgroundImage(
								self, 
								backgroundImage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractor_apply, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractor_apply")]
		public static void video_BackgroundSubtractor_apply(
					global::System.IntPtr self, 
					global::System.IntPtr image, 
					global::System.IntPtr fgmask, 
					double learningRate)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractor_apply(
								self, 
								image, 
								fgmask, 
								learningRate
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_Ptr_BackgroundSubtractor_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractor_delete")]
		public static void video_Ptr_BackgroundSubtractor_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractor_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_Ptr_BackgroundSubtractor_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractor_get")]
		public static global::System.IntPtr video_Ptr_BackgroundSubtractor_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractor_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_createBackgroundSubtractorMOG2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_createBackgroundSubtractorMOG2")]
		public static global::System.IntPtr video_createBackgroundSubtractorMOG2(
					int history, 
					double varThreshold, 
					int detectShadows)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_createBackgroundSubtractorMOG2(
								history, 
								varThreshold, 
								detectShadows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_Ptr_BackgroundSubtractorMOG2_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractorMOG2_delete")]
		public static void video_Ptr_BackgroundSubtractorMOG2_delete(global::System.IntPtr ptr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractorMOG2_delete(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_Ptr_BackgroundSubtractorMOG2_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractorMOG2_get")]
		public static global::System.IntPtr video_Ptr_BackgroundSubtractorMOG2_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractorMOG2_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_getHistory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getHistory")]
		public static int video_BackgroundSubtractorMOG2_getHistory(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getHistory(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setHistory, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setHistory")]
		public static void video_BackgroundSubtractorMOG2_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setHistory(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getNMixtures, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getNMixtures")]
		public static int video_BackgroundSubtractorMOG2_getNMixtures(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getNMixtures(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setNMixtures, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setNMixtures")]
		public static void video_BackgroundSubtractorMOG2_setNMixtures(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setNMixtures(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getBackgroundRatio, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getBackgroundRatio")]
		public static double video_BackgroundSubtractorMOG2_getBackgroundRatio(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getBackgroundRatio(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setBackgroundRatio, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setBackgroundRatio")]
		public static void video_BackgroundSubtractorMOG2_setBackgroundRatio(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setBackgroundRatio(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getVarThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getVarThreshold")]
		public static double video_BackgroundSubtractorMOG2_getVarThreshold(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getVarThreshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setVarThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setVarThreshold")]
		public static void video_BackgroundSubtractorMOG2_setVarThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setVarThreshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getVarThresholdGen, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getVarThresholdGen")]
		public static double video_BackgroundSubtractorMOG2_getVarThresholdGen(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getVarThresholdGen(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setVarThresholdGen, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setVarThresholdGen")]
		public static void video_BackgroundSubtractorMOG2_setVarThresholdGen(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setVarThresholdGen(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getVarInit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getVarInit")]
		public static double video_BackgroundSubtractorMOG2_getVarInit(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getVarInit(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setVarInit, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setVarInit")]
		public static void video_BackgroundSubtractorMOG2_setVarInit(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setVarInit(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getVarMin, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getVarMin")]
		public static double video_BackgroundSubtractorMOG2_getVarMin(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getVarMin(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setVarMin, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setVarMin")]
		public static void video_BackgroundSubtractorMOG2_setVarMin(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setVarMin(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getVarMax, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getVarMax")]
		public static double video_BackgroundSubtractorMOG2_getVarMax(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getVarMax(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setVarMax, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setVarMax")]
		public static void video_BackgroundSubtractorMOG2_setVarMax(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setVarMax(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getComplexityReductionThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getComplexityReductionThreshold")]
		public static double video_BackgroundSubtractorMOG2_getComplexityReductionThreshold(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getComplexityReductionThreshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setComplexityReductionThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setComplexityReductionThreshold")]
		public static void video_BackgroundSubtractorMOG2_setComplexityReductionThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setComplexityReductionThreshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getDetectShadows, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getDetectShadows")]
		public static int video_BackgroundSubtractorMOG2_getDetectShadows(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getDetectShadows(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setDetectShadows, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setDetectShadows")]
		public static void video_BackgroundSubtractorMOG2_setDetectShadows(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setDetectShadows(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getShadowValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getShadowValue")]
		public static int video_BackgroundSubtractorMOG2_getShadowValue(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getShadowValue(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setShadowValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setShadowValue")]
		public static void video_BackgroundSubtractorMOG2_setShadowValue(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setShadowValue(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorMOG2_getShadowThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_getShadowThreshold")]
		public static double video_BackgroundSubtractorMOG2_getShadowThreshold(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_getShadowThreshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorMOG2_setShadowThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorMOG2_setShadowThreshold")]
		public static void video_BackgroundSubtractorMOG2_setShadowThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorMOG2_setShadowThreshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_createBackgroundSubtractorKNN, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_createBackgroundSubtractorKNN")]
		public static global::System.IntPtr video_createBackgroundSubtractorKNN(
					int history, 
					double dist2Threshold, 
					int detectShadows)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_createBackgroundSubtractorKNN(
								history, 
								dist2Threshold, 
								detectShadows
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_Ptr_BackgroundSubtractorKNN_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractorKNN_delete")]
		public static void video_Ptr_BackgroundSubtractorKNN_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractorKNN_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_Ptr_BackgroundSubtractorKNN_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_Ptr_BackgroundSubtractorKNN_get")]
		public static global::System.IntPtr video_Ptr_BackgroundSubtractorKNN_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_Ptr_BackgroundSubtractorKNN_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_getHistory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getHistory")]
		public static int video_BackgroundSubtractorKNN_getHistory(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getHistory(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setHistory, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setHistory")]
		public static void video_BackgroundSubtractorKNN_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setHistory(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getNSamples, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getNSamples")]
		public static int video_BackgroundSubtractorKNN_getNSamples(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getNSamples(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setNSamples, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setNSamples")]
		public static void video_BackgroundSubtractorKNN_setNSamples(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setNSamples(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getDist2Threshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getDist2Threshold")]
		public static int video_BackgroundSubtractorKNN_getDist2Threshold(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getDist2Threshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setDist2Threshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setDist2Threshold")]
		public static void video_BackgroundSubtractorKNN_setDist2Threshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setDist2Threshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getkNNSamples, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getkNNSamples")]
		public static int video_BackgroundSubtractorKNN_getkNNSamples(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getkNNSamples(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setkNNSamples, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setkNNSamples")]
		public static void video_BackgroundSubtractorKNN_setkNNSamples(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setkNNSamples(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getDetectShadows, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getDetectShadows")]
		public static int video_BackgroundSubtractorKNN_getDetectShadows(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getDetectShadows(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setDetectShadows, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setDetectShadows")]
		public static void video_BackgroundSubtractorKNN_setDetectShadows(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setDetectShadows(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getShadowValue, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getShadowValue")]
		public static int video_BackgroundSubtractorKNN_getShadowValue(global::System.IntPtr ptr)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getShadowValue(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setShadowValue, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setShadowValue")]
		public static void video_BackgroundSubtractorKNN_setShadowValue(
					global::System.IntPtr ptr, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setShadowValue(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, video_BackgroundSubtractorKNN_getShadowThreshold, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_getShadowThreshold")]
		public static double video_BackgroundSubtractorKNN_getShadowThreshold(global::System.IntPtr ptr)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_getShadowThreshold(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, video_BackgroundSubtractorKNN_setShadowThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "video_BackgroundSubtractorKNN_setShadowThreshold")]
		public static void video_BackgroundSubtractorKNN_setShadowThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.video_BackgroundSubtractorKNN_setShadowThreshold(
								ptr, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_niBlackThreshold, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_niBlackThreshold")]
		public static void ximgproc_niBlackThreshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double maxValue, 
					int type, 
					int blockSize, 
					double delta)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_niBlackThreshold(
								src, 
								dst, 
								maxValue, 
								type, 
								blockSize, 
								delta
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_thinning, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_thinning")]
		public static void ximgproc_thinning(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int thinningType)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_thinning(
								src, 
								dst, 
								thinningType
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_FastLineDetector_delete, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_FastLineDetector_delete")]
		public static void ximgproc_FastLineDetector_delete(global::System.IntPtr obj)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_FastLineDetector_delete(obj);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_Ptr_FastLineDetector_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_Ptr_FastLineDetector_get")]
		public static global::System.IntPtr ximgproc_Ptr_FastLineDetector_get(global::System.IntPtr ptr)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_Ptr_FastLineDetector_get(ptr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ximgproc_FastLineDetector_detect_OutputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_FastLineDetector_detect_OutputArray")]
		public static void ximgproc_FastLineDetector_detect_OutputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_FastLineDetector_detect_OutputArray(
								obj, 
								image, 
								lines
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_FastLineDetector_detect_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_FastLineDetector_detect_vector")]
		public static void ximgproc_FastLineDetector_detect_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_FastLineDetector_detect_vector(
								obj, 
								image, 
								lines
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_FastLineDetector_drawSegments_InputArray, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_FastLineDetector_drawSegments_InputArray")]
		public static void ximgproc_FastLineDetector_drawSegments_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					int draw_arrow)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_FastLineDetector_drawSegments_InputArray(
								obj, 
								image, 
								lines, 
								draw_arrow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_FastLineDetector_drawSegments_vector, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_FastLineDetector_drawSegments_vector")]
		public static void ximgproc_FastLineDetector_drawSegments_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					int draw_arrow)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_FastLineDetector_drawSegments_vector(
								obj, 
								image, 
								lines, 
								draw_arrow
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, ximgproc_createFastLineDetector, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] float__float, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.NativeMethods", "ximgproc_createFastLineDetector")]
		public static global::System.IntPtr ximgproc_createFastLineDetector(
					int length_threshold, 
					float distance_threshold, 
					double canny_th1, 
					double canny_th2, 
					int canny_aperture_size, 
					int do_merge)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.OpenCvSharpExtern_PInvokes.ximgproc_createFastLineDetector(
								length_threshold, 
								distance_threshold, 
								canny_th1, 
								canny_th2, 
								canny_aperture_size, 
								do_merge
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'kernel32'
	/// </summary>
	public unsafe static partial class kernel32
	{
		// Signature, LoadLibrary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "LoadLibrary")]
		public static global::System.IntPtr LoadLibrary(string lpFileName)
		{
			// Setup
			byte* unsafe_lpFileName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpFileName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpFileName, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.kernel32_PInvokes.LoadLibrary(unsafe_lpFileName);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpFileName);
			}
		}

		// Signature, GetProcAddress, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "GetProcAddress")]
		public static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					string lpProcName)
		{
			// Setup
			byte* unsafe_lpProcName = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_lpProcName = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(lpProcName, true, false);
				// Call to native method
				unsafe___value = global::McgInterop.kernel32_PInvokes.GetProcAddress(
									hModule, 
									unsafe_lpProcName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpProcName);
			}
		}

		// Signature, FreeLibrary, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "FreeLibrary")]
		public static bool FreeLibrary(global::System.IntPtr hLibModule)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.kernel32_PInvokes.FreeLibrary(hLibModule);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value != 0;
		}

		// Signature, Win32LoadLibrary, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.WindowsLibraryLoader", "Win32LoadLibrary")]
		public static global::System.IntPtr Win32LoadLibrary(string dllPath)
		{
			// Setup
			ushort* unsafe_dllPath = default(ushort*);
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_dllPath = dllPath)
			{
				unsafe_dllPath = (ushort*)pinned_dllPath;
				// Call to native method
				unsafe___value = global::McgInterop.kernel32_PInvokes.Win32LoadLibrary(unsafe_dllPath);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'gdi32'
	/// </summary>
	public unsafe static partial class gdi32
	{
		// Signature, SetDIBitsToDevice, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] OpenCvSharp_Win32Api_BITMAPINFO__OpenCvSharp__OpenCvSharp__Win32Api_BITMAPINFO__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "SetDIBitsToDevice")]
		public static int SetDIBitsToDevice(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					uint dwWidth, 
					uint dwHeight, 
					int XSrc, 
					int YSrc, 
					uint uStartScan, 
					uint cScanLines, 
					global::System.IntPtr lpvBits, 
					ref global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp lpbmi, 
					uint fuColorUse)
		{
			// Setup
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType unsafe_lpbmi = default(global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.Marshal__SafeToUnsafe(
								ref lpbmi, 
								out unsafe_lpbmi
							);
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.SetDIBitsToDevice(
								hdc, 
								XDest, 
								YDest, 
								dwWidth, 
								dwHeight, 
								XSrc, 
								YSrc, 
								uStartScan, 
								cScanLines, 
								lpvBits, 
								&(unsafe_lpbmi), 
								fuColorUse
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpbmi, 
								out lpbmi
							);
			// Return
			return unsafe___value;
		}

		// Signature, SetDIBitsToDevice__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "SetDIBitsToDevice")]
		public static int SetDIBitsToDevice__0(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					uint dwWidth, 
					uint dwHeight, 
					int XSrc, 
					int YSrc, 
					uint uStartScan, 
					uint cScanLines, 
					global::System.IntPtr lpvBits, 
					global::System.IntPtr lpbmi, 
					uint fuColorUse)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.SetDIBitsToDevice__0(
								hdc, 
								XDest, 
								YDest, 
								dwWidth, 
								dwHeight, 
								XSrc, 
								YSrc, 
								uStartScan, 
								cScanLines, 
								lpvBits, 
								lpbmi, 
								fuColorUse
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetDIBColorTable, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_OpenCvSharp_Win32Api_RGBQUAD__OpenCvSharp__OpenCvSharp__Win32Api_RGBQUAD__OpenCvSharp *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "GetDIBColorTable")]
		public static int GetDIBColorTable(
					global::System.IntPtr dc, 
					int index, 
					int entries, 
					global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp[] colors)
		{
			// Setup
			global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp* unsafe_colors = default(global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (colors == null)
					unsafe_colors = null;
				else
				{
					if (colors != null)
						unsafe_colors = (global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(colors.Length * sizeof(global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp))));
					if (colors != null)
						for (uint mcgIdx = 0; (mcgIdx < colors.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Win32Api_RGBQUAD__OpenCvSharp__OpenCvSharp__Win32Api_RGBQUAD__OpenCvSharp colors
							unsafe_colors[mcgIdx] = colors[mcgIdx];
						}
				}
				// Call to native method
				unsafe___value = global::McgInterop.gdi32_PInvokes.GetDIBColorTable(
									dc, 
									index, 
									entries, 
									unsafe_colors
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (colors != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < colors.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] OpenCvSharp_Win32Api_RGBQUAD__OpenCvSharp__OpenCvSharp__Win32Api_RGBQUAD__OpenCvSharp colors
						colors[mcgIdx_1] = unsafe_colors[mcgIdx_1];
					}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_colors);
			}
		}

		// Signature, GetDIBits, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] OpenCvSharp_Win32Api_ColorTableType__OpenCvSharp__Win32Api_ColorTableType__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "GetDIBits")]
		public static int GetDIBits(
					global::System.IntPtr dc, 
					global::System.IntPtr bmp, 
					int startScan, 
					int scanLineCount, 
					byte[] data, 
					global::System.IntPtr info, 
					global::OpenCvSharp.Win32Api_ColorTableType__OpenCvSharp usage)
		{
			// Setup
			byte* unsafe_data;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_data = global::McgInterop.McgCoreHelpers.GetArrayForCompat(data))
			{
				unsafe_data = (byte*)pinned_data;
				// Call to native method
				unsafe___value = global::McgInterop.gdi32_PInvokes.GetDIBits(
									dc, 
									bmp, 
									startScan, 
									scanLineCount, 
									unsafe_data, 
									info, 
									usage
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			// Return
			return unsafe___value;
		}

		// Signature, CreateCompatibleDC, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "CreateCompatibleDC")]
		public static global::System.IntPtr CreateCompatibleDC(global::System.IntPtr hdc)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.CreateCompatibleDC(hdc);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, SelectObject, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "SelectObject")]
		public static global::System.IntPtr SelectObject(
					global::System.IntPtr hdc, 
					global::System.IntPtr obj)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.SelectObject(
								hdc, 
								obj
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, DeleteObject, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "DeleteObject")]
		public static bool DeleteObject(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.DeleteObject(handle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, DeleteDC, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "DeleteDC")]
		public static bool DeleteDC(global::System.IntPtr hdc)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.DeleteDC(hdc);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetStretchBltMode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "SetStretchBltMode")]
		public static int SetStretchBltMode(
					global::System.IntPtr hdc, 
					int iStretchMode)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.SetStretchBltMode(
								hdc, 
								iStretchMode
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, StretchDIBits, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] OpenCvSharp_Win32Api_BITMAPINFO__OpenCvSharp__OpenCvSharp__Win32Api_BITMAPINFO__OpenCvSharp, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "StretchDIBits")]
		public static int StretchDIBits(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					int nDestWidth, 
					int nDestHeight, 
					int XSrc, 
					int YSrc, 
					int nSrcWidth, 
					int nSrcHeight, 
					global::System.IntPtr lpBits, 
					ref global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp lpBitsInfo, 
					uint iUsage, 
					uint dwRop)
		{
			// Setup
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType unsafe_lpBitsInfo = default(global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.Marshal__SafeToUnsafe(
								ref lpBitsInfo, 
								out unsafe_lpBitsInfo
							);
			// Call to native method
			unsafe___value = global::McgInterop.gdi32_PInvokes.StretchDIBits(
								hdc, 
								XDest, 
								YDest, 
								nDestWidth, 
								nDestHeight, 
								XSrc, 
								YSrc, 
								nSrcWidth, 
								nSrcHeight, 
								lpBits, 
								&(unsafe_lpBitsInfo), 
								iUsage, 
								dwRop
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpBitsInfo, 
								out lpBitsInfo
							);
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'user32'
	/// </summary>
	public unsafe static partial class user32
	{
		// Signature, GetIconInfo, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] OpenCvSharp_Win32Api_ICONINFO__OpenCvSharp__OpenCvSharp__Win32Api_ICONINFO__OpenCvSharp, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "GetIconInfo")]
		public static bool GetIconInfo(
					global::System.IntPtr icon, 
					out global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp info)
		{
			// Setup
			global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp__Impl.UnsafeType unsafe_info = default(global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp__Impl.UnsafeType);
			int unsafe___value;
			// Marshalling
			unsafe_info = default(global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::McgInterop.user32_PInvokes.GetIconInfo(
								icon, 
								&(unsafe_info)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp__Impl.Marshal__UnsafeToSafe(
								ref unsafe_info, 
								out info
							);
			// Return
			return unsafe___value != 0;
		}

		// Signature, GetDC, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "GetDC")]
		public static global::System.IntPtr GetDC(global::System.IntPtr window)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.user32_PInvokes.GetDC(window);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ReleaseDC, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099", "OpenCvSharp.Win32Api", "ReleaseDC")]
		public static bool ReleaseDC(
					global::System.IntPtr window, 
					global::System.IntPtr dc)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.user32_PInvokes.ReleaseDC(
								window, 
								dc
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FormatMessage")]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				fixed (global::System.IntPtr* pinned_arguments = global::McgInterop.McgCoreHelpers.GetArrayForCompat(arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					// Call to native method
					unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.FormatMessage(
										dwFlags, 
										lpSource, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-processenvironment-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_processenvironment_l1_1_0_dll
	{
		// Signature, GetCurrentDirectory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCurrentDirectory")]
		public static int GetCurrentDirectory(
					int nBufferLength, 
					global::System.Text.StringBuilder lpBuffer)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_processenvironment_l1_1_0_dll_PInvokes.GetCurrentDirectory(
									nBufferLength, 
									unsafe_lpBuffer
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l1_1_0_dll
	{
		// Signature, GetFileType, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileType")]
		public static int GetFileType(global::System.Runtime.InteropServices.SafeHandle hFile)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.GetFileType(hFile.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetLongPathNamePrivate, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLongPathNamePrivate")]
		public static int GetLongPathNamePrivate(
					string path, 
					global::System.Text.StringBuilder longPathBuffer, 
					int bufferLength)
		{
			// Setup
			ushort* unsafe_path = default(ushort*);
			ushort* unsafe_longPathBuffer = default(ushort*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (char* pinned_path = path)
				{
					unsafe_path = (ushort*)pinned_path;
					if (longPathBuffer == null)
						unsafe_longPathBuffer = null;
					else
					{
						unsafe_longPathBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(longPathBuffer.Capacity * 2 
											+ 2)));
						if (unsafe_longPathBuffer == null)
							throw new global::System.OutOfMemoryException();
					}
					// Call to native method
					unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.GetLongPathNamePrivate(
										unsafe_path, 
										unsafe_longPathBuffer, 
										bufferLength
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (longPathBuffer != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_longPathBuffer, 
											longPathBuffer
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_longPathBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_longPathBuffer);
			}
		}

		// Signature, SetFilePointerEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetFilePointerEx")]
		public static bool SetFilePointerEx(
					global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile, 
					long liDistanceToMove, 
					out long lpNewFilePointer, 
					uint dwMoveMethod)
		{
			// Setup
			bool addRefed = false;
			long unsafe_lpNewFilePointer;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.SetFilePointerEx(
								hFile.DangerousGetHandle(), 
								liDistanceToMove, 
								&(unsafe_lpNewFilePointer), 
								dwMoveMethod
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			lpNewFilePointer = unsafe_lpNewFilePointer;
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindFirstFileExPrivate, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFindHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem__Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem____Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem__Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FindFirstFileExPrivate")]
		public static global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem FindFirstFileExPrivate(
					string lpFileName, 
					global::Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					ref global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem lpFindFileData, 
					global::Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType unsafe_lpFindFileData = default(global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType);
			global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.Marshal__SafeToUnsafe(
									ref lpFindFileData, 
									out unsafe_lpFindFileData
								);
				__value = new global::Microsoft.Win32.SafeHandles.SafeFindHandle__System_IO_FileSystem();
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.FindFirstFileExPrivate(
									unsafe_lpFileName, 
									fInfoLevelId, 
									&(unsafe_lpFindFileData), 
									fSearchOp, 
									lpSearchFilter, 
									dwAdditionalFlags
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.Marshal__UnsafeToSafe(
									ref unsafe_lpFindFileData, 
									out lpFindFileData
								);
			}
			// Return
			return __value;
		}

		// Signature, GetFileAttributesExPrivate, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem__Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem____Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileAttributesExPrivate")]
		public static bool GetFileAttributesExPrivate(
					string name, 
					global::Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					ref global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem lpFileInformation)
		{
			// Setup
			ushort* unsafe_name = default(ushort*);
			global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem unsafe_lpFileInformation;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_name = name)
			{
				unsafe_name = (ushort*)pinned_name;
				unsafe_lpFileInformation = lpFileInformation;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.GetFileAttributesExPrivate(
									unsafe_name, 
									fileInfoLevel, 
									&(unsafe_lpFileInformation)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				lpFileInformation = unsafe_lpFileInformation;
			}
			// Return
			return unsafe___value != 0;
		}

		// Signature, SetEndOfFile, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "SetEndOfFile")]
		public static bool SetEndOfFile(global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.SetEndOfFile(hFile.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, FindClose, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FindClose")]
		public static bool FindClose(global::System.IntPtr hFindFile)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.FindClose(hFindFile);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}

		// Signature, ReadFile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "ReadFile")]
		public static int ReadFile(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToRead, 
					global::System.IntPtr numBytesRead_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* overlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.ReadFile(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToRead, 
								numBytesRead_mustBeZero, 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)overlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, ReadFile__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "ReadFile")]
		public static int ReadFile__0(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToRead, 
					out int numBytesRead, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			bool addRefed = false;
			int unsafe_numBytesRead;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.ReadFile__0(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToRead, 
								&(unsafe_numBytesRead), 
								mustBeZero
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			numBytesRead = unsafe_numBytesRead;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "WriteFile")]
		public static int WriteFile(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToWrite, 
					global::System.IntPtr numBytesWritten_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.WriteFile(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToWrite, 
								numBytesWritten_mustBeZero, 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WriteFile__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "WriteFile")]
		public static int WriteFile__0(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					byte* bytes, 
					int numBytesToWrite, 
					out int numBytesWritten, 
					global::System.IntPtr mustBeZero)
		{
			// Setup
			bool addRefed = false;
			int unsafe_numBytesWritten;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.WriteFile__0(
								handle.DangerousGetHandle(), 
								((byte*)bytes), 
								numBytesToWrite, 
								&(unsafe_numBytesWritten), 
								mustBeZero
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			numBytesWritten = unsafe_numBytesWritten;
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, FlushFileBuffers, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FlushFileBuffers")]
		public static bool FlushFileBuffers(global::System.Runtime.InteropServices.SafeHandle hHandle)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			hHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l1_1_0_dll_PInvokes.FlushFileBuffers(hHandle.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				hHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-threadpool-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll
	{
		// Signature, CreateThreadpoolIo, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Interop_NativeIoCompletionCallback__System_Threading_Overlapped____Interop_NativeIoCompletionCallback__System_Threading_Overlapped, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateThreadpoolIo")]
		public static global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped CreateThreadpoolIo(
					global::System.Runtime.InteropServices.SafeHandle fl, 
					global::Interop_NativeIoCompletionCallback__System_Threading_Overlapped pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_pfnio = default(void*);
			global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped __value;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fl.DangerousAddRef(ref addRefed);
				unsafe_pfnio = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+NativeIoCompletionCallback,System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken" +
											"=b03f5f7f11d50a3a"), 
									pfnio
								);
				__value = new global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped();
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CreateThreadpoolIo(
									fl.DangerousGetHandle(), 
									unsafe_pfnio, 
									context, 
									pcbe
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					fl.DangerousRelease();
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(pfnio);
			}
		}

		// Signature, CloseThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CloseThreadpoolIo")]
		public static void CloseThreadpoolIo(global::System.IntPtr pio)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CloseThreadpoolIo(pio);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, StartThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "StartThreadpoolIo")]
		public static void StartThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.StartThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}

		// Signature, CancelThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CancelThreadpoolIo")]
		public static void CancelThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CancelThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l2-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l2_1_0_dll
	{
		// Signature, GetFileInformationByHandleEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem__Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem____Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetFileInformationByHandleEx")]
		public static bool GetFileInformationByHandleEx(
					global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem hFile, 
					global::Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					out global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem lpFileInformation, 
					uint dwBufferSize)
		{
			// Setup
			bool addRefed = false;
			global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem unsafe_lpFileInformation;
			int unsafe___value;
			// Marshalling
			hFile.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_file_l2_1_0_dll_PInvokes.GetFileInformationByHandleEx(
								hFile.DangerousGetHandle(), 
								FileInformationClass, 
								&(unsafe_lpFileInformation), 
								dwBufferSize
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			lpFileInformation = unsafe_lpFileInformation;
			if (addRefed)
				hFile.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-file-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_file_l1_2_0_dll
	{
		// Signature, CreateFile2, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeFileHandle__System_IO_FileSystem____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_IO_FileShare__System_IO_FileSystem_Primitives__FileShare__System_IO_FileSystem_Primitives, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_IO_FileMode__System_IO_FileSystem_Primitives__FileMode__System_IO_FileSystem_Primitives, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem____Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateFile2")]
		public static global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem CreateFile2(
					string lpFileName, 
					int dwDesiredAccess, 
					global::System.IO.FileShare__System_IO_FileSystem_Primitives dwShareMode, 
					global::System.IO.FileMode__System_IO_FileSystem_Primitives dwCreationDisposition, 
					ref global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem parameters)
		{
			// Setup
			ushort* unsafe_lpFileName = default(ushort*);
			global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem unsafe_parameters;
			global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (char* pinned_lpFileName = lpFileName)
			{
				unsafe_lpFileName = (ushort*)pinned_lpFileName;
				unsafe_parameters = parameters;
				__value = new global::Microsoft.Win32.SafeHandles.SafeFileHandle__System_IO_FileSystem();
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_file_l1_2_0_dll_PInvokes.CreateFile2(
									unsafe_lpFileName, 
									dwDesiredAccess, 
									dwShareMode, 
									dwCreationDisposition, 
									&(unsafe_parameters)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
			}
			// Return
			return __value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-handle-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll
	{
		// Signature, CloseHandle, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CloseHandle")]
		public static bool CloseHandle(global::System.IntPtr handle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_handle_l1_1_0_dll_PInvokes.CloseHandle(handle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-io-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_io_l1_1_0_dll
	{
		// Signature, CancelIoEx, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_Threading_NativeOverlapped__System_Threading_Overlapped___ptrSystem_Threading__NativeOverlapped__System_Threading_Overlapped *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.IO.FileSystem, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CancelIoEx")]
		public static bool CancelIoEx(
					global::System.Runtime.InteropServices.SafeHandle handle, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped)
		{
			// Setup
			bool addRefed = false;
			int unsafe___value;
			// Marshalling
			handle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_io_l1_1_0_dll_PInvokes.CancelIoEx(
								handle.DangerousGetHandle(), 
								((global::System.Threading.NativeOverlapped__System_Threading_Overlapped*)lpOverlapped)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				handle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl** unsafe_bufferMarshalerPtr = default(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl**);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgModuleManager.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.12.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class OpenCvSharpExtern_PInvokes
	{
		public static global::System.IntPtr bgsegm_createBackgroundSubtractorMOG(
					int history, 
					int nmixtures, 
					double backgroundRatio, 
					double noiseSigma)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_createBackgroundSubtractorMOG!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_Ptr_BackgroundSubtractorMOG_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_Ptr_BackgroundSubtractorMOG_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr bgsegm_Ptr_BackgroundSubtractorMOG_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_Ptr_BackgroundSubtractorMOG_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorMOG_getHistory(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_getHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorMOG_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_setHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorMOG_getNMixtures(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_getNMixtures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorMOG_setNMixtures(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_setNMixtures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorMOG_getBackgroundRatio(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_getBackgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorMOG_setBackgroundRatio(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_setBackgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorMOG_getNoiseSigma(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_getNoiseSigma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorMOG_setNoiseSigma(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorMOG_setNoiseSigma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr bgsegm_createBackgroundSubtractorGMG(
					int initializationFrames, 
					double decisionThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_createBackgroundSubtractorGMG!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_Ptr_BackgroundSubtractorGMG_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_Ptr_BackgroundSubtractorGMG_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr bgsegm_Ptr_BackgroundSubtractorGMG_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_Ptr_BackgroundSubtractorGMG_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorGMG_getMaxFeatures(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setMaxFeatures(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getDefaultLearningRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setDefaultLearningRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorGMG_getNumFrames(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getNumFrames!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setNumFrames(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setNumFrames!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorGMG_getQuantizationLevels(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getQuantizationLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setQuantizationLevels(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setQuantizationLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorGMG_getBackgroundPrior(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getBackgroundPrior!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setBackgroundPrior(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setBackgroundPrior!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorGMG_getSmoothingRadius(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getSmoothingRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setSmoothingRadius(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setSmoothingRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorGMG_getDecisionThreshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getDecisionThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setDecisionThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setDecisionThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getUpdateBackgroundModel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setUpdateBackgroundModel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorGMG_getMinVal(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getMinVal!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setMinVal(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setMinVal!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double bgsegm_BackgroundSubtractorGMG_getMaxVal(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_getMaxVal!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void bgsegm_BackgroundSubtractorGMG_setMaxVal(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'bgsegm_BackgroundSubtractorGMG_setMaxVal!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_Index_new(
					global::System.IntPtr features, 
					global::System.IntPtr @params, 
					int distType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_knnSearch1(
					global::System.IntPtr obj, 
					float* queries, 
					int queriesLength, 
					int* indices, 
					float* dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_knnSearch1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_knnSearch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					global::System.IntPtr indices, 
					global::System.IntPtr dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_knnSearch2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_knnSearch3(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					int* indices, 
					float* dists, 
					int knn, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_knnSearch3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_radiusSearch1(
					global::System.IntPtr obj, 
					float* queries, 
					int queriesLength, 
					int* indices, 
					int indicesLength, 
					float* dists, 
					int dists_length, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_radiusSearch1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_radiusSearch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					global::System.IntPtr indices, 
					global::System.IntPtr dists, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_radiusSearch2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_radiusSearch3(
					global::System.IntPtr obj, 
					global::System.IntPtr queries, 
					int* indices, 
					int indicesLength, 
					float* dists, 
					int distsLength, 
					float radius, 
					int maxResults, 
					global::System.IntPtr @params)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_radiusSearch3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_Index_save(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_Index_save!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_IndexParams_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_getString(
					global::System.IntPtr obj, 
					byte* key, 
					byte* defaultVal, 
					byte* result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_getString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int flann_IndexParams_getInt(
					global::System.IntPtr obj, 
					byte* key, 
					int defaultVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_getInt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double flann_IndexParams_getDouble(
					global::System.IntPtr obj, 
					byte* key, 
					double defaultVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_getDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setString(
					global::System.IntPtr obj, 
					byte* key, 
					byte* value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setInt(
					global::System.IntPtr obj, 
					byte* key, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setInt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setDouble(
					global::System.IntPtr obj, 
					byte* key, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setFloat(
					global::System.IntPtr obj, 
					byte* key, 
					float value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setFloat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setBool(
					global::System.IntPtr obj, 
					byte* key, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setBool!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_IndexParams_setAlgorithm(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_IndexParams_setAlgorithm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_LinearIndexParams_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_LinearIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_LinearIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_LinearIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_KDTreeIndexParams_new(int trees)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_KDTreeIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_KDTreeIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_KDTreeIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_KMeansIndexParams_new(
					int branching, 
					int iterations, 
					global::OpenCvSharp.Flann.FlannCentersInit__OpenCvSharp centers_init, 
					float cb_index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_KMeansIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_KMeansIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_KMeansIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_CompositeIndexParams_new(
					int trees, 
					int branching, 
					int iterations, 
					global::OpenCvSharp.Flann.FlannCentersInit__OpenCvSharp centers_init, 
					float cb_index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_CompositeIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_CompositeIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_CompositeIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_AutotunedIndexParams_new(
					float targetPrecision, 
					float build_weight, 
					float memory_weight, 
					float sample_fraction)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_AutotunedIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_AutotunedIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_AutotunedIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_SavedIndexParams_new(byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_SavedIndexParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_SavedIndexParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_SavedIndexParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr flann_SearchParams_new(
					int checks, 
					float eps, 
					int sorted)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_SearchParams_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void flann_SearchParams_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'flann_SearchParams_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_namedWindow(
					byte* winname, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_namedWindow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_destroyWindow(byte* winName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_destroyWindow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_destroyAllWindows()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_destroyAllWindows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_imshow(
					byte* winname, 
					global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_imshow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int highgui_startWindowThread()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_startWindowThread!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int highgui_waitKey(int delay)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_waitKey!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_resizeWindow(
					byte* winName, 
					int width, 
					int height)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_resizeWindow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_moveWindow(
					byte* winName, 
					int x, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_moveWindow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_setWindowProperty(
					byte* winName, 
					int propId, 
					double propValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_setWindowProperty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_setWindowTitle(
					byte* winname, 
					byte* title)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_setWindowTitle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double highgui_getWindowProperty(
					byte* winName, 
					int propId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_getWindowProperty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_setMouseCallback(
					byte* winName, 
					void* onMouse, 
					global::System.IntPtr userData)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_setMouseCallback!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int highgui_createTrackbar(
					byte* trackbarName, 
					byte* winName, 
					int* value, 
					int count, 
					global::System.IntPtr onChange, 
					global::System.IntPtr userData)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_createTrackbar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int highgui_getTrackbarPos(
					byte* trackbarName, 
					byte* winName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_getTrackbarPos!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void highgui_setTrackbarPos(
					byte* trackbarName, 
					byte* winName, 
					int pos)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_setTrackbarPos!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int highgui_createButton(
					byte* barName, 
					global::System.IntPtr onChange, 
					global::System.IntPtr userdata, 
					int type, 
					int initialButtonState)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'highgui_createButton!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgcodecs_imread(
					byte* filename, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imread!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgcodecs_imreadmulti(
					byte* filename, 
					global::System.IntPtr mats, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imreadmulti!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgcodecs_imwrite(
					byte* filename, 
					global::System.IntPtr img, 
					int* @params, 
					int paramsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imwrite!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgcodecs_imdecode_Mat(
					global::System.IntPtr buf, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imdecode_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgcodecs_imdecode_vector(
					byte* buf, 
					global::System.IntPtr bufLength, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imdecode_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgcodecs_imdecode_InputArray(
					global::System.IntPtr buf, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imdecode_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgcodecs_imencode_vector(
					byte* ext, 
					global::System.IntPtr img, 
					global::System.IntPtr buf, 
					int* @params, 
					int paramsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_imencode_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgcodecs_cvConvertImage_CvArr(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_cvConvertImage_CvArr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgcodecs_cvConvertImage_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_cvConvertImage_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgcodecs_cvHaveImageReader(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_cvHaveImageReader!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgcodecs_cvHaveImageWriter(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgcodecs_cvHaveImageWriter!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_LatentSvmDetector_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_LatentSvmDetector_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_LatentSvmDetector_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_LatentSvmDetector_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_LatentSvmDetector_load(
					global::System.IntPtr obj, 
					global::System.IntPtr* fileNames, 
					int fileNamesLength, 
					global::System.IntPtr* classNames, 
					int classNamesLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_load!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_LatentSvmDetector_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectDetections, 
					float overlapThreshold, 
					int numThreads)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_detect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_LatentSvmDetector_getClassNames(
					global::System.IntPtr obj, 
					global::System.IntPtr outValues)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_getClassNames!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_LatentSvmDetector_getClassCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_LatentSvmDetector_getClassCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_CascadeClassifier_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_CascadeClassifier_newFromFile(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_newFromFile!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_CascadeClassifier_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_CascadeClassifier_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_CascadeClassifier_load(
					global::System.IntPtr obj, 
					byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_load!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_CascadeClassifier_detectMultiScale1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objects, 
					double scaleFactor, 
					int minNeighbors, 
					int flags, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					global::OpenCvSharp.Size__OpenCvSharp maxSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_detectMultiScale1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_CascadeClassifier_detectMultiScale2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objects, 
					global::System.IntPtr rejectLevels, 
					global::System.IntPtr levelWeights, 
					double scaleFactor, 
					int minNeighbors, 
					int flags, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					global::OpenCvSharp.Size__OpenCvSharp maxSize, 
					int outputRejectLevels)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_detectMultiScale2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_CascadeClassifier_isOldFormatCascade(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_isOldFormatCascade!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_CascadeClassifier_getOriginalWindowSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_getOriginalWindowSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_CascadeClassifier_getFeatureType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_CascadeClassifier_getFeatureType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_sizeof()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_sizeof!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_HOGDescriptor_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_HOGDescriptor_new2(
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					global::OpenCvSharp.Size__OpenCvSharp blockSize, 
					global::OpenCvSharp.Size__OpenCvSharp blockStride, 
					global::OpenCvSharp.Size__OpenCvSharp cellSize, 
					int nbins, 
					int derivAperture, 
					double winSigma, 
					global::OpenCvSharp.HistogramNormType__OpenCvSharp histogramNormType, 
					double l2HysThreshold, 
					int gammaCorrection, 
					int nlevels)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_HOGDescriptor_new3(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_delete(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr objdetect_HOGDescriptor_getDescriptorSize(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_getDescriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_checkDetectorSize(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_checkDetectorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double objdetect_HOGDescriptor_getWinSigma(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_getWinSigma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_setSVMDetector(
					global::System.IntPtr self, 
					global::System.IntPtr svmdetector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_setSVMDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_load(
					global::System.IntPtr self, 
					byte* filename, 
					byte* objname)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_load!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_save(
					global::System.IntPtr self, 
					byte* filename, 
					byte* objname)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_save!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_compute(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr descriptors, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp* locations, 
					int locationsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_compute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detect(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp* searchLocations, 
					int searchLocationsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detect__0(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr weights, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					global::OpenCvSharp.Point__OpenCvSharp* searchLocations, 
					int searchLocationsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detectMultiScale(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int groupThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detectMultiScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detectMultiScale__0(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr foundWeights, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int groupThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detectMultiScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_computeGradient(
					global::System.IntPtr self, 
					global::System.IntPtr img, 
					global::System.IntPtr grad, 
					global::System.IntPtr angleOfs, 
					global::OpenCvSharp.Size__OpenCvSharp paddingTL, 
					global::OpenCvSharp.Size__OpenCvSharp paddingBR)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_computeGradient!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detectROI(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp* locations, 
					int locationsLength, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr confidences, 
					double hitThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winStride, 
					global::OpenCvSharp.Size__OpenCvSharp padding)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detectROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_detectMultiScaleROI(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr foundLocations, 
					global::System.IntPtr roiScales, 
					global::System.IntPtr roiLocations, 
					global::System.IntPtr roiConfidences, 
					double hitThreshold, 
					int groupThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_detectMultiScaleROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_readALTModel(
					global::System.IntPtr obj, 
					byte* modelfile)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_readALTModel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_groupRectangles(
					global::System.IntPtr obj, 
					global::System.IntPtr rectList, 
					global::System.IntPtr weights, 
					int groupThreshold, 
					double eps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_groupRectangles!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_winSize_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_winSize_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_blockSize_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_blockSize_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_blockStride_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_blockStride_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp objdetect_HOGDescriptor_cellSize_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_cellSize_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_nbins_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_nbins_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_derivAperture_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_derivAperture_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double objdetect_HOGDescriptor_winSigma_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_winSigma_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_histogramNormType_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_histogramNormType_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double objdetect_HOGDescriptor_L2HysThreshold_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_L2HysThreshold_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_gammaCorrection_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_gammaCorrection_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int objdetect_HOGDescriptor_nlevels_get(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_nlevels_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_winSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_winSize_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_blockSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_blockSize_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_blockStride_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_blockStride_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_cellSize_set(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_cellSize_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_nbins_set(
					global::System.IntPtr self, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_nbins_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_derivAperture_set(
					global::System.IntPtr self, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_derivAperture_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_winSigma_set(
					global::System.IntPtr self, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_winSigma_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_histogramNormType_set(
					global::System.IntPtr self, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_histogramNormType_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_L2HysThreshold_set(
					global::System.IntPtr self, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_L2HysThreshold_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_gammaCorrection_set(
					global::System.IntPtr self, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_gammaCorrection_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_HOGDescriptor_nlevels_set(
					global::System.IntPtr self, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_HOGDescriptor_nlevels_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_groupRectangles1(
					global::System.IntPtr rectList, 
					int groupThreshold, 
					double eps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_groupRectangles1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_groupRectangles2(
					global::System.IntPtr rectList, 
					global::System.IntPtr weights, 
					int groupThreshold, 
					double eps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_groupRectangles2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_groupRectangles3(
					global::System.IntPtr rectList, 
					int groupThreshold, 
					double eps, 
					global::System.IntPtr weights, 
					global::System.IntPtr levelWeights)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_groupRectangles3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_groupRectangles4(
					global::System.IntPtr rectList, 
					global::System.IntPtr rejectLevels, 
					global::System.IntPtr levelWeights, 
					int groupThreshold, 
					double eps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_groupRectangles4!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void objdetect_groupRectangles_meanshift(
					global::System.IntPtr rectList, 
					global::System.IntPtr foundWeights, 
					global::System.IntPtr foundScales, 
					double detectThreshold, 
					global::OpenCvSharp.Size__OpenCvSharp winDetSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'objdetect_groupRectangles_meanshift!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void optflow_motempl_updateMotionHistory(
					global::System.IntPtr silhouette, 
					global::System.IntPtr mhi, 
					double timestamp, 
					double duration)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_motempl_updateMotionHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void optflow_motempl_calcMotionGradient(
					global::System.IntPtr mhi, 
					global::System.IntPtr mask, 
					global::System.IntPtr orientation, 
					double delta1, 
					double delta2, 
					int apertureSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_motempl_calcMotionGradient!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double optflow_motempl_calcGlobalOrientation(
					global::System.IntPtr orientation, 
					global::System.IntPtr mask, 
					global::System.IntPtr mhi, 
					double timestamp, 
					double duration)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_motempl_calcGlobalOrientation!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void optflow_motempl_segmentMotion(
					global::System.IntPtr mhi, 
					global::System.IntPtr segmask, 
					global::System.IntPtr boundingRects, 
					double timestamp, 
					double segThresh)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_motempl_segmentMotion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void optflow_calcOpticalFlowSF1(
					global::System.IntPtr from, 
					global::System.IntPtr to, 
					global::System.IntPtr flow, 
					int layers, 
					int averagingBlockSize, 
					int maxFlow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_calcOpticalFlowSF1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void optflow_calcOpticalFlowSF2(
					global::System.IntPtr from, 
					global::System.IntPtr to, 
					global::System.IntPtr flow, 
					int layers, 
					int averagingBlockSize, 
					int maxFlow, 
					double sigmaDist, 
					double sigmaColor, 
					int postprocessWindow, 
					double sigmaDistFix, 
					double sigmaColorFix, 
					double occThr, 
					int upscaleAveragingRadius, 
					double upscaleSigmaDist, 
					double upscaleSigmaColor, 
					double speedUpThr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'optflow_calcOpticalFlowSF2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_uchar_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_uchar_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_uchar_new3(
					byte* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_uchar_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_uchar_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_uchar_copy(
					global::System.IntPtr vector, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_uchar_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_uchar_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_uchar_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_char_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_char_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_char_new3(
					sbyte* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_char_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_char_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_char_copy(
					global::System.IntPtr vector, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_char_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_char_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_char_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_int32_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_int32_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_int32_new3(
					int* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_int32_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_int32_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_int32_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_int32_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_float_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_float_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_float_new3(
					float* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_float_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_float_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_float_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_float_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_double_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_double_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_double_new3(
					double* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_double_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_double_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_double_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_double_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec2f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec2f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec2f_new3(
					global::OpenCvSharp.Vec2f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec2f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec2f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec2f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec2f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec3f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec3f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec3f_new3(
					global::OpenCvSharp.Vec3f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec3f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec3f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec3f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec3f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4f_new3(
					global::OpenCvSharp.Vec4f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec4f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4i_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4i_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4i_new3(
					global::OpenCvSharp.Vec4i__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4i_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec4i_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec4i_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec4i_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6f_new3(
					global::OpenCvSharp.Vec6f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec6f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6d_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6d_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6d_new3(
					global::OpenCvSharp.Vec6d__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6d_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Vec6d_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Vec6d_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Vec6d_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2i_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2i_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2i_new3(
					global::OpenCvSharp.Point__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2i_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2i_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Point2i_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2i_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2f_new3(
					global::OpenCvSharp.Point2f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point2f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Point2f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point2f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point3f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point3f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point3f_new3(
					global::OpenCvSharp.Point3f__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point3f_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Point3f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Point3f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Point3f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Rect_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Rect_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Rect_new3(
					global::OpenCvSharp.Rect__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Rect_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Rect_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Rect_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Rect_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_KeyPoint_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_KeyPoint_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_KeyPoint_new3(
					global::OpenCvSharp.KeyPoint__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_KeyPoint_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_KeyPoint_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_KeyPoint_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_KeyPoint_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DMatch_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DMatch_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DMatch_new3(
					global::OpenCvSharp.DMatch__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DMatch_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DMatch_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_DMatch_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DMatch_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_int_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_int_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_int_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_int_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_int_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_int_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_int_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_int_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_float_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_float_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_float_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_float_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_float_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_float_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_float_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_float_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_double_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_double_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_double_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_double_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_double_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_double_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_double_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_double_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_KeyPoint_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_KeyPoint_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_KeyPoint_new3(
					global::System.IntPtr* values, 
					int size1, 
					int* size2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_KeyPoint_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_KeyPoint_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_KeyPoint_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_KeyPoint_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_KeyPoint_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_KeyPoint_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_DMatch_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_DMatch_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_DMatch_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_DMatch_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_DMatch_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_DMatch_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_DMatch_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_DMatch_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point2f_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point2f_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point2f_getSize1(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_getSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point2f_getSize2(
					global::System.IntPtr vector, 
					global::System.IntPtr* size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_getSize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_vector_Point2f_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point2f_copy(
					global::System.IntPtr vec, 
					global::System.IntPtr* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_copy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_vector_Point2f_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_vector_Point2f_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_string_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_string_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_string_getSize(global::System.IntPtr vec)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_string_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte* vector_string_elemAt(
					global::System.IntPtr vector, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_elemAt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_string_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_string_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Mat_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Mat_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Mat_new3(
					global::System.IntPtr data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Mat_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_Mat_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Mat_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Mat_assignToArray(
					global::System.IntPtr vector, 
					global::System.IntPtr* arr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_assignToArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_Mat_addref(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_Mat_addref!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Node_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Node_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Node_new3(
					global::OpenCvSharp.ML.DTrees_Node__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Node_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Node_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_DTrees_Node_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Node_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Split_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Split_new2(global::System.IntPtr size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Split_new3(
					global::OpenCvSharp.ML.DTrees_Split__OpenCvSharp* data, 
					global::System.IntPtr dataLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Split_getSize(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_getSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr vector_DTrees_Split_getPointer(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_getPointer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void vector_DTrees_Split_delete(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'vector_DTrees_Split_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr stitching_createStitcher(int try_use_cpu)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_createStitcher!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Ptr_Stitcher_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Ptr_Stitcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr stitching_Ptr_Stitcher_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Ptr_Stitcher_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double stitching_Stitcher_registrationResol(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_registrationResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setRegistrationResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setRegistrationResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double stitching_Stitcher_seamEstimationResol(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_seamEstimationResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setSeamEstimationResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setSeamEstimationResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double stitching_Stitcher_compositingResol(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_compositingResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setCompositingResol(
					global::System.IntPtr obj, 
					double resolMpx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setCompositingResol!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double stitching_Stitcher_panoConfidenceThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_panoConfidenceThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setPanoConfidenceThresh(
					global::System.IntPtr obj, 
					double confThresh)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setPanoConfidenceThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_waveCorrection(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_waveCorrection!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setWaveCorrection(
					global::System.IntPtr obj, 
					int flag)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setWaveCorrection!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_waveCorrectKind(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_waveCorrectKind!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_setWaveCorrectKind(
					global::System.IntPtr obj, 
					int kind)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_setWaveCorrectKind!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_estimateTransform_InputArray1(
					global::System.IntPtr obj, 
					global::System.IntPtr images)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_estimateTransform_InputArray1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_estimateTransform_InputArray2(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr* rois, 
					int roisSize1, 
					int* roisSize2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_estimateTransform_InputArray2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_estimateTransform_MatArray1(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_estimateTransform_MatArray1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_estimateTransform_MatArray2(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize, 
					global::System.IntPtr* rois, 
					int roisSize1, 
					int* roisSize2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_estimateTransform_MatArray2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_composePanorama1(
					global::System.IntPtr obj, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_composePanorama1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_composePanorama2_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_composePanorama2_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_composePanorama2_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_composePanorama2_MatArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_stitch1_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_stitch1_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_stitch1_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_stitch1_MatArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_stitch2_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr images, 
					global::System.IntPtr* rois, 
					int roisSize1, 
					int* roisSize2, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_stitch2_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int stitching_Stitcher_stitch2_MatArray(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize, 
					global::System.IntPtr* rois, 
					int roisSize1, 
					int* roisSize2, 
					global::System.IntPtr pano)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_stitch2_MatArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void stitching_Stitcher_component(
					global::System.IntPtr obj, 
					global::System.IntPtr* pointer, 
					int* length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_component!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double stitching_Stitcher_workScale(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'stitching_Stitcher_workScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_FrameSource_nextFrame(
					global::System.IntPtr obj, 
					global::System.IntPtr frame)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_FrameSource_nextFrame!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_FrameSource_reset(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_FrameSource_reset!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createFrameSource_Empty()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createFrameSource_Empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createFrameSource_Video(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createFrameSource_Video!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createFrameSource_Video_CUDA(byte* fileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createFrameSource_Video_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createFrameSource_Camera(int deviceId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createFrameSource_Camera!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_Ptr_FrameSource_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_FrameSource_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_Ptr_FrameSource_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_FrameSource_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_SuperResolution_setInput(
					global::System.IntPtr obj, 
					global::System.IntPtr frameSource)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_SuperResolution_setInput!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_SuperResolution_nextFrame(
					global::System.IntPtr obj, 
					global::System.IntPtr frame)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_SuperResolution_nextFrame!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_SuperResolution_reset(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_SuperResolution_reset!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_SuperResolution_collectGarbage(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_SuperResolution_collectGarbage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_SuperResolution_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_SuperResolution_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createSuperResolution_BTVL1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createSuperResolution_BTVL1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createSuperResolution_BTVL1_CUDA()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createSuperResolution_BTVL1_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_Ptr_SuperResolution_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_SuperResolution_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_Ptr_SuperResolution_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_SuperResolution_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_DenseOpticalFlowExt_calc(
					global::System.IntPtr obj, 
					global::System.IntPtr frame0, 
					global::System.IntPtr frame1, 
					global::System.IntPtr flow1, 
					global::System.IntPtr flow2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_DenseOpticalFlowExt_calc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_DenseOpticalFlowExt_collectGarbage(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_DenseOpticalFlowExt_collectGarbage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_DenseOpticalFlowExt_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_DenseOpticalFlowExt_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_Ptr_DenseOpticalFlowExt_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_DenseOpticalFlowExt_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void superres_Ptr_DenseOpticalFlowExt_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_Ptr_DenseOpticalFlowExt_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_Farneback()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_Farneback!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_Farneback_CUDA()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_Farneback_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_DualTVL1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_DualTVL1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_DualTVL1_CUDA()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_DualTVL1_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_Brox_CUDA()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_Brox_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr superres_createOptFlow_PyrLK_CUDA()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'superres_createOptFlow_PyrLK_CUDA!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr videoio_VideoCapture_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr videoio_VideoCapture_new2(byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr videoio_VideoCapture_new3(int device)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoCapture_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_open1(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_open1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_open2(
					global::System.IntPtr obj, 
					int device)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_open2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_isOpened(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_isOpened!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoCapture_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_grab(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_grab!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_retrieve(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					int flag)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_retrieve!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoCapture_operatorRightShift_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_operatorRightShift_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoCapture_operatorRightShift_UMat(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_operatorRightShift_UMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_read(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_read!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoCapture_set(
					global::System.IntPtr obj, 
					int propId, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double videoio_VideoCapture_get(
					global::System.IntPtr obj, 
					int propId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoCapture_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr videoio_VideoWriter_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr videoio_VideoWriter_new2(
					byte* filename, 
					int fourcc, 
					double fps, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int isColor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoWriter_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoWriter_open(
					global::System.IntPtr obj, 
					byte* filename, 
					int fourcc, 
					double fps, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int isColor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_open!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoWriter_isOpened(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_isOpened!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoWriter_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoWriter_OperatorLeftShift(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_OperatorLeftShift!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void videoio_VideoWriter_write(
					global::System.IntPtr obj, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_write!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoWriter_set(
					global::System.IntPtr obj, 
					int propId, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double videoio_VideoWriter_get(
					global::System.IntPtr obj, 
					int propId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int videoio_VideoWriter_fourcc(
					byte c1, 
					byte c2, 
					byte c3, 
					byte c4)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'videoio_VideoWriter_fourcc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_BriefDescriptorExtractor_create(int bytes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_Ptr_BriefDescriptorExtractor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_BriefDescriptorExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_BriefDescriptorExtractor_read(
					global::System.IntPtr obj, 
					global::System.IntPtr fn)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_read!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_BriefDescriptorExtractor_write(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_write!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_BriefDescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_descriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_BriefDescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_descriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_BriefDescriptorExtractor_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_BriefDescriptorExtractor_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_Ptr_BriefDescriptorExtractor_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_BriefDescriptorExtractor_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_FREAK_create(
					int orientationNormalized, 
					int scaleNormalized, 
					float patternScale, 
					int nOctaves, 
					int* selectedPairs, 
					int selectedPairsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_FREAK_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_Ptr_FREAK_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_FREAK_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_FREAK_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_FREAK_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_Ptr_FREAK_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_FREAK_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_StarDetector_create(
					int maxSize, 
					int responseThreshold, 
					int lineThresholdProjected, 
					int lineThresholdBinarized, 
					int suppressNonmaxSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_StarDetector_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_Ptr_StarDetector_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_StarDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_StarDetector_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_StarDetector_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_Ptr_StarDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_StarDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_SURF_create(
					double hessianThreshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int extended, 
					int upright)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_Ptr_SURF_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_SURF_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_Ptr_SURF_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_SURF_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_SURF_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double xfeatures2d_SURF_getHessianThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_getHessianThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_SURF_getNOctaves(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_getNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_SURF_getNOctaveLayers(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_getNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_SURF_getExtended(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_getExtended!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int xfeatures2d_SURF_getUpright(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_getUpright!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_SURF_setHessianThreshold(
					global::System.IntPtr obj, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_setHessianThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_SURF_setNOctaves(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_setNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_SURF_setNOctaveLayers(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_setNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_SURF_setExtended(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_setExtended!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_SURF_setUpright(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SURF_setUpright!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_SIFT_create(
					int nfeatures, 
					int nOctaveLayers, 
					double contrastThreshold, 
					double edgeThreshold, 
					double sigma)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SIFT_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void xfeatures2d_Ptr_SIFT_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_SIFT_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_Ptr_SIFT_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_Ptr_SIFT_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr xfeatures2d_SIFT_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'xfeatures2d_SIFT_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_Rodrigues(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr jacobian)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Rodrigues!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_Rodrigues_VecToMat(
					global::System.IntPtr vector, 
					global::System.IntPtr matrix, 
					global::System.IntPtr jacobian)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Rodrigues_VecToMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_Rodrigues_MatToVec(
					global::System.IntPtr vector, 
					global::System.IntPtr matrix, 
					global::System.IntPtr jacobian)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Rodrigues_MatToVec!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_findHomography_InputArray(
					global::System.IntPtr srcPoints, 
					global::System.IntPtr dstPoints, 
					int method, 
					double ransacReprojThreshold, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findHomography_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_findHomography_vector(
					global::OpenCvSharp.Point2d__OpenCvSharp* srcPoints, 
					int srcPointsLength, 
					global::OpenCvSharp.Point2d__OpenCvSharp* dstPoints, 
					int dstPointsLength, 
					int method, 
					double ransacReprojThreshold, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findHomography_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_RQDecomp3x3_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr mtxR, 
					global::System.IntPtr mtxQ, 
					global::System.IntPtr qx, 
					global::System.IntPtr qy, 
					global::System.IntPtr qz, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* outVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_RQDecomp3x3_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_RQDecomp3x3_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr mtxR, 
					global::System.IntPtr mtxQ, 
					global::System.IntPtr qx, 
					global::System.IntPtr qy, 
					global::System.IntPtr qz, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* outVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_RQDecomp3x3_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_decomposeProjectionMatrix_InputArray(
					global::System.IntPtr projMatrix, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr rotMatrix, 
					global::System.IntPtr transVect, 
					global::System.IntPtr rotMatrixX, 
					global::System.IntPtr rotMatrixY, 
					global::System.IntPtr rotMatrixZ, 
					global::System.IntPtr eulerAngles)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_decomposeProjectionMatrix_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_decomposeProjectionMatrix_Mat(
					global::System.IntPtr projMatrix, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr rotMatrix, 
					global::System.IntPtr transVect, 
					global::System.IntPtr rotMatrixX, 
					global::System.IntPtr rotMatrixY, 
					global::System.IntPtr rotMatrixZ, 
					global::System.IntPtr eulerAngles)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_decomposeProjectionMatrix_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_matMulDeriv(
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					global::System.IntPtr dABdA, 
					global::System.IntPtr dABdB)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_matMulDeriv!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_composeRT_InputArray(
					global::System.IntPtr rvec1, 
					global::System.IntPtr tvec1, 
					global::System.IntPtr rvec2, 
					global::System.IntPtr tvec2, 
					global::System.IntPtr rvec3, 
					global::System.IntPtr tvec3, 
					global::System.IntPtr dr3dr1, 
					global::System.IntPtr dr3dt1, 
					global::System.IntPtr dr3dr2, 
					global::System.IntPtr dr3dt2, 
					global::System.IntPtr dt3dr1, 
					global::System.IntPtr dt3dt1, 
					global::System.IntPtr dt3dr2, 
					global::System.IntPtr dt3dt2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_composeRT_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_composeRT_Mat(
					global::System.IntPtr rvec1, 
					global::System.IntPtr tvec1, 
					global::System.IntPtr rvec2, 
					global::System.IntPtr tvec2, 
					global::System.IntPtr rvec3, 
					global::System.IntPtr tvec3, 
					global::System.IntPtr dr3dr1, 
					global::System.IntPtr dr3dt1, 
					global::System.IntPtr dr3dr2, 
					global::System.IntPtr dr3dt2, 
					global::System.IntPtr dt3dr1, 
					global::System.IntPtr dt3dt1, 
					global::System.IntPtr dt3dr2, 
					global::System.IntPtr dt3dt2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_composeRT_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_projectPoints_InputArray(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr jacobian, 
					double aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_projectPoints_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_projectPoints_Mat(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr jacobian, 
					double aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_projectPoints_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_solvePnP_InputArray(
					global::System.IntPtr selfectPoints, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					int useExtrinsicGuess, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_solvePnP_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_solvePnP_vector(
					global::OpenCvSharp.Point3f__OpenCvSharp* objectPoints, 
					int objectPointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp* imagePoints, 
					int imagePointsLength, 
					double* cameraMatrix, 
					double* distCoeffs, 
					int distCoeffsLength, 
					double* rvec, 
					double* tvec, 
					int useExtrinsicGuess, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_solvePnP_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_solvePnPRansac_InputArray(
					global::System.IntPtr objectPoints, 
					global::System.IntPtr imagePoints, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvec, 
					global::System.IntPtr tvec, 
					int useExtrinsicGuess, 
					int iterationsCount, 
					float reprojectionError, 
					double confidence, 
					global::System.IntPtr inliers, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_solvePnPRansac_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_solvePnPRansac_vector(
					global::OpenCvSharp.Point3f__OpenCvSharp* objectPoints, 
					int objectPointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp* imagePoints, 
					int imagePointsLength, 
					double* cameraMatrix, 
					double* distCoeffs, 
					int distCoeffsLength, 
					double* rvec, 
					double* tvec, 
					int useExtrinsicGuess, 
					int iterationsCount, 
					float reprojectionError, 
					double confidence, 
					global::System.IntPtr inliers, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_solvePnPRansac_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_initCameraMatrix2D_Mat(
					global::System.IntPtr* objectPoints, 
					int objectPointsLength, 
					global::System.IntPtr* imagePoints, 
					int imagePointsLength, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_initCameraMatrix2D_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_initCameraMatrix2D_array(
					global::System.IntPtr* objectPoints, 
					int opSize1, 
					int* opSize2, 
					global::System.IntPtr* imagePoints, 
					int ipSize1, 
					int* ipSize2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_initCameraMatrix2D_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_findChessboardCorners_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findChessboardCorners_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_findChessboardCorners_vector(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findChessboardCorners_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_find4QuadCornerSubpix_InputArray(
					global::System.IntPtr img, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp regionSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_find4QuadCornerSubpix_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_find4QuadCornerSubpix_vector(
					global::System.IntPtr img, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp regionSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_find4QuadCornerSubpix_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_drawChessboardCorners_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr corners, 
					int patternWasFound)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_drawChessboardCorners_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_drawChessboardCorners_array(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::OpenCvSharp.Point2f__OpenCvSharp* corners, 
					int cornersLength, 
					int patternWasFound)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_drawChessboardCorners_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_findCirclesGrid_InputArray(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr centers, 
					int flags, 
					global::System.IntPtr blobDetector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findCirclesGrid_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_findCirclesGrid_vector(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patternSize, 
					global::System.IntPtr centers, 
					int flags, 
					global::System.IntPtr blobDetector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findCirclesGrid_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double calib3d_calibrateCamera_InputArray(
					global::System.IntPtr* objectPoints, 
					int objectPointsSize, 
					global::System.IntPtr* imagePoints, 
					int imagePointsSize, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr rvecs, 
					global::System.IntPtr tvecs, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_calibrateCamera_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double calib3d_calibrateCamera_vector(
					global::System.IntPtr* objectPoints, 
					int opSize1, 
					int* opSize2, 
					global::System.IntPtr* imagePoints, 
					int ipSize1, 
					int* ipSize2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double* cameraMatrix, 
					double* distCoeffs, 
					int distCoeffsSize, 
					global::System.IntPtr rvecs, 
					global::System.IntPtr tvecs, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_calibrateCamera_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_calibrationMatrixValues_InputArray(
					global::System.IntPtr cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double apertureWidth, 
					double apertureHeight, 
					double* fovx, 
					double* fovy, 
					double* focalLength, 
					global::OpenCvSharp.Point2d__OpenCvSharp* principalPoint, 
					double* aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_calibrationMatrixValues_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_calibrationMatrixValues_array(
					double* cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double apertureWidth, 
					double apertureHeight, 
					double* fovx, 
					double* fovy, 
					double* focalLength, 
					global::OpenCvSharp.Point2d__OpenCvSharp* principalPoint, 
					double* aspectRatio)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_calibrationMatrixValues_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double calib3d_stereoCalibrate_InputArray(
					global::System.IntPtr* objectPoints, 
					int opSize, 
					global::System.IntPtr* imagePoints1, 
					int ip1Size, 
					global::System.IntPtr* imagePoints2, 
					int ip2Size, 
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr E, 
					global::System.IntPtr F, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoCalibrate_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double calib3d_stereoCalibrate_array(
					global::System.IntPtr* objectPoints, 
					int opSize1, 
					int* opSizes2, 
					global::System.IntPtr* imagePoints1, 
					int ip1Size1, 
					int* ip1Sizes2, 
					global::System.IntPtr* imagePoints2, 
					int ip2Size1, 
					int* ip2Sizes2, 
					double* cameraMatrix1, 
					double* distCoeffs1, 
					int dc1Size, 
					double* cameraMatrix2, 
					double* distCoeffs2, 
					int dc2Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr E, 
					global::System.IntPtr F, 
					int flags, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoCalibrate_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_stereoRectify_InputArray(
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R, 
					global::System.IntPtr T, 
					global::System.IntPtr R1, 
					global::System.IntPtr R2, 
					global::System.IntPtr P1, 
					global::System.IntPtr P2, 
					global::System.IntPtr Q, 
					int flags, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImageSize, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI1, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoRectify_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_stereoRectify_array(
					double* cameraMatrix1, 
					double* distCoeffs1, 
					int dc1Size, 
					double* cameraMatrix2, 
					double* distCoeffs2, 
					int dc2Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double* R, 
					double* T, 
					double* R1, 
					double* R2, 
					double* P1, 
					double* P2, 
					double* Q, 
					int flags, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImageSize, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI1, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoRectify_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_stereoRectifyUncalibrated_InputArray(
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					global::System.IntPtr F, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					global::System.IntPtr H1, 
					global::System.IntPtr H2, 
					double threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoRectifyUncalibrated_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_stereoRectifyUncalibrated_array(
					global::OpenCvSharp.Point2d__OpenCvSharp* points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp* points2, 
					int points2Size, 
					double* F, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					double* H1, 
					double* H2, 
					double threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_stereoRectifyUncalibrated_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float calib3d_rectify3Collinear_InputArray(
					global::System.IntPtr cameraMatrix1, 
					global::System.IntPtr distCoeffs1, 
					global::System.IntPtr cameraMatrix2, 
					global::System.IntPtr distCoeffs2, 
					global::System.IntPtr cameraMatrix3, 
					global::System.IntPtr distCoeffs3, 
					global::System.IntPtr* imgpt1, 
					int imgpt1Size, 
					global::System.IntPtr* imgpt3, 
					int imgpt3Size, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					global::System.IntPtr R12, 
					global::System.IntPtr T12, 
					global::System.IntPtr R13, 
					global::System.IntPtr T13, 
					global::System.IntPtr R1, 
					global::System.IntPtr R2, 
					global::System.IntPtr R3, 
					global::System.IntPtr P1, 
					global::System.IntPtr P2, 
					global::System.IntPtr P3, 
					global::System.IntPtr Q, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					global::OpenCvSharp.Rect__OpenCvSharp* roi1, 
					global::OpenCvSharp.Rect__OpenCvSharp* roi2, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_rectify3Collinear_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_getOptimalNewCameraMatrix_InputArray(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI, 
					int centerPrincipalPoint)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_getOptimalNewCameraMatrix_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_getOptimalNewCameraMatrix_array(
					double* cameraMatrix, 
					double* distCoeffs, 
					int distCoeffsSize, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					double alpha, 
					global::OpenCvSharp.Size__OpenCvSharp newImgSize, 
					global::OpenCvSharp.Rect__OpenCvSharp* validPixROI, 
					int centerPrincipalPoint, 
					double* outValues)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_getOptimalNewCameraMatrix_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsToHomogeneous_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsToHomogeneous_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsToHomogeneous_array1(
					global::OpenCvSharp.Vec2f__OpenCvSharp* src, 
					global::OpenCvSharp.Vec3f__OpenCvSharp* dst, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsToHomogeneous_array1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsToHomogeneous_array2(
					global::OpenCvSharp.Vec3f__OpenCvSharp* src, 
					global::OpenCvSharp.Vec4f__OpenCvSharp* dst, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsToHomogeneous_array2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsFromHomogeneous_InputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsFromHomogeneous_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsFromHomogeneous_array1(
					global::OpenCvSharp.Vec3f__OpenCvSharp* src, 
					global::OpenCvSharp.Vec2f__OpenCvSharp* dst, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsFromHomogeneous_array1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsFromHomogeneous_array2(
					global::OpenCvSharp.Vec4f__OpenCvSharp* src, 
					global::OpenCvSharp.Vec3f__OpenCvSharp* dst, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsFromHomogeneous_array2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_convertPointsHomogeneous(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_convertPointsHomogeneous!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_findFundamentalMat_InputArray(
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					int method, 
					double param1, 
					double param2, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findFundamentalMat_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_findFundamentalMat_array(
					global::OpenCvSharp.Point2d__OpenCvSharp* points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp* points2, 
					int points2Size, 
					int method, 
					double param1, 
					double param2, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_findFundamentalMat_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_computeCorrespondEpilines_InputArray(
					global::System.IntPtr points, 
					int whichImage, 
					global::System.IntPtr F, 
					global::System.IntPtr lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_computeCorrespondEpilines_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_computeCorrespondEpilines_array2d(
					global::OpenCvSharp.Point2d__OpenCvSharp* points, 
					int pointsSize, 
					int whichImage, 
					double* F, 
					global::OpenCvSharp.Point3f__OpenCvSharp* lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_computeCorrespondEpilines_array2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_computeCorrespondEpilines_array3d(
					global::OpenCvSharp.Point3d__OpenCvSharp* points, 
					int pointsSize, 
					int whichImage, 
					double* F, 
					global::OpenCvSharp.Point3f__OpenCvSharp* lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_computeCorrespondEpilines_array3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_triangulatePoints_InputArray(
					global::System.IntPtr projMatr1, 
					global::System.IntPtr projMatr2, 
					global::System.IntPtr projPoints1, 
					global::System.IntPtr projPoints2, 
					global::System.IntPtr points4D)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_triangulatePoints_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_triangulatePoints_array(
					double* projMatr1, 
					double* projMatr2, 
					global::OpenCvSharp.Point2d__OpenCvSharp* projPoints1, 
					int projPoints1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp* projPoints2, 
					int projPoints2Size, 
					global::OpenCvSharp.Vec4d__OpenCvSharp* points4D)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_triangulatePoints_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_correctMatches_InputArray(
					global::System.IntPtr F, 
					global::System.IntPtr points1, 
					global::System.IntPtr points2, 
					global::System.IntPtr newPoints1, 
					global::System.IntPtr newPoints2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_correctMatches_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_correctMatches_array(
					double* F, 
					global::OpenCvSharp.Point2d__OpenCvSharp* points1, 
					int points1Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp* points2, 
					int points2Size, 
					global::OpenCvSharp.Point2d__OpenCvSharp* newPoints1, 
					global::OpenCvSharp.Point2d__OpenCvSharp* newPoints2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_correctMatches_array!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_filterSpeckles(
					global::System.IntPtr img, 
					double newVal, 
					int maxSpeckleSize, 
					double maxDiff, 
					global::System.IntPtr buf)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_filterSpeckles!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_getValidDisparityROI(
					global::OpenCvSharp.Rect__OpenCvSharp roi1, 
					global::OpenCvSharp.Rect__OpenCvSharp roi2, 
					int minDisparity, 
					int numberOfDisparities, 
					int SADWindowSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_getValidDisparityROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_validateDisparity(
					global::System.IntPtr disparity, 
					global::System.IntPtr cost, 
					int minDisparity, 
					int numberOfDisparities, 
					int disp12MaxDisp)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_validateDisparity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_reprojectImageTo3D(
					global::System.IntPtr disparity, 
					global::System.IntPtr _3dImage, 
					global::System.IntPtr Q, 
					int handleMissingValues, 
					int ddepth)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_reprojectImageTo3D!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_estimateAffine3D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr outVal, 
					global::System.IntPtr inliers, 
					double ransacThreshold, 
					double confidence)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_estimateAffine3D!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_Ptr_StereoBM_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoBM_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_Ptr_StereoBM_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoBM_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_StereoBM_create(
					int numDisparities, 
					int blockSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_Ptr_StereoBM_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoBM_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getPreFilterType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getPreFilterType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setPreFilterType(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setPreFilterType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getPreFilterSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getPreFilterSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setPreFilterSize(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setPreFilterSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getPreFilterCap(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getPreFilterCap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setPreFilterCap(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setPreFilterCap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getTextureThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getTextureThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setTextureThreshold(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setTextureThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getUniquenessRatio(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getUniquenessRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setUniquenessRatio(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setUniquenessRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoBM_getSmallerBlockSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getSmallerBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setSmallerBlockSize(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setSmallerBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_StereoBM_getROI1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getROI1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setROI1(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setROI1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp calib3d_StereoBM_getROI2(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_getROI2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoBM_setROI2(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoBM_setROI2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_compute(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_compute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_Ptr_StereoMatcher_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoMatcher_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getMinDisparity(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getMinDisparity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setMinDisparity(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setMinDisparity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getNumDisparities(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getNumDisparities!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setNumDisparities(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setNumDisparities!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getBlockSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setBlockSize(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getSpeckleWindowSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getSpeckleWindowSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setSpeckleWindowSize(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setSpeckleWindowSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getSpeckleRange(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getSpeckleRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setSpeckleRange(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setSpeckleRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoMatcher_getDisp12MaxDiff(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_getDisp12MaxDiff!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoMatcher_setDisp12MaxDiff(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoMatcher_setDisp12MaxDiff!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_Ptr_StereoSGBM_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoSGBM_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_Ptr_StereoSGBM_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoSGBM_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_StereoSGBM_create(
					int minDisparity, 
					int numDisparities, 
					int blockSize, 
					int P1, 
					int P2, 
					int disp12MaxDiff, 
					int preFilterCap, 
					int uniquenessRatio, 
					int speckleWindowSize, 
					int speckleRange, 
					int mode)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr calib3d_Ptr_StereoSGBM_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_Ptr_StereoSGBM_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoSGBM_getPreFilterCap(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_getPreFilterCap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoSGBM_setPreFilterCap(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_setPreFilterCap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoSGBM_getUniquenessRatio(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_getUniquenessRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoSGBM_setUniquenessRatio(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_setUniquenessRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoSGBM_getP1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_getP1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoSGBM_setP1(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_setP1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoSGBM_getP2(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_getP2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoSGBM_setP2(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_setP2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int calib3d_StereoSGBM_getMode(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_getMode!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void calib3d_StereoSGBM_setMode(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'calib3d_StereoSGBM_setMode!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_setNumThreads(int nthreads)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_setNumThreads!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_getNumThreads()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getNumThreads!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_getThreadNum()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getThreadNum!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_getBuildInformation(
					byte* buf, 
					int maxLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getBuildInformation!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_getBuildInformation_length()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getBuildInformation_length!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long core_getTickCount()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getTickCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_getTickFrequency()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getTickFrequency!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long core_getCPUTickCount()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getCPUTickCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_checkHardwareSupport(int feature)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_checkHardwareSupport!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_getNumberOfCPUs()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getNumberOfCPUs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_fastMalloc(global::System.IntPtr bufSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_fastMalloc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_fastFree(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_fastFree!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_setUseOptimized(int onoff)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_setUseOptimized!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_useOptimized()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_useOptimized!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr redirectError(
					void* errCallback, 
					global::System.IntPtr userdata, 
					global::System.IntPtr* prevUserdata)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'redirectError!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_cvarrToMat(
					global::System.IntPtr arr, 
					int copyData, 
					int allowND, 
					int coiMode)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_cvarrToMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_extractImageCOI(
					global::System.IntPtr arr, 
					global::System.IntPtr coiimg, 
					int coi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_extractImageCOI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_insertImageCOI(
					global::System.IntPtr coiimg, 
					global::System.IntPtr arr, 
					int coi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_insertImageCOI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_add(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_add!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_subtract(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_subtract!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_multiply(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					double scale, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_multiply!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_divide(
					double scale, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_divide!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_divide__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					double scale, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_divide!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_scaleAdd(
					global::System.IntPtr src1, 
					double alpha, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_scaleAdd!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_addWeighted(
					global::System.IntPtr src1, 
					double alpha, 
					global::System.IntPtr src2, 
					double beta, 
					double gamma, 
					global::System.IntPtr dst, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_addWeighted!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_convertScaleAbs(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					double beta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_convertScaleAbs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_LUT(
					global::System.IntPtr src, 
					global::System.IntPtr lut, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_LUT!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Scalar__OpenCvSharp core_sum(global::System.IntPtr src)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_sum!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_countNonZero(global::System.IntPtr src)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_countNonZero!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_findNonZero(
					global::System.IntPtr src, 
					global::System.IntPtr idx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_findNonZero!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Scalar__OpenCvSharp core_mean(
					global::System.IntPtr src, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_mean!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_meanStdDev_OutputArray(
					global::System.IntPtr src, 
					global::System.IntPtr mean, 
					global::System.IntPtr stddev, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_meanStdDev_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_meanStdDev_Scalar(
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp* mean, 
					global::OpenCvSharp.Scalar__OpenCvSharp* stddev, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_meanStdDev_Scalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_norm(
					global::System.IntPtr src1, 
					int normType, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_norm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_norm__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					int normType, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_norm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_batchDistance(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dist, 
					int dtype, 
					global::System.IntPtr nidx, 
					int normType, 
					int k, 
					global::System.IntPtr mask, 
					int update, 
					int crosscheck)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_batchDistance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_normalize(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					double beta, 
					int normType, 
					int dtype, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_normalize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_minMaxLoc(
					global::System.IntPtr src, 
					double* minVal, 
					double* maxVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_minMaxLoc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_minMaxLoc__0(
					global::System.IntPtr src, 
					double* minVal, 
					double* maxVal, 
					global::OpenCvSharp.Point__OpenCvSharp* minLoc, 
					global::OpenCvSharp.Point__OpenCvSharp* maxLoc, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_minMaxLoc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_minMaxIdx(
					global::System.IntPtr src, 
					double* minVal, 
					double* maxVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_minMaxIdx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_minMaxIdx__0(
					global::System.IntPtr src, 
					double* minVal, 
					double* maxVal, 
					int* minIdx, 
					int* maxIdx, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_minMaxIdx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_reduce(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int dim, 
					int rtype, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_reduce!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_merge(
					global::System.IntPtr* mv, 
					uint count, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_merge!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_split(
					global::System.IntPtr src, 
					global::System.IntPtr* mv)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_split!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_mixChannels(
					global::System.IntPtr* src, 
					uint nsrcs, 
					global::System.IntPtr* dst, 
					uint ndsts, 
					int* fromTo, 
					uint npairs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_mixChannels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_extractChannel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int coi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_extractChannel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_insertChannel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int coi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_insertChannel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_flip(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flipCode)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_flip!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_repeat(
					global::System.IntPtr src, 
					int ny, 
					int nx, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_repeat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_repeat__0(
					global::System.IntPtr src, 
					int ny, 
					int nx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_repeat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_hconcat(
					global::System.IntPtr* src, 
					uint nsrc, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_hconcat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_hconcat__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_hconcat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_vconcat(
					global::System.IntPtr* src, 
					uint nsrc, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_vconcat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_vconcat__0(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_vconcat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_bitwise_and(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_bitwise_and!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_bitwise_or(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_bitwise_or!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_bitwise_xor(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_bitwise_xor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_bitwise_not(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_bitwise_not!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_absdiff(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_absdiff!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_inRange(
					global::System.IntPtr src, 
					global::System.IntPtr lowerb, 
					global::System.IntPtr upperb, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_inRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_inRange__0(
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp lowerb, 
					global::OpenCvSharp.Scalar__OpenCvSharp upperb, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_inRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_compare(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int cmpop)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_compare!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_min1(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_min1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_max1(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_max1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_min_MatMat(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_min_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_min_MatDouble(
					global::System.IntPtr src1, 
					double src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_min_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_max_MatMat(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_max_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_max_MatDouble(
					global::System.IntPtr src1, 
					double src2, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_max_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_sqrt(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_sqrt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_pow_Mat(
					global::System.IntPtr src, 
					double power, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_pow_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_exp_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_exp_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_log_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_log_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float core_cubeRoot(float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_cubeRoot!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float core_fastAtan2(
					float y, 
					float x)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_fastAtan2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_polarToCart(
					global::System.IntPtr magnitude, 
					global::System.IntPtr angle, 
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					int angleInDegrees)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_polarToCart!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_cartToPolar(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr magnitude, 
					global::System.IntPtr angle, 
					int angleInDegrees)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_cartToPolar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_phase(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr angle, 
					int angleInDegrees)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_phase!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_magnitude_Mat(
					global::System.IntPtr x, 
					global::System.IntPtr y, 
					global::System.IntPtr magnitude)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_magnitude_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_checkRange(
					global::System.IntPtr a, 
					int quiet, 
					global::OpenCvSharp.Point__OpenCvSharp* pos, 
					double minVal, 
					double maxVal)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_checkRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_patchNaNs(
					global::System.IntPtr a, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_patchNaNs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_gemm(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					double alpha, 
					global::System.IntPtr src3, 
					double gamma, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_gemm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_mulTransposed(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int aTa, 
					global::System.IntPtr delta, 
					double scale, 
					int dtype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_mulTransposed!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_transpose(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_transpose!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_transform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_transform!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform_Mat(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform_Point2f(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform_Point2d(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform_Point2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform_Point3f(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform_Point3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_perspectiveTransform_Point3d(
					global::System.IntPtr src, 
					int srcLength, 
					global::System.IntPtr dst, 
					int dstLength, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_perspectiveTransform_Point3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_completeSymm(
					global::System.IntPtr mtx, 
					int lowerToUpper)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_completeSymm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_setIdentity(
					global::System.IntPtr mtx, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_setIdentity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_determinant(global::System.IntPtr mtx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_determinant!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Scalar__OpenCvSharp core_trace(global::System.IntPtr mtx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_trace!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_invert(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_invert!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_solve(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_solve!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_sort(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_sort!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_sortIdx(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_sortIdx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_solveCubic(
					global::System.IntPtr coeffs, 
					global::System.IntPtr roots)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_solveCubic!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_solvePoly(
					global::System.IntPtr coeffs, 
					global::System.IntPtr roots, 
					int maxIters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_solvePoly!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_eigen(
					global::System.IntPtr src, 
					global::System.IntPtr eigenvalues, 
					global::System.IntPtr eigenvectors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_eigen!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_calcCovarMatrix_Mat(
					global::System.IntPtr* samples, 
					int nsamples, 
					global::System.IntPtr covar, 
					global::System.IntPtr mean, 
					int flags, 
					int ctype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_calcCovarMatrix_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_calcCovarMatrix_InputArray(
					global::System.IntPtr samples, 
					global::System.IntPtr covar, 
					global::System.IntPtr mean, 
					int flags, 
					int ctype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_calcCovarMatrix_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCACompute(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					int maxComponents)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCACompute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCAComputeVar(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					double retainedVariance)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCAComputeVar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCAProject(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCAProject!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCABackProject(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					global::System.IntPtr eigenvectors, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCABackProject!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVDecomp(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVDecomp!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVBackSubst(
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVBackSubst!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_Mahalanobis(
					global::System.IntPtr v1, 
					global::System.IntPtr v2, 
					global::System.IntPtr icovar)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mahalanobis!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_dft(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					int nonzeroRows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_dft!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_idft(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					int nonzeroRows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_idft!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_dct(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_dct!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_idct(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_idct!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_mulSpectrums(
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					global::System.IntPtr c, 
					int flags, 
					int conjB)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_mulSpectrums!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_getOptimalDFTSize(int vecsize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getOptimalDFTSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_kmeans(
					global::System.IntPtr data, 
					int k, 
					global::System.IntPtr bestLabels, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int attempts, 
					int flags, 
					global::System.IntPtr centers)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_kmeans!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_theRNG()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_theRNG!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randu_InputArray(
					global::System.IntPtr dst, 
					global::System.IntPtr low, 
					global::System.IntPtr high)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randu_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randu_Scalar(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Scalar__OpenCvSharp low, 
					global::OpenCvSharp.Scalar__OpenCvSharp high)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randu_Scalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randn_InputArray(
					global::System.IntPtr dst, 
					global::System.IntPtr mean, 
					global::System.IntPtr stddev)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randn_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randn_Scalar(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Scalar__OpenCvSharp mean, 
					global::OpenCvSharp.Scalar__OpenCvSharp stddev)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randn_Scalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randShuffle(
					global::System.IntPtr dst, 
					double iterFactor, 
					ulong* rng)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randShuffle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_randShuffle__0(
					global::System.IntPtr dst, 
					double iterFactor, 
					global::System.IntPtr rng)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_randShuffle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_write(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_write!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_read(
					global::System.IntPtr obj, 
					global::System.IntPtr fn)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_read!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Algorithm_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_save(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_save!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_getDefaultName(
					global::System.IntPtr obj, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_getDefaultName!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Algorithm_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_delete(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Algorithm_name(
					global::System.IntPtr self, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Algorithm_name!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Ptr_Algorithm_new(global::System.IntPtr rawPtr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Ptr_Algorithm_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Ptr_Algorithm_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Ptr_Algorithm_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Ptr_Algorithm_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Ptr_Algorithm_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byMat(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byMatExpr(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byScalar(global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byDouble(double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byGpuMat(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byGpuMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_InputArray_new_byVectorOfMat(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_new_byVectorOfMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_InputArray_delete(global::System.IntPtr ia)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_OutputArray_new_byMat(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_new_byMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_OutputArray_new_byGpuMat(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_new_byGpuMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_OutputArray_new_byScalar(global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_new_byScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_OutputArray_new_byVectorOfMat(global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_new_byVectorOfMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_OutputArray_delete(global::System.IntPtr oa)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_InputArray_kind(global::System.IntPtr ia)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_InputArray_kind!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_OutputArray_getMat(global::System.IntPtr oa)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_getMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Scalar__OpenCvSharp core_OutputArray_getScalar(global::System.IntPtr oa)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_getScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_OutputArray_getVectorOfMat(
					global::System.IntPtr oa, 
					global::System.IntPtr vector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_OutputArray_getVectorOfMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_new2(
					byte* source, 
					int flags, 
					byte* encoding)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_newFromLegacy(global::System.IntPtr fs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_newFromLegacy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileStorage_open(
					global::System.IntPtr obj, 
					byte* filename, 
					int flags, 
					byte* encoding)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_open!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileStorage_isOpened(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_isOpened!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_releaseAndGetString(
					global::System.IntPtr obj, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_releaseAndGetString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_getFirstTopLevelNode(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_getFirstTopLevelNode!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_root(
					global::System.IntPtr obj, 
					int streamIdx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_root!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_indexer(
					global::System.IntPtr obj, 
					byte* nodeName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_indexer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_toLegacy(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_toLegacy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeRaw(
					global::System.IntPtr obj, 
					byte* fmt, 
					global::System.IntPtr vec, 
					global::System.IntPtr len)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeRaw!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeObj(
					global::System.IntPtr obj, 
					byte* name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeObj!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_getDefaultObjectName(
					byte* filename, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_getDefaultObjectName!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte* core_FileStorage_elname(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_elname!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileStorage_structs(
					global::System.IntPtr obj, 
					global::System.IntPtr* resultLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_structs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileStorage_state(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_state!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_int(
					global::System.IntPtr fs, 
					byte* name, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_int!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_float(
					global::System.IntPtr fs, 
					byte* name, 
					float value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_float!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_double(
					global::System.IntPtr fs, 
					byte* name, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_double!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_String(
					global::System.IntPtr fs, 
					byte* name, 
					byte* value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_String!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_Mat(
					global::System.IntPtr fs, 
					byte* name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_SparseMat(
					global::System.IntPtr fs, 
					byte* name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_SparseMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_vectorOfKeyPoint(
					global::System.IntPtr fs, 
					byte* name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_vectorOfKeyPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_write_vectorOfDMatch(
					global::System.IntPtr fs, 
					byte* name, 
					global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_write_vectorOfDMatch!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeScalar_int(
					global::System.IntPtr fs, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeScalar_int!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeScalar_float(
					global::System.IntPtr fs, 
					float value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeScalar_float!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeScalar_double(
					global::System.IntPtr fs, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeScalar_double!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileStorage_writeScalar_String(
					global::System.IntPtr fs, 
					byte* value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileStorage_writeScalar_String!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_new2(
					global::System.IntPtr fs, 
					global::System.IntPtr node)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_new3(global::System.IntPtr node)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_delete(global::System.IntPtr node)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_operatorThis_byString(
					global::System.IntPtr obj, 
					byte* nodeName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_operatorThis_byString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_operatorThis_byInt(
					global::System.IntPtr obj, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_operatorThis_byInt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_type(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_type!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isNone(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isNone!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isSeq(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isSeq!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isMap(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isMap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isInt(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isInt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isReal(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isReal!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isString(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_isNamed(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_isNamed!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_name(
					global::System.IntPtr obj, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_name!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_size(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_size!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_FileNode_toInt(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_toInt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float core_FileNode_toFloat(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_toFloat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_FileNode_toDouble(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_toDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_toString(
					global::System.IntPtr obj, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_toString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_toMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_readRaw(
					global::System.IntPtr obj, 
					byte* fmt, 
					global::System.IntPtr vec, 
					global::System.IntPtr len)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_readRaw!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_FileNode_readObj(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_readObj!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_int(
					global::System.IntPtr node, 
					int* value, 
					int defaultValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_int!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_float(
					global::System.IntPtr node, 
					float* value, 
					float defaultValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_float!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_double(
					global::System.IntPtr node, 
					double* value, 
					double defaultValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_double!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_String(
					global::System.IntPtr node, 
					byte* value, 
					int valueCapacity, 
					byte* defaultValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_String!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_Mat(
					global::System.IntPtr node, 
					global::System.IntPtr mat, 
					global::System.IntPtr defaultMat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_SparseMat(
					global::System.IntPtr node, 
					global::System.IntPtr mat, 
					global::System.IntPtr defaultMat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_SparseMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_vectorOfKeyPoint(
					global::System.IntPtr node, 
					global::System.IntPtr keypoints)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_vectorOfKeyPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_FileNode_read_vectorOfDMatch(
					global::System.IntPtr node, 
					global::System.IntPtr matches)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_FileNode_read_vectorOfDMatch!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_new2(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					int maxComponents)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_new3(
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					double retainedVariance)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCA_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCA_operatorThis(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					int maxComponents)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_operatorThis!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCA_computeVar(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					global::System.IntPtr mean, 
					int flags, 
					double retainedVariance)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_computeVar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_project(
					global::System.IntPtr obj, 
					global::System.IntPtr vec)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_project!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCA_project__0(
					global::System.IntPtr obj, 
					global::System.IntPtr vec, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_project!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_backProject(
					global::System.IntPtr obj, 
					global::System.IntPtr vec)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_backProject!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_PCA_backProject__0(
					global::System.IntPtr obj, 
					global::System.IntPtr vec, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_backProject!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_eigenvectors(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_eigenvectors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_eigenvalues(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_eigenvalues!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_PCA_mean(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_PCA_mean!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_RNG_fill(
					ulong* state, 
					global::System.IntPtr mat, 
					int distType, 
					global::System.IntPtr a, 
					global::System.IntPtr b, 
					int saturateRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_RNG_fill!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_RNG_gaussian(
					ulong* state, 
					double sigma)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_RNG_gaussian!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SVD_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SVD_new__0(
					global::System.IntPtr src, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_operatorThis(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_operatorThis!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_backSubst(
					global::System.IntPtr obj, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_backSubst!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_static_compute(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_static_compute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_static_compute__0(
					global::System.IntPtr src, 
					global::System.IntPtr w, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_static_compute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_static_backSubst(
					global::System.IntPtr w, 
					global::System.IntPtr u, 
					global::System.IntPtr vt, 
					global::System.IntPtr rhs, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_static_backSubst!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SVD_static_solveZ(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_static_solveZ!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SVD_u(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_u!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SVD_w(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_w!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SVD_vt(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SVD_vt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_sizeof()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_sizeof!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new2(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new3(
					int rows, 
					int cols, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp scalar)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new4(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new4!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new5(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new5!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new6(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Range__OpenCvSharp* rowRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new6!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new7(
					global::System.IntPtr mat, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new7!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new8(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr step)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new8!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new9(
					int ndims, 
					int* sizes, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr* steps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new9!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new9__0(
					int ndims, 
					int* sizes, 
					int type, 
					global::System.IntPtr data, 
					global::System.IntPtr steps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new9!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new10(
					int ndims, 
					int* sizes, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new10!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new11(
					int ndims, 
					int* sizes, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new11!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new_FromIplImage(
					global::System.IntPtr img, 
					int copyData)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new_FromIplImage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_new_FromCvMat(
					global::System.IntPtr mat, 
					int copyData)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_new_FromCvMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_release(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_delete(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_adjustROI(
					global::System.IntPtr nativeObj, 
					int dtop, 
					int dbottom, 
					int dleft, 
					int dright)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_adjustROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_assignTo1(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_assignTo1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_assignTo2(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_assignTo2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_channels(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_channels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_checkVector1(
					global::System.IntPtr self, 
					int elemChannels)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_checkVector1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_checkVector2(
					global::System.IntPtr self, 
					int elemChannels, 
					int depth)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_checkVector2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_checkVector3(
					global::System.IntPtr self, 
					int elemChannels, 
					int depth, 
					int requireContinuous)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_checkVector3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_clone(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_clone!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_col_toMat(
					global::System.IntPtr self, 
					int x)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_col_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_col_toMatExpr(
					global::System.IntPtr self, 
					int x)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_col_toMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_cols(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_cols!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_colRange_toMat(
					global::System.IntPtr self, 
					int startCol, 
					int endCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_colRange_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_colRange_toMatExpr(
					global::System.IntPtr self, 
					int startCol, 
					int endCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_colRange_toMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_dims(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_dims!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_convertTo(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_convertTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_copyTo(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_copyTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_create(
					global::System.IntPtr self, 
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_create__0(
					global::System.IntPtr self, 
					int ndims, 
					int* sizes, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_cross(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_cross!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* core_Mat_data(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_data!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_datastart(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_datastart!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_dataend(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_dataend!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_datalimit(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_datalimit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_depth(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_depth!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_diag(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_diag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_diag__0(
					global::System.IntPtr self, 
					int d)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_diag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_Mat_dot(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_dot!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_elemSize(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_elemSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_elemSize1(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_elemSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_empty(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_eye(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_eye!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_inv1(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_inv1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_inv2(
					global::System.IntPtr self, 
					int method)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_inv2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_isContinuous(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_isContinuous!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_isSubmatrix(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_isSubmatrix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_locateROI(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp* wholeSize, 
					global::OpenCvSharp.Point__OpenCvSharp* ofs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_locateROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_mul1(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_mul1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_mul2(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					double scale)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_mul2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ones1(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ones1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ones2(
					int ndims, 
					int* sz, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ones2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_reshape1(
					global::System.IntPtr self, 
					int cn)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_reshape1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_reshape2(
					global::System.IntPtr self, 
					int cn, 
					int rows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_reshape2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_reshape3(
					global::System.IntPtr self, 
					int cn, 
					int newndims, 
					int* newsz)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_reshape3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_rows(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_rows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_row_toMat(
					global::System.IntPtr self, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_row_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_row_toMatExpr(
					global::System.IntPtr self, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_row_toMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_rowRange_toMat(
					global::System.IntPtr self, 
					int startRow, 
					int endRow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_rowRange_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_rowRange_toMatExpr(
					global::System.IntPtr self, 
					int startRow, 
					int endRow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_rowRange_toMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_setTo_Scalar(
					global::System.IntPtr self, 
					global::OpenCvSharp.Scalar__OpenCvSharp value, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_setTo_Scalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_setTo_InputArray(
					global::System.IntPtr self, 
					global::System.IntPtr value, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_setTo_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp core_Mat_size(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_size!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_sizeAt(
					global::System.IntPtr self, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_sizeAt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_step1(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_step1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_step1__0(
					global::System.IntPtr self, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_step1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long core_Mat_step(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_step!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_stepAt(
					global::System.IntPtr self, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_stepAt!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_subMat1(
					global::System.IntPtr self, 
					int rowStart, 
					int rowEnd, 
					int colStart, 
					int colEnd)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_subMat1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_subMat2(
					global::System.IntPtr self, 
					int nRanges, 
					global::OpenCvSharp.Range__OpenCvSharp* ranges)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_subMat2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_t(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_t!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_Mat_total(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_total!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_type(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_type!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_zeros1(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_zeros1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_zeros2(
					int ndims, 
					int* sz, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_zeros2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static sbyte* core_Mat_dump(
					global::System.IntPtr self, 
					byte* format)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_dump!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_dump_delete(sbyte* buf)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_dump_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ptr1d(
					global::System.IntPtr self, 
					int i0)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ptr1d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ptr2d(
					global::System.IntPtr self, 
					int i0, 
					int i1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ptr2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ptr3d(
					global::System.IntPtr self, 
					int i0, 
					int i1, 
					int i2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ptr3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_ptrnd(
					global::System.IntPtr self, 
					int* idx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_ptrnd!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_assignment_FromMat(
					global::System.IntPtr self, 
					global::System.IntPtr newMat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_assignment_FromMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_assignment_FromMatExpr(
					global::System.IntPtr self, 
					global::System.IntPtr newMatExpr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_assignment_FromMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_assignment_FromScalar(
					global::System.IntPtr self, 
					global::OpenCvSharp.Scalar__OpenCvSharp scalar)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_assignment_FromScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_IplImage(
					global::System.IntPtr self, 
					global::System.IntPtr outImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_IplImage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_IplImage_alignment(
					global::System.IntPtr self, 
					global::System.IntPtr* outImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_IplImage_alignment!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_CvMat(
					global::System.IntPtr self, 
					global::System.IntPtr outMat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_CvMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorUnaryMinus(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorUnaryMinus!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAdd_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAdd_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAdd_MatScalar(
					global::System.IntPtr a, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAdd_MatScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAdd_ScalarMat(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAdd_ScalarMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorMinus_Mat(global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorMinus_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorSubtract_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorSubtract_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorSubtract_MatScalar(
					global::System.IntPtr a, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorSubtract_MatScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorSubtract_ScalarMat(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorSubtract_ScalarMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorMultiply_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorMultiply_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorMultiply_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorMultiply_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorMultiply_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorMultiply_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorDivide_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorDivide_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorDivide_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorDivide_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorDivide_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorDivide_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAnd_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAnd_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAnd_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAnd_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorAnd_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorAnd_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorOr_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorOr_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorOr_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorOr_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorOr_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorOr_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorXor_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorXor_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorXor_MatDouble(
					global::System.IntPtr a, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorXor_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorXor_DoubleMat(
					double s, 
					global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorXor_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorNot(global::System.IntPtr a)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorNot!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLT_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLT_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLT_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLT_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLT_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLT_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLE_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLE_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorLE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorLE_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGT_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGT_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGT_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGT_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGT_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGT_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGE_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGE_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorGE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorGE_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorEQ_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorEQ_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorEQ_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorEQ_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorEQ_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorEQ_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorNE_MatMat(
					global::System.IntPtr a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorNE_MatMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorNE_DoubleMat(
					double a, 
					global::System.IntPtr b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorNE_DoubleMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_Mat_operatorNE_MatDouble(
					global::System.IntPtr a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_operatorNE_MatDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_abs_Mat(global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_abs_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetB(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetB!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetB__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetB!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetS(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetS__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetS__1(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetS__2(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetI(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetI__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetF(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetF!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetF__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetF!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetD(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetD!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetD__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetD!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec3b(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec3b__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec4f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec4f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec6f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec6f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec4i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetVec4i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetVec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint2f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint2f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint2d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint2d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetPoint3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetPoint3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetRect(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetRect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nSetRect__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nSetRect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetB(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetB!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetB__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					byte* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetB!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetS(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetS__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					short* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetS__1(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetS__2(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					ushort* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetS!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetI(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetI__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					int* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetF(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetF!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetF__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					float* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetF!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetD(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetD!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetD__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					double* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetD!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec3b(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec3b__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3b__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec4f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec4f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec6f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec6f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec6f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec4i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetVec4i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Vec4i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetVec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint2f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint2f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint2d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint2d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point2d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3i(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3i__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3i__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3f(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3f__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3f__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3d(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetPoint3d__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Point3d__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetPoint3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetRect(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetRect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_Mat_nGetRect__0(
					global::System.IntPtr obj, 
					int row, 
					int col, 
					global::OpenCvSharp.Rect__OpenCvSharp* vals, 
					int valsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_nGetRect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Mat(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_char(
					global::System.IntPtr self, 
					sbyte v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_char!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_uchar(
					global::System.IntPtr self, 
					byte v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_uchar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_short(
					global::System.IntPtr self, 
					short v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_short!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_ushort(
					global::System.IntPtr self, 
					ushort v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_ushort!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_int(
					global::System.IntPtr self, 
					int v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_int!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_float(
					global::System.IntPtr self, 
					float v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_float!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_double(
					global::System.IntPtr self, 
					double v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_double!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2b__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3b__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec4b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4b__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec4b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6b(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6b__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2s__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3s__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec4s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4s__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec4s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6s(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6s__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2w__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2w!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3w__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3w!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec4w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4w__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec4w!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6w(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6w__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6w!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2i__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3i__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec4i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4i__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6i__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec4f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec4f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec2d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec2d__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec3d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec3d__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Vec6d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Vec6d__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Vec6d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point2f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point2d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point2d__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point3i(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3i__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point3f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Point3d(
					global::System.IntPtr self, 
					global::OpenCvSharp.Point3d__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Point3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Size(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Size!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Size2f(
					global::System.IntPtr self, 
					global::OpenCvSharp.Size2f__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Size2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_push_back_Rect(
					global::System.IntPtr self, 
					global::OpenCvSharp.Rect__OpenCvSharp v)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_push_back_Rect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_reserve(
					global::System.IntPtr obj, 
					global::System.IntPtr sz)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_reserve!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_resize1(
					global::System.IntPtr obj, 
					global::System.IntPtr sz)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_resize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_resize2(
					global::System.IntPtr obj, 
					global::System.IntPtr sz, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_resize2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_pop_back(
					global::System.IntPtr obj, 
					global::System.IntPtr nelems)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_pop_back!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_uchar(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_uchar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec2b(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec2b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec3b(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec3b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec4b(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec4b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec6b(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec6b!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_short(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_short!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec2s(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec2s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec3s(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec3s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec4s(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec4s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec6s(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec6s!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_int(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_int!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec2i(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec2i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec3i(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec4i(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec4i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec6i(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec6i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_float(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_float!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec2f(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec3f(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec4f(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec4f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec6f(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec6f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_double(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_double!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec2d(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec3d(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec4d(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec4d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_Mat_forEach_Vec6d(
					global::System.IntPtr m, 
					void* proc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_Mat_forEach_Vec6d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_new__0(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_MatExpr_delete(global::System.IntPtr expr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_toMat(global::System.IntPtr expr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorUnaryMinus_MatExpr(global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorUnaryMinus_MatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorUnaryNot_MatExpr(global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorUnaryNot_MatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorAdd_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorAdd_MatExprMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorAdd_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorAdd_MatMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorAdd_MatExprScalar(
					global::System.IntPtr e, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorAdd_MatExprScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorAdd_ScalarMatExpr(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorAdd_ScalarMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorAdd_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorAdd_MatExprMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorSubtract_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorSubtract_MatExprMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorSubtract_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorSubtract_MatMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorSubtract_MatExprScalar(
					global::System.IntPtr e, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorSubtract_MatExprScalar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorSubtract_ScalarMatExpr(
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorSubtract_ScalarMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorSubtract_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorSubtract_MatExprMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorMultiply_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorMultiply_MatExprMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorMultiply_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorMultiply_MatMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorMultiply_MatExprDouble(
					global::System.IntPtr e, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorMultiply_MatExprDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorMultiply_DoubleMatExpr(
					double s, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorMultiply_DoubleMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorMultiply_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorMultiply_MatExprMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorDivide_MatExprMat(
					global::System.IntPtr e, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorDivide_MatExprMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorDivide_MatMatExpr(
					global::System.IntPtr m, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorDivide_MatMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorDivide_MatExprDouble(
					global::System.IntPtr e, 
					double s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorDivide_MatExprDouble!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorDivide_DoubleMatExpr(
					double s, 
					global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorDivide_DoubleMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_operatorDivide_MatExprMatExpr(
					global::System.IntPtr e1, 
					global::System.IntPtr e2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_operatorDivide_MatExprMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_row(
					global::System.IntPtr self, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_row!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_col(
					global::System.IntPtr self, 
					int x)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_col!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_diag(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_diag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_diag__0(
					global::System.IntPtr self, 
					int d)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_diag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_submat(
					global::System.IntPtr self, 
					int rowStart, 
					int rowEnd, 
					int colStart, 
					int colEnd)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_submat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_cross(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_cross!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double core_MatExpr_dot(
					global::System.IntPtr self, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_dot!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_t(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_t!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_inv(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_inv!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_inv__0(
					global::System.IntPtr self, 
					int method)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_inv!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_mul_toMatExpr(
					global::System.IntPtr self, 
					global::System.IntPtr e, 
					double scale)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_mul_toMatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_MatExpr_mul_toMat(
					global::System.IntPtr self, 
					global::System.IntPtr m, 
					double scale)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_mul_toMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp core_MatExpr_size(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_size!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_MatExpr_type(global::System.IntPtr self)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_MatExpr_type!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_abs_MatExpr(global::System.IntPtr e)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_abs_MatExpr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong core_SparseMat_sizeof()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_sizeof!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_new2(
					int dims, 
					int* sizes, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_new3(global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_operatorAssign_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_operatorAssign_SparseMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_operatorAssign_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_operatorAssign_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_clone(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_clone!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_copyTo_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_copyTo_SparseMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_copyTo_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_copyTo_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_convertTo_SparseMat(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_convertTo_SparseMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_convertTo_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_convertTo_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_assignTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_assignTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_create(
					global::System.IntPtr obj, 
					int dims, 
					int* sizes, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_addref(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_addref!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_SparseMat_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_elemSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_elemSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_elemSize1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_elemSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_type(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_type!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_depth(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_depth!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_channels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_channels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_size1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_size1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_size2(
					global::System.IntPtr obj, 
					int i)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_size2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int core_SparseMat_dims(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_dims!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_nzcount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_nzcount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_hash_1d(
					global::System.IntPtr obj, 
					int i0)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_hash_1d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_hash_2d(
					global::System.IntPtr obj, 
					int i0, 
					int i1)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_hash_2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_hash_3d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_hash_3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_hash_nd(
					global::System.IntPtr obj, 
					int* idx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_hash_nd!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_1d(
					global::System.IntPtr obj, 
					int i0, 
					int createMissing, 
					ulong* hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_1d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_1d__0(
					global::System.IntPtr obj, 
					int i0, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_1d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_2d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int createMissing, 
					ulong* hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_2d__0(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_2d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_3d(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2, 
					int createMissing, 
					ulong* hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_3d__0(
					global::System.IntPtr obj, 
					int i0, 
					int i1, 
					int i2, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_3d!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_nd(
					global::System.IntPtr obj, 
					int* idx, 
					int createMissing, 
					ulong* hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_nd!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr core_SparseMat_ptr_nd__0(
					global::System.IntPtr obj, 
					int* idx, 
					int createMissing, 
					global::System.IntPtr hashval)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_SparseMat_ptr_nd!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_getCudaEnabledDeviceCount()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_getCudaEnabledDeviceCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_setDevice(int device)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_setDevice!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_getDevice()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_getDevice!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_resetDevice()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_resetDevice!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_deviceSupports(int feature_set)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_deviceSupports!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_builtWith(int feature_set)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_builtWith!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_has(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_has!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasPtx(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasPtx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasBin(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasBin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasEqualOrLessPtx(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasEqualOrLessPtx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasEqualOrGreater(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasEqualOrGreater!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasEqualOrGreaterPtx(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasEqualOrGreaterPtx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_TargetArchs_hasEqualOrGreaterBin(
					int major, 
					int minor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_TargetArchs_hasEqualOrGreaterBin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_DeviceInfo_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_DeviceInfo_new2(int deviceId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_DeviceInfo_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_DeviceInfo_name(
					global::System.IntPtr obj, 
					byte* buf, 
					int bufLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_name!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_majorVersion(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_majorVersion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_minorVersion(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_minorVersion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_multiProcessorCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_multiProcessorCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_DeviceInfo_sharedMemPerBlock(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_sharedMemPerBlock!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_DeviceInfo_queryMemory(
					global::System.IntPtr obj, 
					ulong* totalMemory, 
					ulong* freeMemory)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_queryMemory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_DeviceInfo_freeMemory(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_freeMemory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_DeviceInfo_totalMemory(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_totalMemory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_supports(
					global::System.IntPtr obj, 
					int featureSet)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_supports!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_isCompatible(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_isCompatible!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_deviceID(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_deviceID!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_DeviceInfo_canMapHostMemory(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_DeviceInfo_canMapHostMemory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_printCudaDeviceInfo(int device)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_printCudaDeviceInfo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_printShortCudaDeviceInfo(int device)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_printShortCudaDeviceInfo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_registerPageLocked(global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_registerPageLocked!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_unregisterPageLocked(global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_unregisterPageLocked!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_Stream_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_Stream_new2(global::System.IntPtr s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_opAssign(
					global::System.IntPtr left, 
					global::System.IntPtr right)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_opAssign!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_Stream_queryIfComplete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_queryIfComplete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_waitForCompletion(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_waitForCompletion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueDownload_CudaMem(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueDownload_CudaMem!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueDownload_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueDownload_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueUpload_CudaMem(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueUpload_CudaMem!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueUpload_Mat(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueUpload_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueCopy(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueCopy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueMemSet(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueMemSet!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueMemSet_WithMask(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::OpenCvSharp.Scalar__OpenCvSharp val, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueMemSet_WithMask!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueConvert(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int dtype, 
					double a, 
					double b)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueConvert!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_Stream_enqueueHostCallback(
					global::System.IntPtr obj, 
					global::System.IntPtr callback, 
					global::System.IntPtr userData)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_enqueueHostCallback!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_Stream_Null()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_Null!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_Stream_bool(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_Stream_bool!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_CascadeClassifier_GPU_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_CascadeClassifier_GPU_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_CascadeClassifier_GPU_new2(byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_load(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_load!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_CascadeClassifier_GPU_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_detectMultiScale1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectsBuf, 
					double scaleFactor, 
					int minNeighbors, 
					global::OpenCvSharp.Size__OpenCvSharp minSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_detectMultiScale1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_detectMultiScale2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr objectsBuf, 
					global::OpenCvSharp.Size__OpenCvSharp maxObjectSize, 
					global::OpenCvSharp.Size__OpenCvSharp minSize, 
					double scaleFactor, 
					int minNeighbors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_detectMultiScale2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_findLargestObject_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_findLargestObject_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_CascadeClassifier_GPU_findLargestObject_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_findLargestObject_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_CascadeClassifier_GPU_visualizeInPlace_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_visualizeInPlace_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_CascadeClassifier_GPU_visualizeInPlace_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_visualizeInPlace_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp cuda_CascadeClassifier_GPU_getClassifierSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_CascadeClassifier_GPU_getClassifierSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int HOGDescriptor_sizeof()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_sizeof!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr HOGDescriptor_new(
					global::OpenCvSharp.Size__OpenCvSharp win_size, 
					global::OpenCvSharp.Size__OpenCvSharp block_size, 
					global::OpenCvSharp.Size__OpenCvSharp block_stride, 
					global::OpenCvSharp.Size__OpenCvSharp cell_size, 
					int nbins, 
					double winSigma, 
					double threshold_L2Hys, 
					int gamma_correction, 
					int nlevels)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong HOGDescriptor_getDescriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_getDescriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong HOGDescriptor_getBlockHistogramSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_getBlockHistogramSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int HOGDescriptor_checkDetectorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_checkDetectorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double HOGDescriptor_getWinSigma(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_getWinSigma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_setSVMDetector(
					global::System.IntPtr obj, 
					global::System.IntPtr svmdetector)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_setSVMDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr found_locations, 
					double hit_threshold, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::OpenCvSharp.Size__OpenCvSharp padding)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_detect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_detectMultiScale(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::System.IntPtr found_locations, 
					double hit_threshold, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::OpenCvSharp.Size__OpenCvSharp padding, 
					double scale, 
					int group_threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_detectMultiScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_getDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr img, 
					global::OpenCvSharp.Size__OpenCvSharp win_stride, 
					global::System.IntPtr descriptors, 
					global::OpenCvSharp.Gpu.DescriptorFormat__OpenCvSharp descr_format)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_getDescriptors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_win_size_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_win_size_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_block_size_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_block_size_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_block_stride_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_block_stride_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp HOGDescriptor_cell_size_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_cell_size_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int HOGDescriptor_nbins_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_nbins_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double HOGDescriptor_win_sigma_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_win_sigma_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double HOGDescriptor_threshold_L2hys_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_threshold_L2hys_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int HOGDescriptor_nlevels_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_nlevels_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int HOGDescriptor_gamma_correction_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_gamma_correction_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_win_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_win_size_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_block_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_block_size_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_block_stride_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_block_stride_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_cell_size_set(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_cell_size_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_nbins_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_nbins_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_win_sigma_set(
					global::System.IntPtr obj, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_win_sigma_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_threshold_L2hys_set(
					global::System.IntPtr obj, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_threshold_L2hys_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_nlevels_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_nlevels_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void HOGDescriptor_gamma_correction_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'HOGDescriptor_gamma_correction_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG_GPU_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_MOG_GPU_new(int nmixtures)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG_GPU_initialize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int frameType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_initialize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG_GPU_operator(
					global::System.IntPtr obj, 
					global::System.IntPtr frame, 
					global::System.IntPtr fgmask, 
					float learningRate, 
					global::System.IntPtr stream)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_operator!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG_GPU_getBackgroundImage(
					global::System.IntPtr obj, 
					global::System.IntPtr backgroundImage, 
					global::System.IntPtr stream)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_getBackgroundImage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG_GPU_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int* cuda_MOG_GPU_history(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_history!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG_GPU_varThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_varThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG_GPU_backgroundRatio(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_backgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG_GPU_noiseSigma(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG_GPU_noiseSigma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_MOG2_GPU_new(int nmixtures)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_initialize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp frameSize, 
					int frameType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_initialize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_operator(
					global::System.IntPtr obj, 
					global::System.IntPtr frame, 
					global::System.IntPtr fgmask, 
					float learningRate, 
					global::System.IntPtr stream)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_operator!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_getBackgroundImage(
					global::System.IntPtr obj, 
					global::System.IntPtr backgroundImage, 
					global::System.IntPtr stream)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_getBackgroundImage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int* cuda_MOG2_GPU_history(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_history!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_varThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_varThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_backgroundRatio(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_backgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_varThresholdGen(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_varThresholdGen!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_fVarInit(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_fVarInit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_fVarMin(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_fVarMin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_fVarMax(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_fVarMax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_fCT(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_fCT!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_MOG2_GPU_bShadowDetection_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_bShadowDetection_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_MOG2_GPU_bShadowDetection_set(
					global::System.IntPtr obj, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_bShadowDetection_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* cuda_MOG2_GPU_nShadowDetection(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_nShadowDetection!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_MOG2_GPU_fTau(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_MOG2_GPU_fTau!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_StereoBM_GPU_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_StereoBM_GPU_new2(
					int preset, 
					int ndisparities, 
					int winSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_StereoBM_GPU_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_StereoBM_GPU_run1(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_run1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_StereoBM_GPU_run2(
					global::System.IntPtr obj, 
					global::System.IntPtr left, 
					global::System.IntPtr right, 
					global::System.IntPtr disparity, 
					global::System.IntPtr stream)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_run2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_StereoBM_GPU_checkIfGpuCallReasonable()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_checkIfGpuCallReasonable!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int* cuda_StereoBM_GPU_preset(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_preset!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int* cuda_StereoBM_GPU_ndisp(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_ndisp!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int* cuda_StereoBM_GPU_winSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_winSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float* cuda_StereoBM_GPU_avergeTexThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_StereoBM_GPU_avergeTexThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new2(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new3(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr data, 
					ulong step)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new4(global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new4!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new5(global::System.IntPtr gpumat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new5!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new6(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new6!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new7(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type, 
					global::System.IntPtr data, 
					ulong step)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new7!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new8(
					int rows, 
					int cols, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new8!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new9(
					global::System.IntPtr m, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new9!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new10(
					global::System.IntPtr m, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new10!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_new11(
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type, 
					global::OpenCvSharp.Scalar__OpenCvSharp s)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_new11!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_opToMat(global::System.IntPtr src)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_opToMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_opToGpuMat(global::System.IntPtr src)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_opToGpuMat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_opAssign(
					global::System.IntPtr left, 
					global::System.IntPtr right)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_opAssign!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_opRange1(
					global::System.IntPtr src, 
					global::OpenCvSharp.Rect__OpenCvSharp roi)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_opRange1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_opRange2(
					global::System.IntPtr src, 
					global::OpenCvSharp.Range__OpenCvSharp rowRange, 
					global::OpenCvSharp.Range__OpenCvSharp colRange)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_opRange2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_flags(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_flags!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_rows(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_rows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_cols(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_cols!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_GpuMat_step(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_step!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* cuda_GpuMat_data(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_data!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_refcount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_refcount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_datastart(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_datastart!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_dataend(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_dataend!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_upload(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_upload!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_download(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_download!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_row(
					global::System.IntPtr obj, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_row!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_col(
					global::System.IntPtr obj, 
					int x)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_col!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_rowRange(
					global::System.IntPtr obj, 
					int startrow, 
					int endrow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_rowRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_colRange(
					global::System.IntPtr obj, 
					int startcol, 
					int endcol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_colRange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_clone(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_clone!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_copyTo1(
					global::System.IntPtr obj, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_copyTo1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_copyTo2(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_copyTo2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_convertTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int rtype, 
					double alpha, 
					double beta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_convertTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_assignTo(
					global::System.IntPtr obj, 
					global::System.IntPtr m, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_assignTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_setTo(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Scalar__OpenCvSharp s, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_setTo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_reshape(
					global::System.IntPtr obj, 
					int cn, 
					int rows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_reshape!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_create1(
					global::System.IntPtr obj, 
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_create1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_create2(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_create2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_release(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_release!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_swap(
					global::System.IntPtr obj, 
					global::System.IntPtr mat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_swap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_GpuMat_locateROI(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp* wholeSize, 
					global::OpenCvSharp.Point__OpenCvSharp* ofs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_locateROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_GpuMat_adjustROI(
					global::System.IntPtr obj, 
					int dtop, 
					int dbottom, 
					int dleft, 
					int drightt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_adjustROI!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_isContinuous(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_isContinuous!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_GpuMat_elemSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_elemSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_GpuMat_elemSize1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_elemSize1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_type(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_type!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_depth(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_depth!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_channels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_channels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static ulong cuda_GpuMat_step1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_step1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp cuda_GpuMat_size(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_size!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int cuda_GpuMat_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static byte* cuda_GpuMat_ptr(
					global::System.IntPtr obj, 
					int y)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_GpuMat_ptr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_createContinuous1(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr gm)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_createContinuous1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr cuda_createContinuous2(
					int rows, 
					int cols, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_createContinuous2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void cuda_ensureSizeIsEnough(
					int rows, 
					int cols, 
					int type, 
					global::System.IntPtr m)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'cuda_ensureSizeIsEnough!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_createEigenFaceRecognizer(
					int numComponents, 
					double threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_createEigenFaceRecognizer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_createFisherFaceRecognizer(
					int numComponents, 
					double threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_createFisherFaceRecognizer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_createLBPHFaceRecognizer(
					int radius, 
					int neighbors, 
					int gridX, 
					int gridY, 
					double threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_createLBPHFaceRecognizer!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_BasicFaceRecognizer_getNumComponents(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getNumComponents!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_setNumComponents(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_setNumComponents!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double face_BasicFaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_getProjections(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getProjections!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_getLabels(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getLabels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_getEigenValues(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getEigenValues!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_getEigenVectors(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getEigenVectors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_BasicFaceRecognizer_getMean(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_BasicFaceRecognizer_getMean!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_Ptr_BasicFaceRecognizer_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_BasicFaceRecognizer_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_Ptr_BasicFaceRecognizer_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_BasicFaceRecognizer_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_train(
					global::System.IntPtr obj, 
					global::System.IntPtr* src, 
					int srcLength, 
					int* labels, 
					int labelsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_train!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_update(
					global::System.IntPtr obj, 
					global::System.IntPtr* src, 
					int srcLength, 
					int* labels, 
					int labelsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_update!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_FaceRecognizer_predict1(
					global::System.IntPtr obj, 
					global::System.IntPtr src)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_predict1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_predict2(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					int* label, 
					double* confidence)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_predict2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_save1(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_save1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_load1(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_load1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_save2(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_save2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_load2(
					global::System.IntPtr obj, 
					global::System.IntPtr fs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_load2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_FaceRecognizer_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_setLabelInfo(
					global::System.IntPtr obj, 
					int label, 
					byte* strInfo)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_setLabelInfo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_getLabelInfo(
					global::System.IntPtr obj, 
					int label, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_getLabelInfo!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_getLabelsByString(
					global::System.IntPtr obj, 
					byte* str, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_getLabelsByString!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double face_FaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_FaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_FaceRecognizer_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_Ptr_FaceRecognizer_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_FaceRecognizer_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_Ptr_FaceRecognizer_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_FaceRecognizer_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_LBPHFaceRecognizer_getGridX(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getGridX!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_setGridX(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_setGridX!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_LBPHFaceRecognizer_getGridY(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getGridY!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_setGridY(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_setGridY!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_LBPHFaceRecognizer_getRadius(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_setRadius(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_setRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int face_LBPHFaceRecognizer_getNeighbors(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getNeighbors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_setNeighbors(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_setNeighbors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double face_LBPHFaceRecognizer_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_getHistograms(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getHistograms!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_LBPHFaceRecognizer_getLabels(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_LBPHFaceRecognizer_getLabels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr face_Ptr_LBPHFaceRecognizer_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_LBPHFaceRecognizer_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void face_Ptr_LBPHFaceRecognizer_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'face_Ptr_LBPHFaceRecognizer_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_drawKeypoints(
					global::System.IntPtr image, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp* keypoints, 
					int keypointsLength, 
					global::System.IntPtr outImage, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_drawKeypoints!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_drawMatches1(
					global::System.IntPtr img1, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp* keypoints1, 
					int keypoints1Length, 
					global::System.IntPtr img2, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp* keypoints2, 
					int keypoints2Length, 
					global::OpenCvSharp.DMatch__OpenCvSharp* matches1to2, 
					int matches1to2Length, 
					global::System.IntPtr outImg, 
					global::OpenCvSharp.Scalar__OpenCvSharp matchColor, 
					global::OpenCvSharp.Scalar__OpenCvSharp singlePointColor, 
					byte* matchesMask, 
					int matchesMaskLength, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_drawMatches1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_drawMatches2(
					global::System.IntPtr img1, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp* keypoints1, 
					int keypoints1Length, 
					global::System.IntPtr img2, 
					global::OpenCvSharp.KeyPoint__OpenCvSharp* keypoints2, 
					int keypoints2Length, 
					global::System.IntPtr* matches1to2, 
					int matches1to2Size1, 
					int* matches1to2Size2, 
					global::System.IntPtr outImg, 
					global::OpenCvSharp.Scalar__OpenCvSharp matchColor, 
					global::OpenCvSharp.Scalar__OpenCvSharp singlePointColor, 
					global::System.IntPtr* matchesMask, 
					int matchesMaskSize1, 
					int* matchesMaskSize2, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_drawMatches2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_evaluateFeatureDetector(
					global::System.IntPtr img1, 
					global::System.IntPtr img2, 
					global::System.IntPtr H1to2, 
					global::System.IntPtr keypoints1, 
					global::System.IntPtr keypoints2, 
					float* repeatability, 
					int* correspCount)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_evaluateFeatureDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_computeRecallPrecisionCurve(
					global::System.IntPtr* matches1to2, 
					int matches1to2Size1, 
					int* matches1to2Size2, 
					global::System.IntPtr* correctMatches1to2Mask, 
					int correctMatches1to2MaskSize1, 
					int* correctMatches1to2MaskSize2, 
					global::System.IntPtr recallPrecisionCurve)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_computeRecallPrecisionCurve!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float features2d_getRecall(
					global::OpenCvSharp.Point2f__OpenCvSharp* recallPrecisionCurve, 
					int recallPrecisionCurveSize, 
					float l_precision)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_getRecall!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_getNearestPoint(
					global::OpenCvSharp.Point2f__OpenCvSharp* recallPrecisionCurve, 
					int recallPrecisionCurveSize, 
					float l_precision)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_getNearestPoint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AGAST(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSuppression, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AGAST!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_AgastFeatureDetector_create(
					int threshold, 
					int nonmaxSuppression, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_AgastFeatureDetector_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_AgastFeatureDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_AgastFeatureDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_AgastFeatureDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AgastFeatureDetector_setThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AgastFeatureDetector_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AgastFeatureDetector_setNonmaxSuppression(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_setNonmaxSuppression!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AgastFeatureDetector_getNonmaxSuppression(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_getNonmaxSuppression!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AgastFeatureDetector_setType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_setType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AgastFeatureDetector_getType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AgastFeatureDetector_getType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_AKAZE_create(
					int descriptor_type, 
					int descriptor_size, 
					int descriptor_channels, 
					float threshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int diffusivity)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_AKAZE_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_AKAZE_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_AKAZE_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_AKAZE_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setDescriptorType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setDescriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getDescriptorType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getDescriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setDescriptorSize(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setDescriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getDescriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getDescriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setDescriptorChannels(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setDescriptorChannels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getDescriptorChannels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getDescriptorChannels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_AKAZE_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setNOctaves(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getNOctaves(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setNOctaveLayers(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getNOctaveLayers(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_AKAZE_setDiffusivity(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_setDiffusivity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_AKAZE_getDiffusivity(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_AKAZE_getDiffusivity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWTrainer_add(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWTrainer_add!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWTrainer_getDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWTrainer_getDescriptors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_BOWTrainer_descriptorsCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWTrainer_descriptorsCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWTrainer_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWTrainer_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWKMeansTrainer_new(
					int clusterCount, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp termcrit, 
					int attempts, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWKMeansTrainer_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWKMeansTrainer_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWKMeansTrainer_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWKMeansTrainer_cluster1(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWKMeansTrainer_cluster1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWKMeansTrainer_cluster2(
					global::System.IntPtr obj, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWKMeansTrainer_cluster2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new1_Ptr(
					global::System.IntPtr dextractor, 
					global::System.IntPtr dmatcher)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_new1_Ptr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new2_Ptr(global::System.IntPtr dmatcher)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_new2_Ptr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new1_RawPtr(
					global::System.IntPtr dextractor, 
					global::System.IntPtr dmatcher)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_new1_RawPtr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_new2_RawPtr(global::System.IntPtr dmatcher)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_new2_RawPtr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWImgDescriptorExtractor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWImgDescriptorExtractor_setVocabulary(
					global::System.IntPtr obj, 
					global::System.IntPtr vocabulary)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_setVocabulary!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BOWImgDescriptorExtractor_getVocabulary(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_getVocabulary!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWImgDescriptorExtractor_compute11(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr imgDescriptor, 
					global::System.IntPtr pointIdxsOfClusters, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_compute11!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWImgDescriptorExtractor_compute12(
					global::System.IntPtr obj, 
					global::System.IntPtr keypointDescriptors, 
					global::System.IntPtr imgDescriptor, 
					global::System.IntPtr pointIdxsOfClusters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_compute12!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BOWImgDescriptorExtractor_compute2(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr imgDescriptor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_compute2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_BOWImgDescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_descriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_BOWImgDescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BOWImgDescriptorExtractor_descriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BRISK_create1(
					int thresh, 
					int octaves, 
					float patternScale)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BRISK_create1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BRISK_create2(
					float* radiusList, 
					int radiusListLength, 
					int* numberList, 
					int numberListLength, 
					float dMax, 
					float dMin, 
					int* indexChange, 
					int indexChangeLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BRISK_create2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_BRISK_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_BRISK_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_BRISK_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_BRISK_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BRISK_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BRISK_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorExtractor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorExtractor_compute1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoint, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_compute1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorExtractor_compute2(
					global::System.IntPtr obj, 
					global::System.IntPtr* images, 
					int imagesSize, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr* descriptors, 
					int descriptorsSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_compute2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_DescriptorExtractor_descriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_descriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_DescriptorExtractor_descriptorType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_descriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_DescriptorExtractor_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_DescriptorExtractor_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_DescriptorExtractor_create(byte* descriptorExtractorType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorExtractor_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_DescriptorExtractor_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_DescriptorExtractor_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_DescriptorExtractor_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_DescriptorExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_add(
					global::System.IntPtr obj, 
					global::System.IntPtr* descriptors, 
					int descriptorLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_add!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_getTrainDescriptors(
					global::System.IntPtr obj, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_getTrainDescriptors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_DescriptorMatcher_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_DescriptorMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_isMaskSupported!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_train(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_train!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_match1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_match1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_knnMatch1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					int k, 
					global::System.IntPtr mask, 
					int compactResult)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_knnMatch1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_radiusMatch1(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr trainDescriptors, 
					global::System.IntPtr matches, 
					float maxDistance, 
					global::System.IntPtr mask, 
					int compactResult)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_radiusMatch1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_match2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					global::System.IntPtr* masks, 
					int masksSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_match2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_knnMatch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					int k, 
					global::System.IntPtr* masks, 
					int masksSize, 
					int compactResult)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_knnMatch2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_DescriptorMatcher_radiusMatch2(
					global::System.IntPtr obj, 
					global::System.IntPtr queryDescriptors, 
					global::System.IntPtr matches, 
					float maxDistance, 
					global::System.IntPtr* masks, 
					int masksSize, 
					int compactResult)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_radiusMatch2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_DescriptorMatcher_create(byte* descriptorMatcherType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_DescriptorMatcher_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_DescriptorMatcher_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_DescriptorMatcher_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_DescriptorMatcher_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_DescriptorMatcher_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_DescriptorMatcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BFMatcher_new(
					int normType, 
					int crossCheck)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BFMatcher_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_BFMatcher_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BFMatcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_BFMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BFMatcher_isMaskSupported!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_BFMatcher_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_BFMatcher_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_BFMatcher_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_BFMatcher_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_BFMatcher_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_BFMatcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_FlannBasedMatcher_new(
					global::System.IntPtr indexParams, 
					global::System.IntPtr searchParams)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FlannBasedMatcher_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FlannBasedMatcher_add(
					global::System.IntPtr obj, 
					global::System.IntPtr* descriptors, 
					int descriptorsSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_add!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FlannBasedMatcher_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FlannBasedMatcher_train(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_train!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_FlannBasedMatcher_isMaskSupported(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_isMaskSupported!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_FlannBasedMatcher_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FlannBasedMatcher_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_FlannBasedMatcher_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_FlannBasedMatcher_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_FlannBasedMatcher_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_FlannBasedMatcher_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FAST1(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSupression)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FAST1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FAST2(
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					int threshold, 
					int nonmaxSupression, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FAST2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_FastFeatureDetector_create(
					int threshold, 
					int nonmaxSuppression)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_FastFeatureDetector_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_FastFeatureDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_FastFeatureDetector_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_FastFeatureDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_FastFeatureDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FastFeatureDetector_setThreshold(
					global::System.IntPtr obj, 
					int threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_FastFeatureDetector_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FastFeatureDetector_setNonmaxSuppression(
					global::System.IntPtr obj, 
					int f)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_setNonmaxSuppression!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_FastFeatureDetector_getNonmaxSuppression(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_getNonmaxSuppression!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_FastFeatureDetector_setType(
					global::System.IntPtr obj, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_setType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_FastFeatureDetector_getType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_FastFeatureDetector_getType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_Feature2D_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_Feature2D_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_Feature2D_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_Feature2D_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_detect_Mat1(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_detect_Mat1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_detect_Mat2(
					global::System.IntPtr detector, 
					global::System.IntPtr* images, 
					int imageLength, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr* mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_detect_Mat2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_detect_InputArray(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_detect_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_compute1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr descriptors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_compute1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_compute2(
					global::System.IntPtr detector, 
					global::System.IntPtr* images, 
					int imageLength, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr* descriptors, 
					int descriptorsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_compute2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Feature2D_detectAndCompute(
					global::System.IntPtr detector, 
					global::System.IntPtr image, 
					global::System.IntPtr mask, 
					global::System.IntPtr keypoints, 
					global::System.IntPtr descriptors, 
					int useProvidedKeypoints)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_detectAndCompute!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_Feature2D_descriptorSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_descriptorSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_Feature2D_descriptorType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_descriptorType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_Feature2D_defaultNorm(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_defaultNorm!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_Feature2D_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Feature2D_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_GFTTDetector_create(
					int maxCorners, 
					double qualityLevel, 
					double minDistance, 
					int blockSize, 
					int useHarrisDetector, 
					double k)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_GFTTDetector_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_GFTTDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_GFTTDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_GFTTDetector_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_GFTTDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setMaxFeatures(
					global::System.IntPtr obj, 
					int maxFeatures)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_GFTTDetector_getMaxFeatures(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setQualityLevel(
					global::System.IntPtr obj, 
					double qlevel)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setQualityLevel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_GFTTDetector_getQualityLevel(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getQualityLevel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setMinDistance(
					global::System.IntPtr obj, 
					double minDistance)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setMinDistance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_GFTTDetector_getMinDistance(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getMinDistance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setBlockSize(
					global::System.IntPtr obj, 
					int blockSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_GFTTDetector_getBlockSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getBlockSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setHarrisDetector(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setHarrisDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_GFTTDetector_getHarrisDetector(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getHarrisDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_GFTTDetector_setK(
					global::System.IntPtr obj, 
					double k)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_setK!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_GFTTDetector_getK(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_GFTTDetector_getK!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_KAZE_create(
					int extended, 
					int upright, 
					float threshold, 
					int nOctaves, 
					int nOctaveLayers, 
					int diffusivity)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_KAZE_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_KAZE_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_KAZE_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_KAZE_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_KAZE_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setDiffusivity(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setDiffusivity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_KAZE_getDiffusivity(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getDiffusivity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setExtended(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setExtended!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_KAZE_getExtended(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getExtended!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setNOctaveLayers(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_KAZE_getNOctaveLayers(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getNOctaveLayers!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setNOctaves(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_KAZE_getNOctaves(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getNOctaves!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setThreshold(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_KAZE_getThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KAZE_setUpright(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_setUpright!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_KAZE_getUpright(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KAZE_getUpright!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KeyPointsFilter_runByImageBorder(
					global::System.IntPtr keypoints, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					int borderSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KeyPointsFilter_runByImageBorder!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KeyPointsFilter_runByKeypointSize(
					global::System.IntPtr keypoints, 
					float minSize, 
					float maxSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KeyPointsFilter_runByKeypointSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KeyPointsFilter_runByPixelsMask(
					global::System.IntPtr keypoints, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KeyPointsFilter_runByPixelsMask!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KeyPointsFilter_removeDuplicated(global::System.IntPtr keypoints)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KeyPointsFilter_removeDuplicated!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_KeyPointsFilter_retainBest(
					global::System.IntPtr keypoints, 
					int npoints)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_KeyPointsFilter_retainBest!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_MSER_create(
					int delta, 
					int minArea, 
					int maxArea, 
					double maxVariation, 
					double minDiversity, 
					int maxEvolution, 
					double areaThreshold, 
					double minMargin, 
					int edgeBlurSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_MSER_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_MSER_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_detect(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr* msers, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_detect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_MSER_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_MSER_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_MSER_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_detectRegions(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr msers, 
					global::System.IntPtr bboxes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_detectRegions!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_setDelta(
					global::System.IntPtr obj, 
					int delta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_setDelta!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_MSER_getDelta(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_getDelta!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_setMinArea(
					global::System.IntPtr obj, 
					int minArea)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_setMinArea!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_MSER_getMinArea(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_getMinArea!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_setMaxArea(
					global::System.IntPtr obj, 
					int maxArea)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_setMaxArea!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_MSER_getMaxArea(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_getMaxArea!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_MSER_setPass2Only(
					global::System.IntPtr obj, 
					int f)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_setPass2Only!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_MSER_getPass2Only(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_MSER_getPass2Only!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_ORB_create(
					int nFeatures, 
					float scaleFactor, 
					int nlevels, 
					int edgeThreshold, 
					int firstLevel, 
					int wtaK, 
					int scoreType, 
					int patchSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_ORB_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_ORB_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_ORB_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_ORB_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_ORB_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setMaxFeatures(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getMaxFeatures(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getMaxFeatures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setScaleFactor(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setScaleFactor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double features2d_ORB_getScaleFactor(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getScaleFactor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setNLevels(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setNLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getNLevels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getNLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setEdgeThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setEdgeThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getEdgeThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getEdgeThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setFirstLevel(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setFirstLevel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getFirstLevel(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getFirstLevel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setWTA_K(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setWTA_K!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getWTA_K(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getWTA_K!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setScoreType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setScoreType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getScoreType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getScoreType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setPatchSize(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setPatchSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getPatchSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getPatchSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_ORB_setFastThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_setFastThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int features2d_ORB_getFastThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_ORB_getFastThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_SimpleBlobDetector_create(global::OpenCvSharp.SimpleBlobDetector_WParams__OpenCvSharp* parameters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_SimpleBlobDetector_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr features2d_Ptr_SimpleBlobDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_SimpleBlobDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void features2d_Ptr_SimpleBlobDetector_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'features2d_Ptr_SimpleBlobDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getGaussianKernel(
					int ksize, 
					double sigma, 
					int ktype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getGaussianKernel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_getDerivKernels(
					global::System.IntPtr kx, 
					global::System.IntPtr ky, 
					int dx, 
					int dy, 
					int ksize, 
					int normalize, 
					int ktype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getDerivKernels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getGaborKernel(
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					double sigma, 
					double theta, 
					double lambd, 
					double gamma, 
					double psi, 
					int ktype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getGaborKernel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getStructuringElement(
					int shape, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getStructuringElement!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_copyMakeBorder(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int top, 
					int bottom, 
					int left, 
					int right, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_copyMakeBorder!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_medianBlur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ksize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_medianBlur!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GaussianBlur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					double sigmaX, 
					double sigmaY, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GaussianBlur!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_bilateralFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int d, 
					double sigmaColor, 
					double sigmaSpace, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_bilateralFilter!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_boxFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int normalize, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_boxFilter!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_blur(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp ksize, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_blur!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_filter2D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					double delta, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_filter2D!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_sepFilter2D(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					global::System.IntPtr kernelX, 
					global::System.IntPtr kernelY, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					double delta, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_sepFilter2D!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Sobel(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int dx, 
					int dy, 
					int ksize, 
					double scale, 
					double delta, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Sobel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Scharr(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int dx, 
					int dy, 
					double scale, 
					double delta, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Scharr!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Laplacian(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ddepth, 
					int ksize, 
					double scale, 
					double delta, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Laplacian!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Canny(
					global::System.IntPtr src, 
					global::System.IntPtr edges, 
					double threshold1, 
					double threshold2, 
					int apertureSize, 
					int L2gradient)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Canny!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_cornerEigenValsAndVecs(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int blockSize, 
					int ksize, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_cornerEigenValsAndVecs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_preCornerDetect(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int ksize, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_preCornerDetect!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_cornerSubPix(
					global::System.IntPtr image, 
					global::System.IntPtr corners, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					global::OpenCvSharp.Size__OpenCvSharp zeroZone, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_cornerSubPix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_goodFeaturesToTrack(
					global::System.IntPtr src, 
					global::System.IntPtr corners, 
					int maxCorners, 
					double qualityLevel, 
					double minDistance, 
					global::System.IntPtr mask, 
					int blockSize, 
					int useHarrisDetector, 
					double k)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_goodFeaturesToTrack!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_HoughLines(
					global::System.IntPtr src, 
					global::System.IntPtr lines, 
					double rho, 
					double theta, 
					int threshold, 
					double srn, 
					double stn)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_HoughLines!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_HoughLinesP(
					global::System.IntPtr src, 
					global::System.IntPtr lines, 
					double rho, 
					double theta, 
					int threshold, 
					double minLineLength, 
					double maxLineG)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_HoughLinesP!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_HoughCircles(
					global::System.IntPtr src, 
					global::System.IntPtr circles, 
					int method, 
					double dp, 
					double minDist, 
					double param1, 
					double param2, 
					int minRadius, 
					int maxRadius)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_HoughCircles!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_erode(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_erode!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_dilate(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_dilate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_morphologyEx(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int op, 
					global::System.IntPtr kernel, 
					global::OpenCvSharp.Point__OpenCvSharp anchor, 
					int iterations, 
					int borderType, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_morphologyEx!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_resize(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					double fx, 
					double fy, 
					int interpolation)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_resize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_warpAffine(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_warpAffine!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_warpPerspective_MisInputArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr m, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_warpPerspective_MisInputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_warpPerspective_MisArray(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float* m, 
					int mRow, 
					int mCol, 
					global::OpenCvSharp.Size__OpenCvSharp dsize, 
					int flags, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_warpPerspective_MisArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_remap(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					int interpolation, 
					int borderMode, 
					global::OpenCvSharp.Scalar__OpenCvSharp borderValue)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_remap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convertMaps(
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					global::System.IntPtr dstmap1, 
					global::System.IntPtr dstmap2, 
					int dstmap1Type, 
					int nninterpolation)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convertMaps!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getRotationMatrix2D(
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double angle, 
					double scale)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getRotationMatrix2D!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_invertAffineTransform(
					global::System.IntPtr m, 
					global::System.IntPtr im)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_invertAffineTransform!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getPerspectiveTransform1(
					global::OpenCvSharp.Point2f__OpenCvSharp* src, 
					global::OpenCvSharp.Point2f__OpenCvSharp* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getPerspectiveTransform1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getPerspectiveTransform2(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getPerspectiveTransform2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getAffineTransform1(
					global::OpenCvSharp.Point2f__OpenCvSharp* src, 
					global::OpenCvSharp.Point2f__OpenCvSharp* dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getAffineTransform1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getAffineTransform2(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getAffineTransform2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_getRectSubPix(
					global::System.IntPtr image, 
					global::OpenCvSharp.Size__OpenCvSharp patchSize, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					global::System.IntPtr patch, 
					int patchType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getRectSubPix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_logPolar(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double m, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_logPolar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_linearPolar(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Point2f__OpenCvSharp center, 
					double maxRadius, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_linearPolar!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_integral1(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					int sdepth)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_integral1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_integral2(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					global::System.IntPtr sqsum, 
					int sdepth)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_integral2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_integral3(
					global::System.IntPtr src, 
					global::System.IntPtr sum, 
					global::System.IntPtr sqsum, 
					global::System.IntPtr tilted, 
					int sdepth)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_integral3!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_accumulate(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_accumulate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_accumulateSquare(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_accumulateSquare!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_accumulateProduct(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_accumulateProduct!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_accumulateWeighted(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double alpha, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_accumulateWeighted!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_PSNR(
					global::System.IntPtr src1, 
					global::System.IntPtr src2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_PSNR!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Point2d__OpenCvSharp imgproc_phaseCorrelate(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr window)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_phaseCorrelate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Point2d__OpenCvSharp imgproc_phaseCorrelateRes(
					global::System.IntPtr src1, 
					global::System.IntPtr src2, 
					global::System.IntPtr window, 
					double* response)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_phaseCorrelateRes!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_createHanningWindow(
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_createHanningWindow!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_threshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double thresh, 
					double maxval, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_threshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_adaptiveThreshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double maxValue, 
					int adaptiveMethod, 
					int thresholdType, 
					int blockSize, 
					double c)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_adaptiveThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_pyrDown(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dstsize, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pyrDown!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_pyrUp(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::OpenCvSharp.Size__OpenCvSharp dstsize, 
					int borderType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pyrUp!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_undistort(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr newCameraMatrix)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_undistort!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_initUndistortRectifyMap(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr r, 
					global::System.IntPtr newCameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					int m1Type, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_initUndistortRectifyMap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float imgproc_initWideAngleProjMap(
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::OpenCvSharp.Size__OpenCvSharp imageSize, 
					int destImageWidth, 
					int m1Type, 
					global::System.IntPtr map1, 
					global::System.IntPtr map2, 
					int projType, 
					double alpha)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_initWideAngleProjMap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_getDefaultNewCameraMatrix(
					global::System.IntPtr cameraMatrix, 
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					int centerPrincipalPoint)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_getDefaultNewCameraMatrix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_undistortPoints(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr cameraMatrix, 
					global::System.IntPtr distCoeffs, 
					global::System.IntPtr r, 
					global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_undistortPoints!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_calcHist1(
					global::System.IntPtr* images, 
					int nimages, 
					int* channels, 
					global::System.IntPtr mask, 
					global::System.IntPtr hist, 
					int dims, 
					int* histSize, 
					global::System.IntPtr* ranges, 
					int uniform, 
					int accumulate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_calcHist1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_calcBackProject(
					global::System.IntPtr* images, 
					int nimages, 
					int* channels, 
					global::System.IntPtr hist, 
					global::System.IntPtr backProject, 
					global::System.IntPtr* ranges, 
					int uniform)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_calcBackProject!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_compareHist1(
					global::System.IntPtr h1, 
					global::System.IntPtr h2, 
					int method)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_compareHist1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_equalizeHist(
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_equalizeHist!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float imgproc_EMD(
					global::System.IntPtr signature1, 
					global::System.IntPtr signature2, 
					int distType, 
					global::System.IntPtr cost, 
					float* lowerBound, 
					global::System.IntPtr flow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_EMD!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_watershed(
					global::System.IntPtr image, 
					global::System.IntPtr markers)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_watershed!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_pyrMeanShiftFiltering(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double sp, 
					double sr, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp termcrit)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pyrMeanShiftFiltering!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_grabCut(
					global::System.IntPtr img, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::System.IntPtr bgdModel, 
					global::System.IntPtr fgdModel, 
					int iterCount, 
					int mode)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_grabCut!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_distanceTransformWithLabels(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr labels, 
					int distanceType, 
					int maskSize, 
					int labelType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_distanceTransformWithLabels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_distanceTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int distanceType, 
					int maskSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_distanceTransform!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_floodFill(
					global::System.IntPtr image, 
					global::OpenCvSharp.Point__OpenCvSharp seedPoint, 
					global::OpenCvSharp.Scalar__OpenCvSharp newVal, 
					global::OpenCvSharp.Rect__OpenCvSharp* rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp loDiff, 
					global::OpenCvSharp.Scalar__OpenCvSharp upDiff, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_floodFill!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_floodFill__0(
					global::System.IntPtr image, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Point__OpenCvSharp seedPoint, 
					global::OpenCvSharp.Scalar__OpenCvSharp newVal, 
					global::OpenCvSharp.Rect__OpenCvSharp* rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp loDiff, 
					global::OpenCvSharp.Scalar__OpenCvSharp upDiff, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_floodFill!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_cvtColor(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int code, 
					int dstCn)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_cvtColor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Moments_NativeStruct__OpenCvSharp imgproc_moments(
					global::System.IntPtr arr, 
					int binaryImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_moments!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_matchTemplate(
					global::System.IntPtr image, 
					global::System.IntPtr templ, 
					global::System.IntPtr result, 
					int method, 
					global::System.IntPtr mask)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_matchTemplate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_connectedComponents(
					global::System.IntPtr image, 
					global::System.IntPtr labels, 
					int connectivity, 
					int ltype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_connectedComponents!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_connectedComponentsWithStats(
					global::System.IntPtr image, 
					global::System.IntPtr labels, 
					global::System.IntPtr stats, 
					global::System.IntPtr centroids, 
					int connectivity, 
					int ltype)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_connectedComponentsWithStats!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_findContours1_vector(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					global::System.IntPtr* hierarchy, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_findContours1_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_findContours1_OutputArray(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					global::System.IntPtr hierarchy, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_findContours1_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_findContours2_vector(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_findContours2_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_findContours2_OutputArray(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					int mode, 
					int method, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_findContours2_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_drawContours_vector(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					int contoursSize1, 
					int* contoursSize2, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::OpenCvSharp.Vec4i__OpenCvSharp* hierarchy, 
					int hiearchyLength, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_drawContours_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_drawContours_vector__0(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					int contoursSize1, 
					int* contoursSize2, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::System.IntPtr hierarchy, 
					int hiearchyLength, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_drawContours_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_drawContours_InputArray(
					global::System.IntPtr image, 
					global::System.IntPtr* contours, 
					int contoursLength, 
					int contourIdx, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					global::System.IntPtr hierarchy, 
					int maxLevel, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_drawContours_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_approxPolyDP_InputArray(
					global::System.IntPtr curve, 
					global::System.IntPtr approxCurve, 
					double epsilon, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_approxPolyDP_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_approxPolyDP_Point(
					global::OpenCvSharp.Point__OpenCvSharp* curve, 
					int curveLength, 
					global::System.IntPtr* approxCurve, 
					double epsilon, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_approxPolyDP_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_approxPolyDP_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* curve, 
					int curveLength, 
					global::System.IntPtr* approxCurve, 
					double epsilon, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_approxPolyDP_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_arcLength_InputArray(
					global::System.IntPtr curve, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_arcLength_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_arcLength_Point(
					global::OpenCvSharp.Point__OpenCvSharp* curve, 
					int curveLength, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_arcLength_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_arcLength_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* curve, 
					int curveLength, 
					int closed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_arcLength_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_InputArray(global::System.IntPtr curve)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_boundingRect_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_Point(
					global::OpenCvSharp.Point__OpenCvSharp* curve, 
					int curveLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_boundingRect_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Rect__OpenCvSharp imgproc_boundingRect_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* curve, 
					int curveLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_boundingRect_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_contourArea_InputArray(
					global::System.IntPtr contour, 
					int oriented)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_contourArea_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_contourArea_Point(
					global::OpenCvSharp.Point__OpenCvSharp* contour, 
					int contourLength, 
					int oriented)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_contourArea_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_contourArea_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* contour, 
					int contourLength, 
					int oriented)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_contourArea_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_InputArray(global::System.IntPtr points)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minAreaRect_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_Point(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minAreaRect_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_minAreaRect_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minAreaRect_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_minEnclosingCircle_InputArray(
					global::System.IntPtr points, 
					global::OpenCvSharp.Point2f__OpenCvSharp* center, 
					float* radius)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minEnclosingCircle_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_minEnclosingCircle_Point(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp* center, 
					float* radius)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minEnclosingCircle_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_minEnclosingCircle_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp* center, 
					float* radius)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_minEnclosingCircle_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_matchShapes_InputArray(
					global::System.IntPtr contour1, 
					global::System.IntPtr contour2, 
					int method, 
					double parameter)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_matchShapes_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_matchShapes_Point(
					global::OpenCvSharp.Point__OpenCvSharp* contour1, 
					int contour1Length, 
					global::OpenCvSharp.Point__OpenCvSharp* contour2, 
					int contour2Length, 
					int method, 
					double parameter)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_matchShapes_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexHull_InputArray(
					global::System.IntPtr points, 
					global::System.IntPtr hull, 
					int clockwise, 
					int returnPoints)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexHull_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexHull_Point_ReturnsPoints(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength, 
					global::System.IntPtr* hull, 
					int clockwise)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexHull_Point_ReturnsPoints!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexHull_Point2f_ReturnsPoints(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength, 
					global::System.IntPtr* hull, 
					int clockwise)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexHull_Point2f_ReturnsPoints!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexHull_Point_ReturnsIndices(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength, 
					global::System.IntPtr* hull, 
					int clockwise)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexHull_Point_ReturnsIndices!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexHull_Point2f_ReturnsIndices(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength, 
					global::System.IntPtr* hull, 
					int clockwise)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexHull_Point2f_ReturnsIndices!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexityDefects_InputArray(
					global::System.IntPtr contour, 
					global::System.IntPtr convexHull, 
					global::System.IntPtr convexityDefects)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexityDefects_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexityDefects_Point(
					global::OpenCvSharp.Point__OpenCvSharp* contour, 
					int contourLength, 
					int* convexHull, 
					int convexHullLength, 
					global::System.IntPtr* convexityDefects)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexityDefects_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_convexityDefects_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* contour, 
					int contourLength, 
					int* convexHull, 
					int convexHullLength, 
					global::System.IntPtr* convexityDefects)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_convexityDefects_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_isContourConvex_InputArray(global::System.IntPtr contour)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_isContourConvex_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_isContourConvex_Point(
					global::OpenCvSharp.Point__OpenCvSharp* contour, 
					int contourLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_isContourConvex_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_isContourConvex_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* contour, 
					int contourLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_isContourConvex_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float imgproc_intersectConvexConvex_InputArray(
					global::System.IntPtr p1, 
					global::System.IntPtr p2, 
					global::System.IntPtr p12, 
					int handleNested)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_intersectConvexConvex_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float imgproc_intersectConvexConvex_Point(
					global::OpenCvSharp.Point__OpenCvSharp* p1, 
					int p1Length, 
					global::OpenCvSharp.Point__OpenCvSharp* p2, 
					int p2Length, 
					global::System.IntPtr* p12, 
					int handleNested)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_intersectConvexConvex_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float imgproc_intersectConvexConvex_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* p1, 
					int p1Length, 
					global::OpenCvSharp.Point2f__OpenCvSharp* p2, 
					int p2Length, 
					global::System.IntPtr* p12, 
					int handleNested)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_intersectConvexConvex_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_InputArray(global::System.IntPtr points)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitEllipse_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_Point(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitEllipse_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp imgproc_fitEllipse_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitEllipse_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fitLine_InputArray(
					global::System.IntPtr points, 
					global::System.IntPtr line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitLine_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fitLine_Point(
					global::OpenCvSharp.Point__OpenCvSharp* points, 
					int pointsLength, 
					float* line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitLine_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fitLine_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* points, 
					int pointsLength, 
					float* line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitLine_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fitLine_Point3i(
					global::OpenCvSharp.Point3i__OpenCvSharp* points, 
					int pointsLength, 
					float* line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitLine_Point3i!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fitLine_Point3f(
					global::OpenCvSharp.Point3f__OpenCvSharp* points, 
					int pointsLength, 
					float* line, 
					int distType, 
					double param, 
					double reps, 
					double aeps)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fitLine_Point3f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_pointPolygonTest_InputArray(
					global::System.IntPtr contour, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pointPolygonTest_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_pointPolygonTest_Point(
					global::OpenCvSharp.Point__OpenCvSharp* contour, 
					int contourLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pointPolygonTest_Point!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_pointPolygonTest_Point2f(
					global::OpenCvSharp.Point2f__OpenCvSharp* contour, 
					int contourLength, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int measureDist)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_pointPolygonTest_Point2f!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_rotatedRectangleIntersection_OutputArray(
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect1, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect2, 
					global::System.IntPtr intersectingRegion)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_rotatedRectangleIntersection_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_rotatedRectangleIntersection_vector(
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect1, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp rect2, 
					global::System.IntPtr intersectingRegion)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_rotatedRectangleIntersection_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_applyColorMap(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int colormap)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_applyColorMap!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_line(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_line!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_arrowedLine(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift, 
					double tipLength)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_arrowedLine!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_rectangle_InputOutputArray(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_rectangle_InputOutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_rectangle_Mat(
					global::System.IntPtr img, 
					global::OpenCvSharp.Rect__OpenCvSharp rect, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_rectangle_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_circle(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp center, 
					int radius, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_circle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_ellipse1(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp center, 
					global::OpenCvSharp.Size__OpenCvSharp axes, 
					double angle, 
					double startAngle, 
					double endAngle, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_ellipse1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_ellipse2(
					global::System.IntPtr img, 
					global::OpenCvSharp.RotatedRect__OpenCvSharp box, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_ellipse2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fillConvexPoly_Mat(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp* pts, 
					int npts, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fillConvexPoly_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fillConvexPoly_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr points, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fillConvexPoly_InputOutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fillPoly_Mat(
					global::System.IntPtr img, 
					global::System.IntPtr* pts, 
					int* npts, 
					int ncontours, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fillPoly_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_fillPoly_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr pts, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int lineType, 
					int shift, 
					global::OpenCvSharp.Point__OpenCvSharp offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_fillPoly_InputOutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_polylines_Mat(
					global::System.IntPtr img, 
					global::System.IntPtr* pts, 
					int* npts, 
					int ncontours, 
					int isClosed, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_polylines_Mat!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_polylines_InputOutputArray(
					global::System.IntPtr img, 
					global::System.IntPtr pts, 
					int isClosed, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int shift)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_polylines_InputOutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_clipLine1(
					global::OpenCvSharp.Size__OpenCvSharp imgSize, 
					global::OpenCvSharp.Point__OpenCvSharp* pt1, 
					global::OpenCvSharp.Point__OpenCvSharp* pt2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_clipLine1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_clipLine2(
					global::OpenCvSharp.Rect__OpenCvSharp imgRect, 
					global::OpenCvSharp.Point__OpenCvSharp* pt1, 
					global::OpenCvSharp.Point__OpenCvSharp* pt2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_clipLine2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_ellipse2Poly(
					global::OpenCvSharp.Point__OpenCvSharp center, 
					global::OpenCvSharp.Size__OpenCvSharp axes, 
					int angle, 
					int arcStart, 
					int arcEnd, 
					int delta, 
					global::System.IntPtr pts)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_ellipse2Poly!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void core_putText(
					global::System.IntPtr img, 
					byte* text, 
					global::OpenCvSharp.Point__OpenCvSharp org, 
					int fontFace, 
					double fontScale, 
					global::OpenCvSharp.Scalar__OpenCvSharp color, 
					int thickness, 
					int lineType, 
					int bottomLeftOrigin)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_putText!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp core_getTextSize(
					byte* text, 
					int fontFace, 
					double fontScale, 
					int thickness, 
					int* baseLine)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'core_getTextSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_createCLAHE(
					double clipLimit, 
					global::OpenCvSharp.Size__OpenCvSharp tileGridSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_createCLAHE!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Ptr_CLAHE_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_CLAHE_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Ptr_CLAHE_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_CLAHE_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_CLAHE_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_CLAHE_apply(
					global::System.IntPtr obj, 
					global::System.IntPtr src, 
					global::System.IntPtr dst)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_apply!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_CLAHE_setClipLimit(
					global::System.IntPtr obj, 
					double clipLimit)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_setClipLimit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_CLAHE_getClipLimit(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_getClipLimit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_CLAHE_setTilesGridSize(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp tileGridSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_setTilesGridSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Size__OpenCvSharp imgproc_CLAHE_getTilesGridSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_getTilesGridSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_CLAHE_collectGarbage(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_CLAHE_collectGarbage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setTemplate1(
					global::System.IntPtr obj, 
					global::System.IntPtr templ, 
					global::OpenCvSharp.Point__OpenCvSharp templCenter)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setTemplate1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setTemplate2(
					global::System.IntPtr obj, 
					global::System.IntPtr edges, 
					global::System.IntPtr dx, 
					global::System.IntPtr dy, 
					global::OpenCvSharp.Point__OpenCvSharp templCenter)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setTemplate2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_detect1(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr positions, 
					global::System.IntPtr votes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_detect1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_detect2(
					global::System.IntPtr obj, 
					global::System.IntPtr edges, 
					global::System.IntPtr dx, 
					global::System.IntPtr dy, 
					global::System.IntPtr positions, 
					global::System.IntPtr votes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_detect2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setCannyLowThresh(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setCannyLowThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHough_getCannyLowThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_getCannyLowThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setCannyHighThresh(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setCannyHighThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHough_getCannyHighThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_getCannyHighThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setMinDist(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setMinDist!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHough_getMinDist(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_getMinDist!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setDp(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setDp!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHough_getDp(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_getDp!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHough_setMaxBufferSize(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_setMaxBufferSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHough_getMaxBufferSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHough_getMaxBufferSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_createGeneralizedHoughBallard()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_createGeneralizedHoughBallard!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Ptr_GeneralizedHoughBallard_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_GeneralizedHoughBallard_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Ptr_GeneralizedHoughBallard_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_GeneralizedHoughBallard_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughBallard_setLevels(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughBallard_setLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughBallard_getLevels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughBallard_getLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughBallard_setVotesThreshold(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughBallard_setVotesThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughBallard_getVotesThreshold(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughBallard_getVotesThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_createGeneralizedHoughGuil()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_createGeneralizedHoughGuil!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Ptr_GeneralizedHoughGuil_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_GeneralizedHoughGuil_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Ptr_GeneralizedHoughGuil_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_GeneralizedHoughGuil_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setXi(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setXi!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getXi(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getXi!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setLevels(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughGuil_getLevels(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getLevels!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setAngleEpsilon(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setAngleEpsilon!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getAngleEpsilon(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getAngleEpsilon!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setMinAngle(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setMinAngle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getMinAngle(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getMinAngle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setMaxAngle(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setMaxAngle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getMaxAngle(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getMaxAngle!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setAngleStep(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setAngleStep!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getAngleStep(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getAngleStep!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setAngleThresh(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setAngleThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughGuil_getAngleThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getAngleThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setMinScale(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setMinScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getMinScale(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getMinScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setMaxScale(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setMaxScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getMaxScale(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getMaxScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setScaleStep(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setScaleStep!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double imgproc_GeneralizedHoughGuil_getScaleStep(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getScaleStep!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setScaleThresh(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setScaleThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughGuil_getScaleThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getScaleThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_GeneralizedHoughGuil_setPosThresh(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_setPosThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_GeneralizedHoughGuil_getPosThresh(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_GeneralizedHoughGuil_getPosThresh!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_LineIterator_new(
					global::System.IntPtr img, 
					global::OpenCvSharp.Point__OpenCvSharp pt1, 
					global::OpenCvSharp.Point__OpenCvSharp pt2, 
					int connectivity, 
					int leftToRight)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_LineIterator_operatorEntity(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_operatorEntity!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_operatorPP(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_operatorPP!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Point__OpenCvSharp imgproc_LineIterator_pos(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_pos!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_LineIterator_ptr_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_ptr_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_ptr_set(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_ptr_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_LineIterator_ptr0_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_ptr0_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_step_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_step_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_step_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_step_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_elemSize_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_elemSize_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_elemSize_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_elemSize_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_err_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_err_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_err_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_err_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_count_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_count_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_count_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_count_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_minusDelta_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_minusDelta_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_minusDelta_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_minusDelta_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_plusDelta_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_plusDelta_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_plusDelta_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_plusDelta_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_minusStep_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_minusStep_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_minusStep_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_minusStep_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineIterator_plusStep_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_plusStep_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineIterator_plusStep_set(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineIterator_plusStep_set!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineSegmentDetector_detect_OutputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					global::System.IntPtr width, 
					global::System.IntPtr prec, 
					global::System.IntPtr nfa)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineSegmentDetector_detect_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineSegmentDetector_detect_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					global::System.IntPtr width, 
					global::System.IntPtr prec, 
					global::System.IntPtr nfa)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineSegmentDetector_detect_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_LineSegmentDetector_drawSegments(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineSegmentDetector_drawSegments!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_LineSegmentDetector_compareSegments(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Size__OpenCvSharp size, 
					global::System.IntPtr lines1, 
					global::System.IntPtr lines2, 
					global::System.IntPtr image)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_LineSegmentDetector_compareSegments!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_createLineSegmentDetector(
					int refine, 
					double scale, 
					double sigma_scale, 
					double quant, 
					double ang_th, 
					double log_eps, 
					double density_th, 
					int n_bins)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_createLineSegmentDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Ptr_LineSegmentDetector_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_LineSegmentDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Ptr_LineSegmentDetector_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Ptr_LineSegmentDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Subdiv2D_new()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr imgproc_Subdiv2D_new__0(global::OpenCvSharp.Rect__OpenCvSharp rect)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_new!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_initDelaunay(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Rect__OpenCvSharp rect)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_initDelaunay!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_insert(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_insert!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_insert__0(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp* ptArray, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_insert!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_locate(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					int* edge, 
					int* vertex)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_locate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_findNearest(
					global::System.IntPtr obj, 
					global::OpenCvSharp.Point2f__OpenCvSharp pt, 
					global::OpenCvSharp.Point2f__OpenCvSharp* nearestPt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_findNearest!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_getEdgeList(
					global::System.IntPtr obj, 
					global::System.IntPtr* edgeList)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getEdgeList!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_getTriangleList(
					global::System.IntPtr obj, 
					global::System.IntPtr* triangleList)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getTriangleList!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_getVoronoiFacetList(
					global::System.IntPtr obj, 
					int* idx, 
					int idxCount, 
					global::System.IntPtr* facetList, 
					global::System.IntPtr* facetCenters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getVoronoiFacetList!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void imgproc_Subdiv2D_getVoronoiFacetList__0(
					global::System.IntPtr obj, 
					global::System.IntPtr idx, 
					int idxCount, 
					global::System.IntPtr* facetList, 
					global::System.IntPtr* facetCenters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getVoronoiFacetList!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Point2f__OpenCvSharp imgproc_Subdiv2D_getVertex(
					global::System.IntPtr obj, 
					int vertex, 
					int* firstEdge)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getVertex!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_getEdge(
					global::System.IntPtr obj, 
					int edge, 
					int nextEdgeType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_getEdge!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_nextEdge(
					global::System.IntPtr obj, 
					int edge)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_nextEdge!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_rotateEdge(
					global::System.IntPtr obj, 
					int edge, 
					int rotate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_rotateEdge!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_symEdge(
					global::System.IntPtr obj, 
					int edge)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_symEdge!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_edgeOrg(
					global::System.IntPtr obj, 
					int edge, 
					global::OpenCvSharp.Point2f__OpenCvSharp* orgpt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_edgeOrg!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int imgproc_Subdiv2D_edgeDst(
					global::System.IntPtr obj, 
					int edge, 
					global::OpenCvSharp.Point2f__OpenCvSharp* dstpt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'imgproc_Subdiv2D_edgeDst!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setTrainMethod(
					global::System.IntPtr obj, 
					int method, 
					double param1, 
					double param2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setTrainMethod!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_ANN_MLP_getTrainMethod(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getTrainMethod!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setActivationFunction(
					global::System.IntPtr obj, 
					int type, 
					double param1, 
					double param2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setActivationFunction!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setLayerSizes(
					global::System.IntPtr obj, 
					global::System.IntPtr layerSizes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setLayerSizes!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_ANN_MLP_getLayerSizes(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getLayerSizes!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_ANN_MLP_getTermCriteria(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getBackpropWeightScale(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getBackpropWeightScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setBackpropWeightScale(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setBackpropWeightScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getBackpropMomentumScale(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getBackpropMomentumScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setBackpropMomentumScale(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setBackpropMomentumScale!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getRpropDW0(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getRpropDW0!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setRpropDW0(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setRpropDW0!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getRpropDWPlus(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getRpropDWPlus!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setRpropDWPlus(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setRpropDWPlus!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getRpropDWMinus(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getRpropDWMinus!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setRpropDWMinus(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setRpropDWMinus!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getRpropDWMin(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getRpropDWMin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setRpropDWMin(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setRpropDWMin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_ANN_MLP_getRpropDWMax(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getRpropDWMax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_ANN_MLP_setRpropDWMax(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_setRpropDWMax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_ANN_MLP_getWeights(
					global::System.IntPtr obj, 
					int layerIdx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_getWeights!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_ANN_MLP_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_ANN_MLP_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_ANN_MLP_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_ANN_MLP_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_ANN_MLP_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_ANN_MLP_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_Boost_getBoostType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_getBoostType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Boost_setBoostType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_setBoostType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_Boost_getWeakCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_getWeakCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Boost_setWeakCount(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_setWeakCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_Boost_getWeightTrimRate(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_getWeightTrimRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Boost_setWeightTrimRate(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_setWeightTrimRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Boost_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Boost_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_Boost_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_Boost_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_Boost_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_Boost_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getMaxCategories(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getMaxCategories!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setMaxCategories(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setMaxCategories!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getMaxDepth(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getMaxDepth!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setMaxDepth(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setMaxDepth!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getMinSampleCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getMinSampleCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setMinSampleCount(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setMinSampleCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getCVFolds(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getCVFolds!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setCVFolds(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setCVFolds!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getUseSurrogates(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getUseSurrogates!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setUseSurrogates(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setUseSurrogates!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getUse1SERule(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getUse1SERule!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setUse1SERule(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setUse1SERule!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_DTrees_getTruncatePrunedTree(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getTruncatePrunedTree!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setTruncatePrunedTree(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setTruncatePrunedTree!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_DTrees_getRegressionAccuracy(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getRegressionAccuracy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setRegressionAccuracy(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setRegressionAccuracy!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_DTrees_getPriors(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getPriors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_setPriors(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_setPriors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_getRoots(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getRoots!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_getNodes(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getNodes!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_getSplits(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getSplits!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_DTrees_getSubsets(
					global::System.IntPtr obj, 
					global::System.IntPtr result)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_getSubsets!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_DTrees_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_DTrees_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_DTrees_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_DTrees_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_DTrees_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_DTrees_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_EM_getClustersNumber(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getClustersNumber!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_EM_setClustersNumber(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_setClustersNumber!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_EM_getCovarianceMatrixType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getCovarianceMatrixType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_EM_setCovarianceMatrixType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_setCovarianceMatrixType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_EM_getTermCriteria(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_EM_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_setTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_EM_getWeights(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getWeights!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_EM_getMeans(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getMeans!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_EM_getCovs(
					global::System.IntPtr obj, 
					global::System.IntPtr covs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_getCovs!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.Vec2d__OpenCvSharp ml_EM_predict2(
					global::System.IntPtr model, 
					global::System.IntPtr sample, 
					global::System.IntPtr probs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_predict2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_EM_trainEM(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_trainEM!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_EM_trainE(
					global::System.IntPtr model, 
					global::System.IntPtr samples, 
					global::System.IntPtr means0, 
					global::System.IntPtr covs0, 
					global::System.IntPtr weights0, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_trainE!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_EM_trainM(
					global::System.IntPtr model, 
					global::System.IntPtr samples, 
					global::System.IntPtr probs0, 
					global::System.IntPtr logLikelihoods, 
					global::System.IntPtr labels, 
					global::System.IntPtr probs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_trainM!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_EM_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_EM_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_EM_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_EM_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_EM_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_EM_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_KNearest_getDefaultK(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_getDefaultK!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_KNearest_setDefaultK(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_setDefaultK!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_KNearest_getIsClassifier(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_getIsClassifier!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_KNearest_setIsClassifier(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_setIsClassifier!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_KNearest_getEmax(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_getEmax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_KNearest_setEmax(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_setEmax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_KNearest_getAlgorithmType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_getAlgorithmType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_KNearest_setAlgorithmType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_setAlgorithmType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_KNearest_findNearest(
					global::System.IntPtr samples, 
					int k, 
					global::System.IntPtr results, 
					global::System.IntPtr neighborResponses, 
					global::System.IntPtr dist)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_findNearest!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_KNearest_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_KNearest_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_KNearest_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_KNearest_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_KNearest_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_KNearest_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_LogisticRegression_getLearningRate(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getLearningRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setLearningRate(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setLearningRate!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_LogisticRegression_getIterations(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getIterations!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setIterations(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setIterations!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_LogisticRegression_getRegularization(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getRegularization!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setRegularization(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setRegularization!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_LogisticRegression_getTrainMethod(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getTrainMethod!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setTrainMethod(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setTrainMethod!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_LogisticRegression_getMiniBatchSize(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getMiniBatchSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setMiniBatchSize(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setMiniBatchSize!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_LogisticRegression_getTermCriteria(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_getTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_LogisticRegression_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_setTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_LogisticRegression_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr results, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_predict!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_LogisticRegression_get_learnt_thetas(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_get_learnt_thetas!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_LogisticRegression_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_LogisticRegression_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_LogisticRegression_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_LogisticRegression_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_LogisticRegression_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_LogisticRegression_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_NormalBayesClassifier_predictProb(
					global::System.IntPtr obj, 
					global::System.IntPtr inputs, 
					global::System.IntPtr samples, 
					global::System.IntPtr outputProbs, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_NormalBayesClassifier_predictProb!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_NormalBayesClassifier_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_NormalBayesClassifier_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_NormalBayesClassifier_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_NormalBayesClassifier_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_NormalBayesClassifier_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_NormalBayesClassifier_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_RTrees_getCalculateVarImportance(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_getCalculateVarImportance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_RTrees_setCalculateVarImportance(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_setCalculateVarImportance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_RTrees_getActiveVarCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_getActiveVarCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_RTrees_setActiveVarCount(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_setActiveVarCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_RTrees_getTermCriteria(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_getTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_RTrees_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_setTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_RTrees_getVarImportance(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_getVarImportance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_RTrees_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_RTrees_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_RTrees_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_RTrees_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_RTrees_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_RTrees_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_StatModel_clear(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_clear!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_getVarCount(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_getVarCount!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_empty(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_empty!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_isTrained(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_isTrained!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_isClassifier(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_isClassifier!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_train1(
					global::System.IntPtr obj, 
					global::System.IntPtr trainData, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_train1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_StatModel_train2(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					int layout, 
					global::System.IntPtr responses)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_train2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_StatModel_calcError(
					global::System.IntPtr obj, 
					global::System.IntPtr data, 
					int test, 
					global::System.IntPtr resp)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_calcError!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float ml_StatModel_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr samples, 
					global::System.IntPtr results, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_predict!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_StatModel_save(
					global::System.IntPtr obj, 
					byte* filename)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_StatModel_save!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_SVM_getType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setType(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getGamma(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getGamma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setGamma(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setGamma!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getCoef0(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getCoef0!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setCoef0(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setCoef0!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getDegree(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getDegree!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setDegree(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setDegree!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getC(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getC!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setC(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setC!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getP(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getP!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setP(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setP!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getNu(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getNu!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setNu(
					global::System.IntPtr obj, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setNu!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_SVM_getClassWeights(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getClassWeights!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setClassWeights(
					global::System.IntPtr obj, 
					global::System.IntPtr val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setClassWeights!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.TermCriteria__OpenCvSharp ml_SVM_getTermCriteria(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setTermCriteria(
					global::System.IntPtr obj, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setTermCriteria!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ml_SVM_getKernelType(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getKernelType!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_SVM_setKernel(
					global::System.IntPtr obj, 
					int kernelType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_setKernel!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_SVM_getSupportVectors(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getSupportVectors!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double ml_SVM_getDecisionFunction(
					global::System.IntPtr obj, 
					int i, 
					global::System.IntPtr alpha, 
					global::System.IntPtr svidx)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getDecisionFunction!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.ML.ParamGrid__OpenCvSharp ml_SVM_getDefaultGrid(int paramId)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_getDefaultGrid!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_SVM_create()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_SVM_create!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ml_Ptr_SVM_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_SVM_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ml_Ptr_SVM_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ml_Ptr_SVM_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_inpaint(
					global::System.IntPtr src, 
					global::System.IntPtr inpaintMask, 
					global::System.IntPtr dst, 
					double inpaintRadius, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_inpaint!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_fastNlMeansDenoising(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float h, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_fastNlMeansDenoising!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_fastNlMeansDenoisingColored(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float h, 
					float hColor, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_fastNlMeansDenoisingColored!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_fastNlMeansDenoisingMulti(
					global::System.IntPtr* srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					int imgToDenoiseIndex, 
					int temporalWindowSize, 
					float h, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_fastNlMeansDenoisingMulti!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_fastNlMeansDenoisingColoredMulti(
					global::System.IntPtr* srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					int imgToDenoiseIndex, 
					int temporalWindowSize, 
					float h, 
					float hColor, 
					int templateWindowSize, 
					int searchWindowSize)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_fastNlMeansDenoisingColoredMulti!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_denoise_TVL1(
					global::System.IntPtr* observations, 
					int observationsSize, 
					global::System.IntPtr result, 
					double lambda, 
					int niters)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_denoise_TVL1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_decolor(
					global::System.IntPtr src, 
					global::System.IntPtr grayscale, 
					global::System.IntPtr color_boost)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_decolor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_seamlessClone(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					global::System.IntPtr mask, 
					global::OpenCvSharp.Point__OpenCvSharp p, 
					global::System.IntPtr blend, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_seamlessClone!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_colorChange(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float red_mul, 
					float green_mul, 
					float blue_mul)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_colorChange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_illuminationChange(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float alpha, 
					float beta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_illuminationChange!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_textureFlattening(
					global::System.IntPtr src, 
					global::System.IntPtr mask, 
					global::System.IntPtr dst, 
					float low_threshold, 
					float high_threshold, 
					int kernel_size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_textureFlattening!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_edgePreservingFilter(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int flags, 
					float sigma_s, 
					float sigma_r)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_edgePreservingFilter!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_detailEnhance(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float sigma_s, 
					float sigma_r)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_detailEnhance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_pencilSketch(
					global::System.IntPtr src, 
					global::System.IntPtr dst1, 
					global::System.IntPtr dst2, 
					float sigma_s, 
					float sigma_r, 
					float shade_factor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_pencilSketch!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_stylization(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					float sigma_s, 
					float sigma_r)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_stylization!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr photo_createCalibrateDebevec(
					int samples, 
					float lambda, 
					int random)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_createCalibrateDebevec!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr photo_createCalibrateRobertson(
					int maxIter, 
					float threshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_createCalibrateRobertson!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_Ptr_CalibrateDebevec_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_Ptr_CalibrateDebevec_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_Ptr_CalibrateRobertson_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_Ptr_CalibrateRobertson_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr photo_Ptr_CalibrateDebevec_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_Ptr_CalibrateDebevec_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr photo_Ptr_CalibrateRobertson_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_Ptr_CalibrateRobertson_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void photo_CalibrateCRF_process(
					global::System.IntPtr obj, 
					global::System.IntPtr* srcImgs, 
					int srcImgsLength, 
					global::System.IntPtr dst, 
					float* times)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'photo_CalibrateCRF_process!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeDistanceExtractor_computeDistance(
					global::System.IntPtr obj, 
					global::System.IntPtr contour1, 
					global::System.IntPtr contour2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeDistanceExtractor_computeDistance!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_Ptr_ShapeContextDistanceExtractor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_Ptr_ShapeContextDistanceExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr shape_Ptr_ShapeContextDistanceExtractor_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_Ptr_ShapeContextDistanceExtractor_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setAngularBins(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setAngularBins!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int shape_ShapeContextDistanceExtractor_getAngularBins(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getAngularBins!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setRadialBins(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setRadialBins!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int shape_ShapeContextDistanceExtractor_getRadialBins(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getRadialBins!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setInnerRadius(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setInnerRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getInnerRadius(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getInnerRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setOuterRadius(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setOuterRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getOuterRadius(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getOuterRadius!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setRotationInvariant(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setRotationInvariant!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int shape_ShapeContextDistanceExtractor_getRotationInvariant(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getRotationInvariant!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setShapeContextWeight(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setShapeContextWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getShapeContextWeight(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getShapeContextWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setImageAppearanceWeight(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setImageAppearanceWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getImageAppearanceWeight(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getImageAppearanceWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setBendingEnergyWeight(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setBendingEnergyWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getBendingEnergyWeight(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getBendingEnergyWeight!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setImages(
					global::System.IntPtr obj, 
					global::System.IntPtr image1, 
					global::System.IntPtr image2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setImages!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_getImages(
					global::System.IntPtr obj, 
					global::System.IntPtr image1, 
					global::System.IntPtr image2)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getImages!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setIterations(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setIterations!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int shape_ShapeContextDistanceExtractor_getIterations(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getIterations!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_ShapeContextDistanceExtractor_setStdDev(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_setStdDev!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_ShapeContextDistanceExtractor_getStdDev(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_ShapeContextDistanceExtractor_getStdDev!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr shape_createShapeContextDistanceExtractor(
					int nAngularBins, 
					int nRadialBins, 
					float innerRadius, 
					float outerRadius, 
					int iterations)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_createShapeContextDistanceExtractor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_Ptr_HausdorffDistanceExtractor_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_Ptr_HausdorffDistanceExtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr shape_Ptr_HausdorffDistanceExtractor_get(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_Ptr_HausdorffDistanceExtractor_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_HausdorffDistanceExtractor_setDistanceFlag(
					global::System.IntPtr obj, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_HausdorffDistanceExtractor_setDistanceFlag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int shape_HausdorffDistanceExtractor_getDistanceFlag(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_HausdorffDistanceExtractor_getDistanceFlag!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void shape_HausdorffDistanceExtractor_setRankProportion(
					global::System.IntPtr obj, 
					float val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_HausdorffDistanceExtractor_setRankProportion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static float shape_HausdorffDistanceExtractor_getRankProportion(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_HausdorffDistanceExtractor_getRankProportion!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr shape_createHausdorffDistanceExtractor(
					int distanceFlag, 
					float rankProp)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'shape_createHausdorffDistanceExtractor!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::OpenCvSharp.RotatedRect__OpenCvSharp video_CamShift(
					global::System.IntPtr probImage, 
					global::OpenCvSharp.Rect__OpenCvSharp* window, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_CamShift!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_meanShift(
					global::System.IntPtr probImage, 
					global::OpenCvSharp.Rect__OpenCvSharp* window, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_meanShift!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_new1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_new1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_new2(
					int dynamParams, 
					int measureParams, 
					int controlParams, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_new2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_KalmanFilter_init(
					global::System.IntPtr obj, 
					int dynamParams, 
					int measureParams, 
					int controlParams, 
					int type)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_init!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_KalmanFilter_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_predict(
					global::System.IntPtr obj, 
					global::System.IntPtr control)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_predict!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_correct(
					global::System.IntPtr obj, 
					global::System.IntPtr measurement)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_correct!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_statePre(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_statePre!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_statePost(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_statePost!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_transitionMatrix(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_transitionMatrix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_controlMatrix(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_controlMatrix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_measurementMatrix(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_measurementMatrix!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_processNoiseCov(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_processNoiseCov!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_measurementNoiseCov(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_measurementNoiseCov!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_errorCovPre(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_errorCovPre!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_gain(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_gain!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_KalmanFilter_errorCovPost(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_KalmanFilter_errorCovPost!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_buildOpticalFlowPyramid1(
					global::System.IntPtr img, 
					global::System.IntPtr pyramid, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					int withDerivatives, 
					int pyrBorder, 
					int derivBorder, 
					int tryReuseInputImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_buildOpticalFlowPyramid1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_buildOpticalFlowPyramid2(
					global::System.IntPtr img, 
					global::System.IntPtr pyramidVec, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					int withDerivatives, 
					int pyrBorder, 
					int derivBorder, 
					int tryReuseInputImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_buildOpticalFlowPyramid2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_calcOpticalFlowPyrLK_InputArray(
					global::System.IntPtr prevImg, 
					global::System.IntPtr nextImg, 
					global::System.IntPtr prevPts, 
					global::System.IntPtr nextPts, 
					global::System.IntPtr status, 
					global::System.IntPtr err, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int flags, 
					double minEigThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_calcOpticalFlowPyrLK_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_calcOpticalFlowPyrLK_vector(
					global::System.IntPtr prevImg, 
					global::System.IntPtr nextImg, 
					global::OpenCvSharp.Point2f__OpenCvSharp* prevPts, 
					int prevPtsSize, 
					global::System.IntPtr nextPts, 
					global::System.IntPtr status, 
					global::System.IntPtr err, 
					global::OpenCvSharp.Size__OpenCvSharp winSize, 
					int maxLevel, 
					global::OpenCvSharp.TermCriteria__OpenCvSharp criteria, 
					int flags, 
					double minEigThreshold)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_calcOpticalFlowPyrLK_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_calcOpticalFlowFarneback(
					global::System.IntPtr prev, 
					global::System.IntPtr next, 
					global::System.IntPtr flow, 
					double pyrScale, 
					int levels, 
					int winSize, 
					int iterations, 
					int polyN, 
					double polySigma, 
					int flags)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_calcOpticalFlowFarneback!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_estimateRigidTransform(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int fullAffine)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_estimateRigidTransform!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_DenseOpticalFlow_calc(
					global::System.IntPtr obj, 
					global::System.IntPtr i0, 
					global::System.IntPtr i1, 
					global::System.IntPtr flow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_DenseOpticalFlow_calc!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_DenseOpticalFlow_collectGarbage(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_DenseOpticalFlow_collectGarbage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_DenseOpticalFlow_info(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_DenseOpticalFlow_info!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_createOptFlow_DualTVL1()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_createOptFlow_DualTVL1!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_Ptr_DenseOpticalFlow_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_DenseOpticalFlow_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_Ptr_DenseOpticalFlow_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_DenseOpticalFlow_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractor_getBackgroundImage(
					global::System.IntPtr self, 
					global::System.IntPtr backgroundImage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractor_getBackgroundImage!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractor_apply(
					global::System.IntPtr self, 
					global::System.IntPtr image, 
					global::System.IntPtr fgmask, 
					double learningRate)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractor_apply!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_Ptr_BackgroundSubtractor_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractor_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_Ptr_BackgroundSubtractor_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractor_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_createBackgroundSubtractorMOG2(
					int history, 
					double varThreshold, 
					int detectShadows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_createBackgroundSubtractorMOG2!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_Ptr_BackgroundSubtractorMOG2_delete(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractorMOG2_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_Ptr_BackgroundSubtractorMOG2_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractorMOG2_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorMOG2_getHistory(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorMOG2_getNMixtures(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getNMixtures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setNMixtures(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setNMixtures!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getBackgroundRatio(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getBackgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setBackgroundRatio(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setBackgroundRatio!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getVarThreshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getVarThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setVarThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setVarThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getVarThresholdGen(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getVarThresholdGen!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setVarThresholdGen(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setVarThresholdGen!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getVarInit(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getVarInit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setVarInit(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setVarInit!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getVarMin(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getVarMin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setVarMin(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setVarMin!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getVarMax(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getVarMax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setVarMax(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setVarMax!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getComplexityReductionThreshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getComplexityReductionThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setComplexityReductionThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setComplexityReductionThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorMOG2_getDetectShadows(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getDetectShadows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setDetectShadows(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setDetectShadows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorMOG2_getShadowValue(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getShadowValue!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setShadowValue(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setShadowValue!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorMOG2_getShadowThreshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_getShadowThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorMOG2_setShadowThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorMOG2_setShadowThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_createBackgroundSubtractorKNN(
					int history, 
					double dist2Threshold, 
					int detectShadows)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_createBackgroundSubtractorKNN!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_Ptr_BackgroundSubtractorKNN_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractorKNN_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr video_Ptr_BackgroundSubtractorKNN_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_Ptr_BackgroundSubtractorKNN_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getHistory(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setHistory(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setHistory!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getNSamples(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getNSamples!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setNSamples(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setNSamples!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getDist2Threshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getDist2Threshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setDist2Threshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setDist2Threshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getkNNSamples(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getkNNSamples!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setkNNSamples(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setkNNSamples!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getDetectShadows(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getDetectShadows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setDetectShadows(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setDetectShadows!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int video_BackgroundSubtractorKNN_getShadowValue(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getShadowValue!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setShadowValue(
					global::System.IntPtr ptr, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setShadowValue!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double video_BackgroundSubtractorKNN_getShadowThreshold(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_getShadowThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void video_BackgroundSubtractorKNN_setShadowThreshold(
					global::System.IntPtr ptr, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'video_BackgroundSubtractorKNN_setShadowThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_niBlackThreshold(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					double maxValue, 
					int type, 
					int blockSize, 
					double delta)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_niBlackThreshold!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_thinning(
					global::System.IntPtr src, 
					global::System.IntPtr dst, 
					int thinningType)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_thinning!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_FastLineDetector_delete(global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_FastLineDetector_delete!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ximgproc_Ptr_FastLineDetector_get(global::System.IntPtr ptr)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_Ptr_FastLineDetector_get!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_FastLineDetector_detect_OutputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_FastLineDetector_detect_OutputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_FastLineDetector_detect_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_FastLineDetector_detect_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_FastLineDetector_drawSegments_InputArray(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					int draw_arrow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_FastLineDetector_drawSegments_InputArray!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void ximgproc_FastLineDetector_drawSegments_vector(
					global::System.IntPtr obj, 
					global::System.IntPtr image, 
					global::System.IntPtr lines, 
					int draw_arrow)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_FastLineDetector_drawSegments_vector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr ximgproc_createFastLineDetector(
					int length_threshold, 
					float distance_threshold, 
					double canny_th1, 
					double canny_th2, 
					int canny_aperture_size, 
					int do_merge)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ximgproc_createFastLineDetector!OpenCvSharpExtern' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class kernel32_PInvokes
	{
		public static global::System.IntPtr LoadLibrary(byte* lpFileName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'LoadLibrary!kernel32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-libraryloader-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr GetProcAddress(
					global::System.IntPtr hModule, 
					byte* lpProcName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-libraryloader-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FreeLibrary(global::System.IntPtr hLibModule);

		public static global::System.IntPtr Win32LoadLibrary(ushort* dllPath)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'Win32LoadLibrary!kernel32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class gdi32_PInvokes
	{
		public static int SetDIBitsToDevice(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					uint dwWidth, 
					uint dwHeight, 
					int XSrc, 
					int YSrc, 
					uint uStartScan, 
					uint cScanLines, 
					global::System.IntPtr lpvBits, 
					global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType* lpbmi, 
					uint fuColorUse)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SetDIBitsToDevice!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int SetDIBitsToDevice__0(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					uint dwWidth, 
					uint dwHeight, 
					int XSrc, 
					int YSrc, 
					uint uStartScan, 
					uint cScanLines, 
					global::System.IntPtr lpvBits, 
					global::System.IntPtr lpbmi, 
					uint fuColorUse)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SetDIBitsToDevice!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int GetDIBColorTable(
					global::System.IntPtr dc, 
					int index, 
					int entries, 
					global::OpenCvSharp.Win32Api_RGBQUAD__OpenCvSharp* colors)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'GetDIBColorTable!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int GetDIBits(
					global::System.IntPtr dc, 
					global::System.IntPtr bmp, 
					int startScan, 
					int scanLineCount, 
					byte* data, 
					global::System.IntPtr info, 
					global::OpenCvSharp.Win32Api_ColorTableType__OpenCvSharp usage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'GetDIBits!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr CreateCompatibleDC(global::System.IntPtr hdc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'CreateCompatibleDC!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr SelectObject(
					global::System.IntPtr hdc, 
					global::System.IntPtr obj)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SelectObject!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int DeleteObject(global::System.IntPtr handle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DeleteObject!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int DeleteDC(global::System.IntPtr hdc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'DeleteDC!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int SetStretchBltMode(
					global::System.IntPtr hdc, 
					int iStretchMode)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'SetStretchBltMode!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int StretchDIBits(
					global::System.IntPtr hdc, 
					int XDest, 
					int YDest, 
					int nDestWidth, 
					int nDestHeight, 
					int XSrc, 
					int YSrc, 
					int nSrcWidth, 
					int nSrcHeight, 
					global::System.IntPtr lpBits, 
					global::OpenCvSharp.Win32Api_BITMAPINFO__OpenCvSharp__Impl.UnsafeType* lpBitsInfo, 
					uint iUsage, 
					uint dwRop)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'StretchDIBits!gdi32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class user32_PInvokes
	{
		public static int GetIconInfo(
					global::System.IntPtr icon, 
					global::OpenCvSharp.Win32Api_ICONINFO__OpenCvSharp__Impl.UnsafeType* info)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'GetIconInfo!user32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr GetDC(global::System.IntPtr window)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'GetDC!user32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int ReleaseDC(
					global::System.IntPtr window, 
					global::System.IntPtr dc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'ReleaseDC!user32' in assembly 'OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);
	}

	public unsafe static partial class api_ms_win_core_processenvironment_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-processenvironment-l1-2-0.dll", EntryPoint="GetCurrentDirectoryW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCurrentDirectory(
					int nBufferLength, 
					ushort* lpBuffer);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class api_ms_win_core_file_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileType(global::System.IntPtr hFile);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="GetLongPathNameW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLongPathNamePrivate(
					ushort* path, 
					ushort* longPathBuffer, 
					int bufferLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetFilePointerEx(
					global::System.IntPtr hFile, 
					long liDistanceToMove, 
					long* lpNewFilePointer, 
					uint dwMoveMethod);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="FindFirstFileExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr FindFirstFileExPrivate(
					ushort* lpFileName, 
					global::Interop_mincore_FINDEX_INFO_LEVELS__System_IO_FileSystem fInfoLevelId, 
					global::Interop_mincore_WIN32_FIND_DATA__System_IO_FileSystem__Impl.UnsafeType* lpFindFileData, 
					global::Interop_mincore_FINDEX_SEARCH_OPS__System_IO_FileSystem fSearchOp, 
					global::System.IntPtr lpSearchFilter, 
					int dwAdditionalFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="GetFileAttributesExW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileAttributesExPrivate(
					ushort* name, 
					global::Interop_mincore_GET_FILEEX_INFO_LEVELS__System_IO_FileSystem fileInfoLevel, 
					global::Interop_mincore_WIN32_FILE_ATTRIBUTE_DATA__System_IO_FileSystem* lpFileInformation);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int SetEndOfFile(global::System.IntPtr hFile);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FindClose(global::System.IntPtr hFindFile);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					global::System.IntPtr numBytesRead_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* overlapped);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="ReadFile", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ReadFile__0(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToRead, 
					int* numBytesRead, 
					global::System.IntPtr mustBeZero);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					global::System.IntPtr numBytesWritten_mustBeZero, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", EntryPoint="WriteFile", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WriteFile__0(
					global::System.IntPtr handle, 
					byte* bytes, 
					int numBytesToWrite, 
					int* numBytesWritten, 
					global::System.IntPtr mustBeZero);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FlushFileBuffers(global::System.IntPtr hHandle);
	}

	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateThreadpoolIo(
					global::System.IntPtr fl, 
					void* pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CloseThreadpoolIo(global::System.IntPtr pio);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void StartThreadpoolIo(global::System.IntPtr pio);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CancelThreadpoolIo(global::System.IntPtr pio);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class api_ms_win_core_file_l2_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l2-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetFileInformationByHandleEx(
					global::System.IntPtr hFile, 
					global::Interop_mincore_FILE_INFO_BY_HANDLE_CLASS__System_IO_FileSystem FileInformationClass, 
					global::Interop_mincore_FILE_STANDARD_INFO__System_IO_FileSystem* lpFileInformation, 
					uint dwBufferSize);
	}

	public unsafe static partial class api_ms_win_core_file_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-file-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateFile2(
					ushort* lpFileName, 
					int dwDesiredAccess, 
					global::System.IO.FileShare__System_IO_FileSystem_Primitives dwShareMode, 
					global::System.IO.FileMode__System_IO_FileSystem_Primitives dwCreationDisposition, 
					global::Interop_mincore_CREATEFILE2_EXTENDED_PARAMETERS__System_IO_FileSystem* parameters);
	}

	public unsafe static partial class api_ms_win_core_handle_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-handle-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CloseHandle(global::System.IntPtr handle);
	}

	public unsafe static partial class api_ms_win_core_io_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-io-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CancelIoEx(
					global::System.IntPtr handle, 
					global::System.Threading.NativeOverlapped__System_Threading_Overlapped* lpOverlapped);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl*** bufferMarshalerPtr);
	}
}

